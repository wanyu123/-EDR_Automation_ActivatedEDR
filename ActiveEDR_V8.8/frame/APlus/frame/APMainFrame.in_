[ ] use "Settings.inc"
[ ] use "../include/Functions.inc"
[ ] use "../include/APChildwin.inc"
[ ] use "../include/24hRunningByNobody.inc"
[ ] use "bwcompat.inc"
[ ] use "../include/LocatorDefine.inc"//Added by Zhangya
[ ]  
[ ] // -------------------------------Constant Global Variables-----------------------------------------------
[ ] const real relTol = 0.01  // 1% tolerance for GUI testing 
[ ] const real absTol = 1.0e20
[ ] const string AspenPlusVersion = "34.0"
[ ] const boolean cpDebug = TRUE
[ ] const string sV =  substr(sVersion,2, 1) + substr(sVersion,4, 1)   //CURRENT VERSION IN DATABASE FORMAT---> V8.0 = 80
[ ] //------------------------------------------------------------------------------------------------------
[ ] 
[ ] 
[ ] 
[ ] //Aspen Plus main winclass
[-] winclass wcAspenPlus : WPFWindow
	[ ] string sCmdLine = getInstallationFolder()
	[ ] 
	[-] //======================GUI===============================//
		[+] //Common Tab Items
			[+] WPFTabItem tabiControlPanel
				[ ] locator "//WPFTabItem[@caption='Control Panel*']"
				[ ] 
			[ ] 
			[+] WPFButton	btnUnpin
				[ ] locator "//WPFButton[@automationId='unpinBtn']"
		[ ] 
		[+] //Quick Access Toolbar
			[+] WPFItemsControl grpQuickAccessToolbar
				[ ] locator "//WPFItemsControl[@automationId='igRibbon_QuickAccessToolbar_1']"
				[+] WPFButtonBase btnSave
					[ ] locator "//WPFButtonBase[2]"
				[+] WPFButtonBase btnFlowsheet
					[ ] locator "//WPFButtonBase[3]"
				[+] WPFButtonBase btnNext
					[ ] locator "//WPFButtonBase[@automationId='igRibbon_btnNextInput' or @automationId='igRibbon_btnPropertiesNextInput']"
				[+] WPFButtonBase btnControlPanel
					[ ] locator "//WPFButtonBase[5]"
				[+] WPFButtonBase btnRun
					[ ]  locator "//WPFButtonBase[@automationId='igRibbon_btnRun' or @automationId='igRibbon_btnRunProp']"
					[+] boolean isEnable()
						[+] do
							[+] if(btnRun.IsEnabled)
								[ ] return true
							[+] else
								[ ] return false
						[+] except
							[ ] return false
				[+] WPFButtonBase btnStop
					[ ] locator "//WPFButtonBase[7]"
				[+] WPFButtonBase btnReinit
					[ ] locator "//WPFButtonBase[8]"
					[ ] 
			[+] WPFItemsControl grpQuickAccessToolbarAPR
				[ ] locator "//WPFItemsControl[@automationId='igRibbon_QuickAccessToolbar_1']"
				[+] WPFButtonBase btnSave
					[ ] locator "//WPFButtonBase[1]"
				[+] WPFButtonBase btnNext
					[ ] locator "//WPFButtonBase[@automationId='igRibbon_btnPropertiesNextInput']"
				[+] WPFButtonBase btnControlPanel
					[ ] locator "//WPFButtonBase[3]"
				[+] WPFButtonBase btnRun
					[ ] locator "//WPFButtonBase[@caption='Run.']"
				[+] WPFButtonBase btnStop
					[ ] locator "//WPFButtonBase[5]"
				[+] WPFButtonBase btnReinit
					[ ] locator "//WPFButtonBase[caption='*Purge*']"
					[ ] 
			[ ] 
			[+] WPFButtonBase btnNextAPR
				[ ] locator "//WPFButtonBase[@automationId='igRibbon_btnPropertiesNextInput']"
			[+] WPFButtonBase btnQATControlPanel
				[ ] locator "//WPFButtonBase[@caption='Open the Control Panel. The Control Panel shows convergence information and messages generated during a run.']"
			[+] WPFButtonBase btnQATReinit
				[ ] locator "//WPFButtonBase[@automationId='igRibbon_btnReset']"
			[+] WPFButtonBase btnQATSave
				[ ] locator "//WPFButtonBase[@automationId='igRibbon_ButtonTool_3']"
			[+] WPFButtonBase btnQATNext
				[ ] locator "//WPFButtonBase[@caption='Go to the next input sheet needing input, or show what is needed to complete the current sheet.']"
			[+] WPFButtonBase btnQATRun
				[ ]  locator "//WPFButtonBase[@automationId='igRibbon_btnRun']"
				[+] boolean isEnable()
					[+] do
						[+] if(btnQATRun.IsEnabled)
							[ ] return true
						[+] else
							[ ] return false
					[+] except
						[ ] return false
			[+] WPFButtonBase btnQATStop
				[ ] locator "/WPFButtonBase[@automationId='igRibbon_btnStop']"
			[ ] 
		[ ] 
		[+] //Model Palette
			[+] WPFHeaderedContentControl grpModelPalette
				[ ] locator "//WPFHeaderedContentControl[@automationId='ModelLibraryScreenFactoryKey']"
				[+] WPFContentControl grpPanelHeader
					[ ] locator "//WPFContentControl[@className='PaneHeaderPresenter']"
					[+] WPFTextBlock txtModelPalette
						[ ] locator "//WPFTextBlock[@caption='Model Palette']"
					[+] WPFMenu mnPosition
						[ ] locator "//WPFMenu[@automationId='positionMenu']"
					[+] WPFButton btnPin
						[ ] locator "//WPFButton[@automationId='unpinBtn']"
					[+] WPFButton btnClose
						[ ] locator "//WPFButton[@automationId='closeBtn'][1]"
				[+] WPFControl grpLibraryControl
					[ ] locator "//WPFControl[@name='theLibraryControl']"
					[+] WPFContentControl btnCancelInsertMode
						[ ] locator "//WPFContentControl[@name='PART_SelectorButton']"
					[+] WPFSelector grpStreamsSelector
						[ ] locator "//WPFSelector[@name='PART_StreamsDropdownButton']"
						[+] WPFExpander weStreamExpander
							[ ] locator "//WPFExpander[@automationId='PART_Expander'][1]"
						[+] WPFContentControl btnMaterial
							[ ] locator "//WPFContentControl[(@name='PART_OptionButton' and @caption='Material')]"
					[+] WPFControl grpBlockTable
						[ ] locator "//WPFControl[@name='PART_BlockTableControl']"
						[+] WPFTabItem tbMixersSplitters
							[ ] locator "//WPFTabItem[@caption='Mixers/Splitters']"
						[+] WPFTabItem tbSeparators
							[ ] locator "//WPFTabItem[@caption='Separators']"
						[+] WPFTabItem tbExchangers
							[ ] locator "//WPFTabItem[@caption='Exchangers']"
						[+] WPFTabItem tbColumns
							[ ] locator "//WPFTabItem[@caption='Columns']"
						[+] WPFTabItem tbReactors
							[ ] locator "//WPFTabItem[@caption='Reactors']"
						[+] WPFTabItem tbPressureChanges
							[ ] locator "//WPFTabItem[@caption='Pressure Changers']"
						[+] WPFTabItem tbManipulators
							[ ] locator "//WPFTabItem[@caption='Manipulators']"
						[+] WPFTabItem tbSolids
							[ ] locator "//WPFTabItem[@caption='Solids']"
						[+] WPFTabItem tbSolidsSeparators
							[ ] locator "//WPFTabItem[@caption='Solids Separators']"
						[+] WPFTabItem tbUserModels
							[ ] locator "//WPFTabItem[@caption='User Models']"
						[+] WPFContentControl grpBlocks
							[ ] locator "//WPFContentControl[@name='PART_SlideBox']"
							[+] WPFButton btnUser
								[ ] locator "//WPFButton[@caption='User']"
							[+] WPFButton btnUser2
								[ ] locator "//WPFButton[@caption='User2']"
							[+] WPFButton btnUser3
								[ ] locator "//WPFButton[@caption='User3']"
							[+] WPFButton btnHierarchy
								[ ] locator "//WPFButton[@caption='Hierarchy']"
						[+] WPFRepeatButton btnScrollLeft
							[ ] locator "//WPFRepeatButton[@automationId='PART_ScrollLeft']"
						[+] WPFRepeatButton btnScrollRight
							[ ] locator "//WPFRepeatButton[@automationId='PART_ScrollRight']"
			[+] WPFButtonBase btnRPlug
				[ ]  locator "//WPFButton[@caption='RPlug']"
			[+]  WPFButtonBase btnCancelInsertMode
				[ ] locator "//WPFButton[@automationId='PART_Button'][1]"
			[ ] 
		[ ] 
		[+] //File Menu, MenuItems, and Content Menus
			[+] WPFMenuItem       miSaveAs_APR
				[ ] locator "//WPFMenuItem[@caption='Save As'][1]"
			[+] WPFToggleButton mnuFile
				[ ] locator "//WPFToggleButton[@automationId='orbPanel']"
				[ ] 
				[ ] 
			[+] WPFMenuItem miFile_APR
				[ ] locator "//WPFMenuItem[@className='ApplicationMenuPresenter']"
			[+] WPFHeaderedContentControl miaspenONEDrive
				[ ] locator "//WPFHeaderedContentControl[@automationId='aspenONEDriveMenuItem']"
			[+] WPFHeaderedContentControl miExchange
				[ ] locator "//WPFHeaderedContentControl[@automationId='Exchange']"
			[+] WPFHeaderedContentControl       miSave
				[ ] locator "//WPFHeaderedContentControl[@automationId='Save']"
			[+] WPFHeaderedContentControl       miSaveAs
				[ ] locator "//WPFHeaderedContentControl[@automationId='AspenPlus_SaveAs']"
			[ ] 
			[+] WPFHeaderedContentControl miOpen
				[ ] locator "//WPFItemsControl[@automationId='ApplicationMenu2010']/WPFHeaderedContentControl[@caption='Open']"
			[+] WPFHeaderedContentControl miClose
				[ ] locator "//WPFHeaderedContentControl[@automationId='CloseDocument']"
			[+] WPFHeaderedContentControl miRecent
				[ ] locator "//WPFHeaderedContentControl[@automationId='Recent']"
			[+] WPFMenuItem       miNew
				[ ] locator "//WPFItemsControl[@automationId='ApplicationMenu2010']/WPFHeaderedContentControl[@caption='New']"
			[+] WPFMenuItem       miNew_APR
				[ ] locator "//WPFMenuItem[@caption='New']"
			[+] WPFHeaderedContentControl       miImport
				[ ] locator "//WPFHeaderedContentControl[@automationId='AspenPlus_Import']"
			[+] WPFHeaderedContentControl       miExport
				[ ] locator "//WPFHeaderedContentControl[@automationId='Export']"
			[+] WPFHeaderedContentControl miEditCompoundFile
				[ ] locator "//WPFHeaderedContentControl[@automationId='EditCompFile']"
			[+] WPFHeaderedContentControl       miPrintPreview
				[ ] locator "//WPFHeaderedContentControl[@automationId='PrintPreview']"
			[+] WPFHeaderedContentControl       miPrint
				[ ] locator "//WPFHeaderedContentControl[@automationId='Print']"
			[+] WPFMenuItem 					miPrintAPR
				[ ] locator "//WPFMenuItem[@caption='Print']"
			[+] WPFHeaderedContentControl       miPageSetup
				[ ] locator "/WPFHeaderedContentControl[@automationId='PageSetup']"
			[+] WPFHeaderedContentControl       miAbout
				[ ] locator "//WPFHeaderedContentControl[@automationId='About']"
			[+] WPFHeaderedContentControl       miOptions
				[ ] locator "//WPFHeaderedContentControl[@automationId='Options']"
			[+] WPFHeaderedContentControl       miExit
				[ ] locator "//WPFHeaderedContentControl[@automationId='Exit']"
			[+] WPFMenuItem       miExport_APR
				[ ] locator "//WPFMenuItem[@caption='Export'][1]"
			[ ] 
			[ ] 
			[ ] //Save As Menu
			[+] WPFHeaderedContentControl miCompoundFile
				[ ] locator "//WPFHeaderedContentControl[@caption='Compound File*']"
			[+] WPFHeaderedContentControl miTemplate
				[ ] locator "//WPFHeaderedContentControl[@caption='Template*']"
				[ ] 
			[+] WPFHeaderedContentControl miAspenPlusDocument
				[ ] locator "//WPFHeaderedContentControl[@caption='Aspen Plus Document*']"
			[+] WPFHeaderedContentControl miAspenPlusBackup
				[ ] locator "//WPFHeaderedContentControl[@caption='Aspen Plus Backup*']"
			[ ] 
			[+] WPFHeaderedContentControl miAspenPropertiesDocument
				[ ] locator "//WPFHeaderedContentControl[@caption='Aspen Properties Document*']"
			[+] WPFHeaderedContentControl miAspenPropertiesBackup
				[ ] locator "//WPFHeaderedContentControl[@caption='Aspen Properties Backup*']"
			[ ] 
			[ ] //Export Menu
			[+] WPFHeaderedContentControl miFile
				[ ] locator "//WPFHeaderedContentControl[@caption='File*']"
			[+] WPFHeaderedContentControl miEOVariables
				[ ] locator "//WPFHeaderedContentControl[@caption='EO Variables*']"
			[+] WPFHeaderedContentControl miAspenPlusDynamicsFlowDriven
				[ ] locator "//WPFHeaderedContentControl[@caption='Aspen Plus Dynamics - Flow Driven*']"
			[+] WPFHeaderedContentControl miAspenPlusDynamicsPressureDriven
				[ ] locator "//WPFHeaderedContentControl[@caption='Aspen Plus Dynamics - Pressure Driven']"
			[+] WPFHeaderedContentControl miCapeOpenPackage
				[ ] locator "//WPFHeaderedContentControl[@caption='CAPE-OPEN Package*']"
				[+] WPFMenuItem       miExportAPR
					[ ] locator "//WPFMenuItem[@caption='Export'][2]"
				[+] WPFMenuItem       miExportEOVariables
					[ ] locator "//WPFMenuItem[@caption='EO Variables{chr(13)}{chr(10)}Export attributes of EO variables to{chr(13)}{chr(10)}x-file or variables file.{chr(13)}{chr(10)}']"
			[ ] 
			[ ] //Share Menu or aspenONE Drive Menu
			[+] WPFButton btnShare
				[ ] locator "//WPFButton[@automationId='UploadButton']"
			[+] WPFLabel txtShareStatus
				[ ] locator "//WPFLabel[@automationId='ShareStatusLabel']"
			[+] WPFButton btnRemove
				[ ] locator "//WPFButton[@automationId='RemoveButton']"
			[ ] 
			[+] WPFMenuItem       miImportEOVar
				[ ] locator "//WPFMenuItem[@caption='*Import attributes of EO variables*'][1]"
			[+] WPFMenuItem miRename
				[ ] locator "//WPFMenuItem[@caption='Re_name*']"
			[+] WPFMenuItem miDelete
				[ ] locator "//WPFMenuItem[@caption='_Delete']"
			[+] WPFMenuItem       miSaveAsAPR
				[ ] locator "//WPFMenuItem[@caption='Save As'][2]"
			[+] WPFMenuItem       miTemp
				[ ] locator "//WPFMenuItem[@caption='Temp']"
				[+] ClickItem(string itemName)
					[ ] RECT r = this.GetRect(false)
					[ ] // calculate the drop down button position
					[ ] integer iX, iY
					[ ] iX = r.xSize-4
					[ ] iY = r.ySize*5/6
					[ ] this.Click(1,iX,iY)
					[+] if(this.plotItemsContrl.Exists(5))
						[ ] window w = this.plotItemsContrl.Find("//WPFTextBlock[@caption='{itemName}']")
						[ ] w.Click()
					[+] else
						[ ] Log.Error("The object '{plotItemsContrl}' didn't be found.")
			[+] WPFItemsControl plotItemsContrl
				[ ] locator "//WPFItemsControl[@className='GalleryToolDropDownPresenter']"
			[+] WPFMenuItem miStreamAnalysis
				[ ] locator "//WPFMenuItem[@caption='Stream Analysis']"
				[+] WPFMenuItem miBubbleAndDew
					[ ] locator "//WPFMenuItem[@caption='Bubble and Dew Point']"
				[+] WPFMenuItem miPVCurve
					[ ] locator "//WPFMenuItem[@caption='PV Curve']"
				[+] WPFMenuItem miTVCurve
					[ ] locator "//WPFMenuItem[@caption='TV Curve']"
				[+] WPFMenuItem miPTEnvelope
					[ ] locator "//WPFMenuItem[@caption='PT?Envelope']"
				[+] WPFMenuItem miPoint
					[ ] locator "//WPFMenuItem[@caption='Point']"
				[+] WPFMenuItem miComponentFlow
					[ ] locator "//WPFMenuItem[@caption='Component Flow']"
				[+] WPFMenuItem miComposition
					[ ] locator "//WPFMenuItem[@caption='Composition']"
				[+] WPFMenuItem miPetroleum
					[ ] locator "//WPFMenuItem[@caption='Petroleum']"
				[+] WPFMenuItem miDistillation
					[ ] locator "//WPFMenuItem[@caption='Distillation']"
				[ ] 
			[+] WPFItemsControl plotMenuGroup
				[ ] // locator "//WPFMenuItem[@className='MenuToolPresenter'][4]"
				[ ] locator "//WPFItemsControl[@className='MenuTool'][4]"
				[+] WPFItemsControl plotItemsContrl
					[ ] locator "//WPFItemsControl[@className='GalleryToolDropDownPresenter']"
					[ ] 
				[+] ClickItem(string itemName)
					[ ] RECT r = this.GetRect(false)
					[ ] // calculate the drop down button position
					[ ] integer iX, iY
					[ ] iX = r.xSize-4
					[ ] iY = r.ySize*5/6
					[ ] this.Click(1,iX,iY)
					[+] if(this.plotItemsContrl.Exists(5))
						[ ] window w = this.plotItemsContrl.Find("//WPFTextBlock[@caption='{itemName}']")
						[ ] w.Click()
					[+] else
						[ ] Log.Error("The object '{this.plotItemsContrl}' didn't be found.")
			[+] WPFMenuItem miCapeOpenExport
				[ ] locator "//WPFMenuItem[@automationId='ExportCapeOpenPackageMenuItem']"
			[+] WPFButtonBase btnCheckResults
				[ ] locator "//WPFButtonBase[@automationId='igRibbon_ButtonTool_74']"
			[ ] 
			[ ] 
			[ ] //Context Menu on Tab
			[+] WPFMenuItem miCloseRC
				[ ] locator "//WPFMenuItem[@caption='Close']"
			[+] WPFMenuItem resultsRC
				[ ] locator "//WPFMenuItem[@caption='_Results...']"
				[ ] 
			[+] WPFMenuItem miAddNew
				[ ] locator "//WPFMenuItem[@automationId='av_MenuItem_1']"
			[+] WPFContextMenu ctmGenTabContextMenu
				[ ] locator "//WPFContextMenu"
				[+] WPFMenuItem miClose
					[ ] locator "WPFMenuItem[1]"
				[+] WPFMenuItem miCloseOther
					[ ] locator "WPFMenuItem[2]"
				[+] WPFMenuItem miFloating
					[ ] locator "WPFMenuItem[3]"
				[+] WPFMenuItem miDockable
					[ ] locator "WPFMenuItem[4]"
				[+] WPFMenuItem miTabbed
					[ ] locator "WPFMenuItem[5]"
				[+] WPFMenuItem miNewHorizontalTabGroup
					[ ] locator "WPFMenuItem[6]"
				[+] WPFMenuItem miNewVeriticalTabGroup
					[ ] locator "WPFMenuItem[7]"
					[ ] 
				[ ] 
			[ ] 
			[ ] 
		[ ] 
		[-] //Tab&Ribbon
			[ ] //Get Started Tab
			[+] WPFTabItem tbGetStarted
				[ ] locator "//WPFTabItem[@automationId='Get_Started']"
			[ ] 
			[ ] //Home tab
			[+] WPFMenuItem	mnuFile_APR
				[ ] locator "//WPFMenuItem[@className='ApplicationMenuPresenter']"
			[+] WPFItemsControl grpRunMode
				[ ] locator "//WPFItemsControl[@automationId='*RunMode']"
				[+] WPFRadioButton btnAnalysis
					[ ] locator "//WPFRadioButton[1]"
				[+] WPFRadioButton btnEstimation
					[ ] locator "//WPFRadioButton[2]"
				[+] WPFRadioButton btnRegression
					[ ] locator "//WPFRadioButton[3]"
			[+] WPFTabItem tbHome
				[ ] locator "//WPFTabItem[@automationId='Home' or @caption='Home']"
			[+] WPFButtonBase Dashboard
				[ ] locator "//WPFButtonBase[@automationId='*buttonExpandOrCollapse']"
			[+] WPFContentControl grpControlPanel
				[ ] locator "//WPFContentControl[@automationId='controlPanelView']"
				[+] WPFButton btnClearMessages
					[ ] locator "//WPFButton[@automationId='btnClearMsg']"
				[+] WPFButton btnCheckStatus
					[ ] locator "//WPFButton[@automationId='btnCheckStatus']"
				[+] WPFButton btnRunSettings
					[ ] locator "//WPFButtonBase[@automationId='igRibbon_btnRunSetting']"
				[+] WPFButtonBase btnRun
					[ ] locator "//WPFButtonBase[@automationId='btnRun']"
				[+] WPFButtonBase btnStep
					[ ] locator "//WPFButtonBase[@automationId='btnStep']"
				[+] WPFButtonBase btnStop
					[ ] locator "//WPFButtonBase[@automationId='btnStop']"
				[+] WPFButtonBase btnReset
					[ ] locator "//WPFButtonBase[@automationId='btnReset']"
					[ ] 
				[+] WPFExpander weShowEOControl
					[ ] locator "//WPFExpander[@automationId='expOptions']"
				[+] WPFTextBox txbCommandLine
					[ ] locator "//WPFTextBox[@automationId='tbCommandLine']"
			[-] WPFItemsControl grpRun
				[ ] locator "//WPFItemsControl[@automationId='GrpRun']"
				[+] WPFContentControl btnRunSettings
					[ ] locator "//WPFButtonBase[1]"
				[+] WPFButtonBase btnRun
					[ ] locator "//WPFButtonBase[@caption='Run' or @automationId='igRibbon:btnRun']"
				[+] WPFButtonBase btnStep
					[ ] locator "//WPFButtonBase[@caption='Step']"
				[+] WPFButtonBase btnStop
					[ ] locator "//WPFButtonBase[@caption='Stop']"
				[+] WPFButtonBase btnReinit
					[ ] locator "//WPFButtonBase[@caption='Reset'  or @automationId='igRibbon:btnReset']"
				[+] WPFButtonBase btnReconcile
					[ ] locator "//WPFButtonBase[@automationId='igRibbon_btnReconcile']"
				[+] WPFButtonBase btnNextInput
					[ ] locator "//WPFButtonBase[@caption='Next']"
					[ ] // locator "//WPFButtonBase[@automationId='igRibbon_ButtonTool_32']"
				[+] WPFButtonBase btnControlPanel
					[ ] locator "//WPFButtonBase[@caption='Control Panel']"
				[ ] 
				[ ] 
				[ ] //Need to Delete This, Not in V8.4
				[+] WPFButtonBase btnCheckResult
					[ ] locator "//WPFButtonBase[6]"
				[+] WPFButtonBase btnPurgeMessage
					[ ] locator "//WPFButtonBase[7]"
				[+] WPFToggleButton ToggleAutoRunOn
					[ ] locator "//WPFButtonBase[8]"
				[+] WPFToggleButton ToggleAutoRunOff
					[ ] locator "//WPFButtonBase[9]"
				[+] WPFButtonBase btnTroubleShoot
					[ ] locator "//WPFButtonBase[11]"
				[+] WPFTextBlock stRun
					[ ] locator "//WPFTextBlock[@caption='Run']"
				[ ] 
			[+] WPFItemsControl grpRunAPR  //Group identifier is different for Aspen Properties   could use an "or" for automation ID?
				[ ] locator "//WPFItemsControl[@automationId='igRibbon_grpRunProp']"
				[+] WPFButtonBase btnRun
					[ ] locator "//WPFButtonBase[@caption='Run']"
				[+] WPFButtonBase btnReinit
					[ ] locator "//WPFButtonBase[@caption='Reset']"
				[+] WPFButtonBase btnCheckResults
					[ ] locator "//WPFButtonBase[4]"
				[+] WPFButtonBase btnPurgeMessages
					[ ] locator "//WPFButtonBase[5]"
				[+] WPFButtonBase btnTroubleShoot
					[ ] locator "//WPFButtonBase[6]"
				[+] WPFButtonBase btnNext
					[ ] locator "//WPFButtonBase[@caption='Next']"
				[+] WPFButtonBase btnControlPanel
					[ ] locator "//WPFButtonBase[@caption='Control Panel']"
				[+] WPFButtonBase btnRunSettings
					[ ] locator "//WPFButtonBase[1]"
			[+] WPFContentControl grpSummary
				[ ] locator "//WPFContentControl[(@name='PART_RibbonGroupSite' and @caption='Summary')]"
				[+] WPFButtonBase btnModelSummary
					[ ] locator "//WPFButtonBase[1]"
				[+] WPFButtonBase btnUtilityCost
					[ ] locator "//WPFButtonBase[2]"
				[+] WPFButtonBase btnInput
					[ ] locator "//WPFButtonBase[3]"
				[+] WPFButtonBase btnHistory
					[ ] locator "//WPFButtonBase[4]"
				[+] WPFButtonBase btnReport
					[ ] locator "//WPFButtonBase[5]"
				[+] WPFItemsControl StreamSummary
					[ ] locator "//WPFItemsControl[1]"
				[+] WPFTextBlock stSummary
					[ ] locator "//WPFTextBlock[@caption='Summary']"
			[+] WPFButtonBase btnMethodsAssistantRibbon
				[ ] locator "//WPFButtonBase[@automationId='igRibbon_btnProperties_Methods']"
			[+] WPFButtonBase btnBinary
				[ ] locator "//WPFButtonBase[@caption='Binary']"
			[+] WPFButtonBase btnResidueCurves
				[ ] locator "//WPFButtonBase[@caption='Residue Curves']"
				[ ] 
				[ ] 
			[+] WPFContentControl grpAnalysis
				[ ] locator "//WPFItemsControl[@automationId='igRibbon_grpAnalysis']"
				[+] WPFToggleButton btnDashBoard
					[ ] locator "//WPFToggleButton[@automationId='dashboard']"
				[+] WPFMenuItem miStreamAnalysis
					[ ] locator "//WPFMenuItem[@caption='Stream Analysis']"
				[+] WPFButtonBase btnSensitivity
					[ ] locator "//WPFTextBlock[@caption='Sensitivity']"
				[+] WPFButtonBase btnDataFit
					[ ] locator "//WPFTextBlock[@caption='Data Fit']"
				[+] WPFButtonBase btnHeatExchanger
					[ ] locator "//WPFButtonBase[@automationId='igRibbon_btnAnalysisHeatX']"
				[+] WPFButtonBase btnFlareSystem
					[ ] locator "//WPFTextBlock[@caption='Flare System']"
				[+] WPFButtonBase btnPressureRelief
					[ ] locator "//WPFTextBlock[@caption='Pressure Relief']"
				[+] WPFButtonBase btnAzeotropeSearch
					[ ] locator "//WPFTextBlock[@caption='Azeotrope Search']"
				[+] WPFButtonBase btnDistillationSynthesis
					[ ] locator "//WPFTextBlock[@caption='Distillation Synthesis']"
				[+] WPFToggleButton btnActivatedAnalysis
					[ ] locator "//WPFToggleButton[@automationId='dashboard' or @automationId='igRibbon:btnActivatedAnalysis']"
			[+] WPFContentControl grpPropertitesAnalysis
				[ ] locator "//WPFContentControl[(@automationId='PART_RibbonGroupButton' and @caption='Analysis')]"
				[+] WPFControl AnalysisExpander
					[ ] locator "//WPFControl[@name='Caption']"
					[+] WPFControl btnExpand
						[ ] locator "//WPFControl[@name='largeCaptionGlyph']"
			[+] WPFButtonBase btnPure
				[ ] // locator "//WPFButtonBase[@caption='Pure']"
				[ ] locator "//WPFTextBlock[@caption='Pure']"
			[+] WPFButtonBase btnReconcile
				[ ]  locator "//WPFButtonBase[@automationId='igRibbon_btnReconcile']"
			[+] WPFMenuItem miCopy
				[ ] locator "//WPFMenuItem[@caption='Copy'][1]"
			[+] WPFContentControl grpAnalysisAPR
				[ ] locator "//WPFContentControl[(@name='PART_RibbonGroupSite' and @caption='Analysis')]"
				[+] WPFButtonBase btnPure
					[ ] locator "//WPFButtonBase[1]"
				[+] WPFButtonBase btnBinary
					[ ] locator "//WPFButtonBase[2]"
				[+] WPFButtonBase btnTernaryMap
					[ ] locator "//WPFButtonBase[3]"
				[+] WPFButtonBase btnResidueCurves
					[ ] locator "//WPFButtonBase[4]"
				[+] WPFButtonBase btnPTEnvelope
					[ ] locator "//WPFButtonBase[5]"
					[ ] 
				[ ] 
			[+] WPFItemsControl grpPlot
				[ ] locator "//WPFItemsControl[@automationId='igRibbon_RibbonGroup_1']"
				[+] WPFMenuItem miPerformance
					[ ] locator "Performance"
			[+] WPFItemsControl grpPropertyPlot
				[ ] locator "//WPFItemsControl[@className='MenuTool'][5]"
				[+] WPFItemsControl grpPlots
					[ ] locator "//WPFItemsControl[@className='GalleryToolDropDownPresenter']"
					[+] WPFTextBlock PXY
						[ ] locator "//WPFTextBlock[@caption='P-xy']"
				[+] WPFMenuItem miPropT
					[ ] locator "//WPFMenuItem[@caption='Prop. vs T'][1]"
			[+] WPFContentControl grpDataSources
				[ ] locator "//WPFContentControl[@caption='Data Source']"
				[+] WPFButtonBase btnNist
					[ ] locator "//WPFButtonBase[1]"
				[+] WPFButtonBase btnDechema
					[ ] locator "//WPFButtonBase[2]"
				[ ] 
			[+] WPFContentControl grpUnits
				[ ] locator "//WPFContentControl[@caption='Units']"
				[+] wcAPWPFComboBox cboUnits
					[ ] locator "@automationId='igRibbon_comboUnits'"
					[+] string ChangeUnit(string Unit)
						[ ] this.Click()
						[ ] string sRet = this.Find("//WPFComboBox[1]").SelectedItemText
						[ ] this.Find("//WPFComboBoxItem[@caption='{Unit}']").Select()
						[ ] this.Find("//WPFComboBox[1]").Close()
						[ ] return sRet
				[+] WPFButtonBase btnUnitSets
					[ ] locator "//WPFTextBlock[@caption='Unit Sets']"
				[ ] 
			[+] WPFItemsControl grpClipboard
				[ ] locator "//WPFItemsControl[@automationId='grpClipboard']"
				[+] WPFMenu btnCopy
					[ ] locator "WPFMenu[@className='MenuToolMenu']"
					[+] WPFMenuItem btnCopySpecial
						[ ] locator "//WPFMenuItem[@caption='Copy Special']"
					[+] Select(string sItem)
						[ ] RECT rect=this.GetRect()
						[+] switch (sItem)
							[+] case "Copy Special"
								[ ] this.Click(1,rect.xSize-3,rect.ySize-3)
								[ ] APlus.grpClipboard.btnCopy.btnCopySpecial.Select()
				[+] WPFButtonBase btnPaste
					[ ] locator "//WPFButtonBase[@automationId='igRibbon_btnPaste']"
			[+] WPFButtonBase btnPresRelief
				[ ] locator "//WPFButtonBase[@automationId='igRibbon_btnPresRelief']"
			[+] WPFControl	btnResultsCurve
				[ ] locator "//WPFControl[@caption='Plots the variables you select.']"
			[+] WPFControl 	btnParticleSizeDistribution
				[ ] locator "//WPFControl[@className='GalleryItemPresenter']"
			[+] WPFControl	btnSeparationEfficiency
				[ ] locator "//WPFControl[@caption='Separation Efficiency']"
			[+] WPFControl	btnCustom
				[ ] locator "//WPFControl[@caption='Plot any variable(s) against any other variable you choose.']"
			[+] WPFControl	btnComposition
				[ ] locator "//WPFControl[@caption='Gas composition for selected components vs. length.']"
			[+] WPFContentControl grpSafetyAnalysis
				[ ] locator "//WPFItemsControl[@className='RibbonGroup'][6]"
				[+] WPFButtonBase	btnFlareSystem
					[ ] locator "//WPFButtonBase[@automationId='igRibbon_btnFlareSystem']"
			[+] WPFMenuItem	muiResultsCurve
				[ ] locator "//WPFMenuItem[@caption='Results Curve']"
			[ ] 
			[ ] //Energy Analysis
			[+] WPFButtonBase	btnDetails
				[ ] locator "//WPFButtonBase[@caption='Details']"
			[ ] 
			[ ] //Economics tab
			[+] WPFTabItem tbEconomics
				[ ] locator "//WPFTabItem[@automationId='Economics']"
			[ ] 
			[ ] //Modify tab
			[+] WPFTabItem tbModify
				[ ] locator "//WPFTabItem[@automationId='Build']"
			[+] WPFMenuItem miDisplayOptions
				[ ] // locator "//WPFMenuItem[@caption='﻿']"
				[ ] locator "//WPFMenuItem[@caption='Display Options_']"
				[ ] 
			[+] WPFMenuItem miGlobalData
				[ ] locator  "//WPFMenuItem[@automationId='GlobalData']"
			[+] // WPFButtonBase btnFindObject
				[ ] // locator "//WPFButtonBase[@caption='Find*']"
			[+] WPFButtonBase btnMoveSelection
				[ ] locator "//WPFButtonBase[@automationId='igRibbon_ButtonTool_16']"
			[+] WPFItemsControl grpHierarchy
				[ ] locator "//WPFItemsControl[@automationId='igRibbon_RibbonGroup_3']"
				[+] WPFButtonBase btnViewParent
					[ ] locator "//WPFButtonBase[1]"
				[+] WPFButtonBase btnViewChild
					[ ] locator "//WPFButtonBase[2]"
				[+] WPFButtonBase btnImport
					[ ] locator "//WPFButtonBase[3]"
				[+] WPFButtonBase btnExport
					[ ] locator "//WPFButtonBase[4]"
				[+] WPFButtonBase btnMoveSelection
					[ ] locator "//WPFButtonBase[5]"
					[ ] 
					[ ] 
				[ ] 
			[ ] 
			[ ] 
			[ ] //Equation Oriented tab
			[+] WPFTabItem tbEquationOriented
				[ ] locator "//WPFTabItem[@automationId='Equation_Oriented']"
			[+] WPFItemsControl grpRunControls
				[ ] locator "//WPFItemsControl[@automationId='RunControls']"
				[+] wcAPWPFComboBox cboSolutionMethod
					[ ] locator "//WPFControl[@automationId='comboSolutionMethod']"
					[+] WPFComboBoxItem cboiSequentialModular
						[ ] locator "//WPFComboBoxItem[@caption='Sequential Modular']"
					[+] WPFComboBoxItem cboiEquationOriented
						[ ] locator "//WPFComboBoxItem[@caption='Equation Oriented']"
					[+] WPFComboBoxItem cboiMixedMode
						[ ] locator "//WPFComboBoxItem[@caption='Mixed Mode']"
					[ ] 
					[+] ChangeMethod(string sMethod)
						[ ] // Change the Run Control Method
						[ ] //   Arguments
						[ ] //   1.  sMethod , string, name of method - SM = 'Sequential Modular', EO = 'Equation Oriented', MM = 'Mixed Mode'
						[ ] //   Usage:  APlus.grpRunControls.cboSolutionMethod.ChangeMethod("MM")
						[ ] this.Click()
						[ ] sleep(1)
						[+] switch(upper(sMethod))
							[+] case "SM"
								[ ] this.cboiSequentialModular.Click()
							[+] case "EO"
								[ ] this.cboiEquationOriented.Click()
							[+] case "MM"
								[ ] this.cboiMixedMode.Click()
						[ ] sleep(2)
						[ ] //AP.cboRunControlMethod.Click()
						[ ] 
					[ ] 
				[+] wcAPWPFComboBox cboObjFunction
					[ ] locator "//WPFControl[@automationId='comboObjFunction']"
					[+] WPFComboBoxItem cboiPROFIT
						[ ] locator "//WPFComboBoxItem[@caption='PROFIT']"
						[ ] 
					[+] WPFComboBoxItem cboiRECERR
						[ ] locator "//WPFComboBoxItem[@caption='RECERR']"
						[ ] 
					[+] WPFComboBoxItem cboiNONE
						[ ] locator "//WPFComboBoxItem[@caption='<None>']"
					[+] WPFComboBoxItem cboiC2HIERProfit
						[ ] locator "//WPFComboBoxItem[@caption='C2HIER.PROFIT']"
						[ ] 
					[+] ChangeValue(string sFunc)
						[ ] // Change the Object  Function
						[ ] //   Arguments
						[ ] //   1.  sFunc , string, name of function
						[ ] //   Usage:  AP.cboObjFunction.ChangeVallue("PROFIT")
						[ ] this.Click()
						[ ] sleep(1)
						[ ] APlus.find("//WPFComboBoxItem[@caption='{sFunc}']").Click()
					[ ] 
				[+] wcAPWPFComboBox cboScope
					[ ] locator "//WPFControl[@automationId='comboScope']"
					[+] WPFComboBoxItem cboiPlant
						[ ] locator "//WPFComboBoxItem[@caption='Plant']"
					[+] WPFComboBoxItem cboiC2HIER
						[ ] locator "//WPFComboBoxItem[@caption='C2HIER']"
					[+] changeScope(string Scope )
						[ ] this.Click()
						[ ] sleep(1)
						[+] switch(lower(Scope))
							[+] case "plant"
								[ ] this.cboiPlant.click()
							[+] case "c2hier"
								[ ] this.cboiC2HIER.click()
							[ ] 
							[+] default 
								[ ] Log.Error("Specified Scope Not Recognized!")
				[+] wcAPWPFComboBox cboRunMode
					[ ] locator "//WPFControl[@automationId='comboRunMode']"
					[+] WPFComboBoxItem cboiSimulation
						[ ] locator "//WPFComboBoxItem[@caption='Simulation']"
					[+] WPFComboBoxItem cboiParameterEstimation
						[ ] locator "//WPFComboBoxItem[@caption='Parameter Estimation']"
					[+] WPFComboBoxItem cboiReconciliation
						[ ] locator "//WPFComboBoxItem[@caption='Reconciliation']"
					[+] WPFComboBoxItem cboiOptimization
						[ ] locator "//WPFComboBoxItem[@caption='Optimization']"
					[+] changeRunMode(string runMode )
						[+] switch(lower(runMode ))
							[ ] this.Click()
							[ ] sleep(1)
							[+] case "simulation"
								[ ] this.cboiSimulation.click()
							[+] case "parameter estimation"
								[ ] this.cboiParameterEstimation.click()
							[+] case "optimization"
								[ ] this.cboiOptimization.click()
							[+] case "reconciliation"
								[ ] this.cboiReconciliatiion.click()
							[+] default 
								[ ] Log.Error("Specified Run Mode Not Recognized!")
							[ ] sleep(1)
					[ ] 
				[+] WPFContentControl btnRunSettings
					[ ] locator "//WPFContentControl[@name='DialogBoxLauncher']"
				[ ] 
			[+] WPFItemsControl grpVariables
				[ ] locator "//WPFItemsControl[@automationId='igRibbon_RibbonGroup_21']"
				[+] WPFButtonBase btnExportVariables
					[ ] locator "//WPFButtonBase[@caption='Export Variables']"
					[ ] 
				[+] WPFButtonBase btnEOVariables
					[ ] locator "//WPFButtonBase[@caption='EO Variables']"
				[ ] 
				[ ] 
			[+] WPFItemsControl grpEOConfiguration
				[ ] locator "//WPFItemsControl[@automationId='igRibbon_RibbonGroup_20']"
				[+] WPFButtonBase	btnSpecGroups
					[ ] locator "//WPFButtonBase[@caption='Spec Groups']"
				[+] WPFButtonBase	btnEOInput
					[ ] locator "//WPFButtonBase[@caption='EO Input']"
				[+] WPFButtonBase	btnObjective
					[ ] locator "//WPFButtonBase[@caption='Objective']"
				[ ] 
			[ ] 
			[+] AnyWin	tpgSpecGroups
				[+] wcAPWPFComboBox cboSpecificationGroup
					[ ] locator "//WPFControl[@name='advSpecGroup']"
				[+] WPFButton		btnAddVariables
					[ ] locator "//WPFButton[@automationId='PART_browse']"
				[+] wcAPDataGrid dgVars
					[ ]  locator "//WPFControl[@automationId='PART_DataGrid'][2]"
				[ ] 
			[+] AnyWin	tpgObjective
				[+] WPFButton	btnAdd
					[ ] locator "//WPFButton[@caption='Add...']"
			[ ] 
			[+] WPFListBox	lbxFilter
				[ ] locator "//WPFListBox[@automationId='theListBox']"
			[+] WPFButton	btnCopyFromEORun
				[ ] locator "//WPFButton[@caption='Copy from EO Run']"
			[ ] 
			[ ] //View tab
			[+] WPFTabItem tbView
				[ ] locator "//WPFTabItem[@automationId='View']"
			[+] WPFItemsControl grpZoom
				[ ] locator "//WPFItemsControl[@automationId='igRibbon_RibbonGroup_24']"
				[+] WPFButtonBase btnZoom
					[ ] locator "//WPFButtonBase[1]"
				[+] WPFButtonBase btnZoomIn
					[ ] locator "//WPFButtonBase[2]"
				[+] WPFButtonBase btnZoomOut
					[ ] locator "//WPFButtonBase[3]"
				[+] WPFButtonBase btnZoomToFit
					[ ] locator "//WPFButtonBase[4]"
			[+] WPFItemsControl grpShow
				[ ] locator "//WPFItemsControl[@automationId='igRibbon_RibbonGroup_26']"
				[+] WPFButtonBase btnPageBreaks
					[ ] locator "//WPFButtonBase[1]"
				[+] WPFButtonBase btnResetPageBreaks
					[ ] locator "//WPFButtonBase[2]"
				[+] WPFButtonBase btnFlowsheet
					[ ] locator "//WPFButtonBase[3]"
				[+] WPFToggleButton btnModelPalette
					[ ] locator "//WPFToggleButton[1]"
				[+] WPFToggleButton btnMessagePanel
					[ ] locator "//WPFToggleButton[2]"
				[+] WPFButtonBase btnStartPage
					[ ] locator "//WPFButtonBase[4]"
					[ ] 
					[ ] 
			[+] WPFItemsControl grpLayout
				[ ] locator "//WPFItemsControl[@className='RibbonGroup'][5]"
				[+] WPFMenuItem	miSwitchLayout
					[ ] locator "//WPFMenuItem[@caption='Switch Layout']"
			[+] WPFButtonBase btnFindObject 
				[ ] locator "//WPFButtonBase[@automationId='ButtonTool_FindObject']"
			[ ] 
			[ ] //Customize tab
			[+] WPFTabItem tbCustomize
				[ ] locator "//WPFTabItem[@automationId='Developer']"
			[+] WPFContentControl grpSettings
				[ ] locator "//WPFContentControl[(@name='PART_RibbonGroupSite' and @caption='Settings')]"
				[+] WPFButtonBase btnOptions
					[ ] locator "//WPFTextBlock[@caption='Options']"
				[+] WPFButtonBase btnVariableExplorer
					[ ] locator "//WPFTextBlock[@caption='Variable Explorer']"
				[ ] 
			[+] WPFContentControl grpManageLibraries
				[ ] locator "//WPFContentControl[@caption='Model Library']"
				[+] WPFButtonBase btnModelLibraries
					[ ] locator "//WPFTextBlock[@caption='Manage Libraries']"
				[+] WPFButtonBase btnPaletteCategories
					[ ] locator "//WPFTextBlock[@caption='Palette Categories']"
				[+] WPFButtonBase btnAddSelected
					[ ] locator "//WPFTextBlock[@caption='Add Selected']"
				[+] WPFButtonBase btnAddEntireCase
					[ ] locator "//WPFTextBlock[@caption='Add Entire Case']"
			[ ] 
			[ ] //Format Tab
			[+] WPFTabItem tbFormat
				[ ] locator "//WPFTabItem[@automationId='Plot' or @caption='Format']"
			[+] wcAPWPFComboBox	cboScale
				[ ] locator "//WPFControl[@automationId='AxisScaleCombo']"
			[ ] 
			[ ] //DashboardScreen
			[+] WPFContentControl DashboardScreen
				[ ] // locator "//WPFContentControl[@className='DashboardScreen']"
				[ ] locator "//WPFHeaderedContentControl[@automationId='_AnonymousScreen1']"
			[ ] 
			[ ] //Resources Tab
			[+] WPFButtonBase btnExamples
				[ ] locator "//WPFButtonBase[@automationId='buttonViewExamples_APlus']"
			[+] WPFButtonBase	btnHelp
				[ ] locator "//WPFButtonBase[@automationId='btnHelp']"
			[+] WPFButtonBase	btnWhatIsNew
				[ ] locator "//WPFButtonBase[@automationId='buttonWhatsNew_APlus']"
			[+] WPFButtonBase	btnSupportCenter
				[ ] locator "//WPFButtonBase[@automationId='buttonSupportCenter_APlus']"
			[+] WPFTabItem	tbSupport
				[ ] locator "//WPFTabItem[@caption='AspenTech Support AspenTech Support']"
			[+] WPFButtonBase	btnTrainning
				[ ] locator "//WPFButtonBase[@caption='Training']"
			[+] WPFTabItem	tbExchange
				[ ] locator "//WPFTabItem[@caption='Exchange Exchange']"
			[+] WPFButtonBase	btnLiveChat
				[ ] locator "//WPFButtonBase[@automationId='buttonLiveChat_APlus']"
			[+] WPFTabItem	tbLiveChat
				[ ] locator "//WPFTabItem[@caption='Live Chat Live Chat']"
			[+] WPFButtonBase	btnCommunity
				[ ] locator "//WPFButtonBase[@automationId='buttonAskCommunity_APlus']"
			[ ] 
			[ ] //Plot Tab
			[+] WPFMenuItem miMergePlot
				[ ] locator "//WPFMenuItem[@caption='Merge Plot']"
				[+] void MergePlot(string sPlotName)
					[ ] this.TextClick("Merge")
					[ ] this.Find("//WPFMenuItem[@caption='{sPlotName}']").Click()
					[ ] sleep(10)
					[ ] glWaitForMouseIdle(120)
					[ ] sleep(10)
			[+] WPFButtonBase btnPlotDataSelect
				[ ] locator "//WPFButtonBase[@caption='Select']"
			[ ] 
			[ ] //Design Tab
			[+] WPFTabItem tbDesign
				[ ] locator "//WPFTabItem[@automationId='Design']"
			[+] WPFToggleButton	BtnDropDown
				[ ] locator "//WPFToggleButton[@automationId='DropDownButton']"
			[+] WPFComboBox	cboPlotType
				[ ] locator "//WPFComboBox[@automationId='PART_FocusSite']"
			[ ] 
			[ ] 
			[ ] //Exchanger Design Tab
			[+] WPFToggleButton	btnConnectionStatus
				[ ] locator "//WPFToggleButton[@automationId='igRibbon:ToggleButtonTool_ConnectionStatusButton']"
			[-] WPFButtonBase	btnRunEDR
				[ ] locator "//WPFButtonBase[@automationId='igRibbon:ButtonTool_RUN']"
			[+] WPFButtonBase	btnRunStatus
				[ ] locator "//WPFButtonBase[@automationId='igRibbon:ButtonTool_RunStatus']"
		[ ] 
		[-] //NavTree
			[+] WPFContextMenu ctmNavTree
				[ ] locator "//WPFContextMenu"
				[+] WPFMenuItem miNew
					[ ] locator "//WPFMenuItem[@caption='_New...']"
			[+] WPFControl cboViewType
				[ ] locator "//WPFControl[@automationId='Part_Filter']"
			[+] WPFControl ViewFilter
				[ ] locator "//WPFControl[@automationId='Part_Filter']"
				[+] WPFComboBox cboFilter
					[ ] locator "//WPFComboBox[@automationId='PART_FocusSite']"
					[+] WPFComboBoxItem InputOnly
						[ ] locator "//WPFComboBoxItem[@caption='Input Only']"
					[+] WPFComboBoxItem ResultsOnly
						[ ] locator "//WPFComboBoxItem[@caption='Results Only']"
					[+] WPFComboBoxItem AllItems
						[ ] locator "//WPFComboBoxItem[@caption='All Items']"
				[+] void SelectFilter(string sFilter)
					[ ] this.Click()
					[ ] this.cboFilter.Select(sFilter)
					[ ] sleep(1)
				[ ] 
			[+] WPFTreeViewItem trviData
				[ ] locator "//WPFTreeView[@automationId='Part_Tree']/WPFTreeViewItem[@caption='Data']"
			[-] myWPFTreeView trvPartTree
				[ ] locator "//WPFControl[@className='ApwnFlowsheetNavigatorView']//WPFTreeView[@automationId='Part_Tree']"
				[+] void Click(string sItem,integer iClickType optional)
					[ ] integer i
					[ ] window trvItem
					[ ] // 
					[ ] // this.Select(sItem)
					[+] if iClickType==null
						[ ] iClickType=1
					[ ] 
					[ ] list of string lstr = glCastStrToList(sItem, "/")
					[ ] trvItem = this.Find("//WPFTreeViewItem[@caption='{lstr[1]}']")
					[+] for (i=2; i<=ListCount(lstr); i++)
						[ ] 
						[ ] trvItem = trvItem.Find("//WPFTreeViewItem[@caption='{lstr[i]}']")
					[ ] trvItem.SetFocus()
					[ ] trvItem.Select()
					[ ] RECT rect = trvItem.GetRect()
					[+] while(rect.xPos<0)
						[+] for(i=1; i<1500; i+=75)
							[ ] this.ScrollToPosition(i,O_VERTICAL)
						[+] if(rect.xPos<0)
							[ ] Log.Error("Can't make the item {sItem} viewable.")
							[ ] break
					[ ] trvItem.Click(iClickType, rect.xSize/2, rect.ySize/2)
					[+] if iClickType==2
						[ ] APlus.trvPartTree.TypeKeys("<ESC>")
						[ ] sleep(0.8)
						[ ] APlus.trvPartTree.TypeKeys("<Application>")
				[+] void CollapseAll()
					[ ] list of WINDOW lwTree
					[ ] list of STRING lsView,lsTree
					[ ] int iList,i,iSt,iEnd,j,iExit,iViewEnd
					[ ] string sView,sTree
					[ ] window w,wTree
					[ ] boolean bTable=true
					[ ] iExit=0
					[ ] APlus.cboPartTree.Select("Results Only")
					[ ] APlus.cboPartTree.Select("All Items")
					[ ] 
					[+] lsTree=<text>
						[ ] Setup
						[ ] Property Sets
						[ ] Analysis
						[ ] Flowsheet
						[ ] Streams
						[ ] Blocks
						[ ] Utilities
						[ ] Reactions
						[ ] Convergence
						[ ] Flowsheeting Options
						[ ] Model Analysis Tools
						[ ] EO Configuration
						[ ] Results Summary
						[ ] Dynamic Configuration
					[ ] iList=ListCount(lsTree)
					[ ] //deal with the sub-menuitems between each major menuitems
					[+] for (i=2;i<=(iList);i++)
						[ ] iSt=listfind(lsView,lsTree[i-1])
						[ ] iEnd=listfind(lsView,lsTree[i])
						[+] // if iExit==2 //test
							[ ] // listprint(lsView)
							[ ] // print("lsTree-----------------------")
							[ ] // listprint(lsTree)
							[ ] // goto End
						[+] if iSt==0||iEnd==0
							[ ] // iExit++ //test
							[ ] i--
							[ ] sView=APlus.trvPartTree.TextCapture()
							[ ] lsView=stringToTable(sView,true)
							[ ] continue
						[ ] // iExit=0 //test
						[+] if iEnd-1>iSt
							[+] for (j=iEnd-1;j>=iSt;j--)
								[ ] w=FindWPFTreeViewItem("//WPFTreeViewItem[@caption='{lsView[j]}']")
								[+] if w.Exists()
									[+] if w.GetCaption()!=""
										[ ] w.Collapse()
						[ ] 
					[ ] //deal with the end of the treeview
					[ ] sView=APlus.trvPartTree.TextCapture()
					[ ] lsView=stringToTable(sView,true)
					[ ] iSt=listfind(lsView,lsTree[iList])
					[ ] iEnd=Listcount(lsView)
					[+] if iSt<iEnd
						[+] for (j=iEnd-1;j>=iSt;j--)
							[ ] w=FindWPFTreeViewItem("//WPFTreeViewItem[@caption='{lsView[j]}']")
							[+] if w.Exists()
								[+] if w.GetCaption()!=""
									[ ] w.Collapse()
						[ ] 
					[ ] 
				[+] void RightClickSelect(string sTreeViewPath, string sMenuItem)
					[ ] APlus.LoadForm(sTreeViewPath)
					[ ] list of string lsFormName = glCastStrToList(sTreeViewPath,".")
					[ ] window wItem = APlus.Find("//WPFTreeViewItem[@caption='{lsFormName[ListCount(lsFormName)]}']")
					[ ] RECT rect = wItem.RECT
					[ ] wItem.OpenContextSelect  (rect.xSize/2, rect.ySize/2, sMenuItem)
				[ ] 
				[ ] 
			[+] WPFTreeViewItem trviBlocks
				[ ] locator "//WPFTreeViewItem[@caption='Blocks']"
				[+] WPFTreeViewItem trviB1
					[ ] locator "//WPFTreeViewItem[@caption='B1']"
					[+] WPFTreeViewItem trviFlowSheet
						[ ] locator "//WPFTreeViewItem[@caption='FlowSheet']"
						[+] WPFTreeViewItem trviSection
							[ ] locator "//WPFTreeViewItem[@caption='Section']"
							[+] WPFTreeViewItem trviGLOBAL
								[ ] locator "//WPFTreeViewItem[@caption='GLOBAL']"
					[+] WPFTreeViewItem trviBlocks
						[ ] locator "//WPFTreeViewItem[@caption='Blocks']"
						[+] WPFTreeViewItem trviB1
							[ ] locator "//WPFTreeViewItem[@caption='B1']"
							[+] WPFTreeViewItem trviSetup
								[ ] locator "//WPFTreeViewItem[@caption='Setup']"
						[+] WPFTreeViewItem trviB2
							[ ] locator "//WPFTreeViewItem[@caption='B2']"
							[+] WPFTreeViewItem trviSetup
								[ ] locator "//WPFTreeViewItem[@caption='Setup']"
							[+] WPFTreeViewItem trviCondenserHCurves
								[ ] locator "//WPFTreeViewItem[@caption='Condenser HCurves']"
							[+] WPFTreeViewItem trviReport
								[ ] locator "//WPFTreeViewItem[@caption='Report']"
								[ ] 
								[ ] 
							[ ] 
						[ ] 
					[ ] 
			[+] wcAPWPFComboBox cboPartTree
				[ ] locator "//WPFControl[@automationId='Part_Filter']"
			[ ] 
			[+] WPFTreeViewItem trvBlockResults
				[ ] locator "//WPFTreeViewItem[@caption='Results']"
			[+] WPFTreeViewItem trviB1
				[ ] locator "//WPFTreeViewItem[@caption='B1']"
				[+] WPFTreeViewItem trviFlowSheet
					[ ] locator "//WPFTreeViewItem[@caption='FlowSheet']"
					[+] WPFTreeViewItem trviSection
						[ ] locator "//WPFTreeViewItem[@caption='Section']"
						[+] WPFTreeViewItem trviGLOBAL
							[ ] locator "//WPFTreeViewItem[@caption='GLOBAL']"
						[ ] 
			[+] WPFTreeViewItem trviB2
				[ ] locator "//WPFTreeViewItem[@caption='B2']"
			[+] WPFTreeViewItem trviB6
				[ ] locator "//WPFTreeViewItem[@caption='B6']"
			[+] WPFTreeViewItem trviBLK1
				[ ] locator "//WPFTreeViewItem[@caption='BLK1']"
			[+] WPFTreeViewItem trviAnalysis
				[ ] locator "//WPFTreeViewItem[@caption='Analysis'][2]"
			[ ] 
			[+] WPFTreeViewItem trviStreams
				[ ] locator "//WPFTreeViewItem[@caption='Streams']"
			[+] WPFTreeViewItem trviS1
				[ ] locator "//WPFTreeViewItem[@caption='*1']"
			[+] WPFTreeViewItem trviS2
				[ ] locator "//WPFTreeViewItem[@caption='*2']"
			[+] WPFTreeViewItem trviS3
				[ ] locator "//WPFTreeViewItem[@caption='*3']"
			[+] WPFTreeViewItem trviS4
				[ ] locator "//WPFTreeViewItem[@caption='*4']"
			[+] WPFTreeViewItem trviStreams1
				[ ] locator "//WPFTreeViewItem[@caption='Streams' or @caption='Streams'][1]"
			[+] WPFTreeViewItem trviStreams2
				[ ] locator "//WPFTreeViewItem[@caption='Streams'][2]"
			[ ] 
			[ ] 
			[+] WPFTreeViewItem trviFlowsheet
				[ ] locator "//WPFTreeViewItem[@caption='Flowsheet' or @caption='Flowsheet'][1]"
				[+] WPFTreeViewItem trviSection
					[ ] locator "//WPFTreeViewItem[@caption='Section']"
					[+] WPFTreeViewItem trviGLOBAL
						[ ] locator "//WPFTreeViewItem[@caption='GLOBAL']"
					[ ] 
			[ ] 
			[+] WPFTreeViewItem trviSetUp
				[ ] locator "//WPFTreeViewItem[@caption='Setup' or @caption='Setup'][1]"
				[+] WPFTreeViewItem trviReportOptions
					[ ] locator "//WPFTreeViewItem[@caption='Report Options']"
				[+] WPFTreeViewItem trviSpecifications
					[ ] locator "//WPFTreeViewItem[@caption='Specifications']"
					[ ] 
			[+] WPFTreeViewItem trviSpecifications
				[ ] locator "//WPFTreeViewItem[@caption='Specifications']"
				[ ] 
			[ ] 
			[ ] 
			[+] WPFTreeViewItem trviMethods
				[ ] locator "//WPFTreeViewItem[@caption='Methods']"
			[ ] 
			[+] WPFTreeViewItem trviComponents
				[ ] locator "//WPFTreeViewItem[@caption='Components']"
				[+] WPFTreeViewItem trviSpecifications
					[ ] locator "//WPFTreeViewItem[@caption='Specifications']"
					[ ] 
				[ ] 
			[ ] 
			[ ] 
			[+] WPFTreeViewItem trviResultsSummary
				[ ] locator "//WPFTreeViewItem[@caption='Results Summary']"
			[+] WPFTreeViewItem trviCustomStream
				[ ] locator "//WPFTreeViewItem[@caption='Streams (Custom)']"
			[ ] 
			[ ] //EO Configuration
			[+] WPFTreeViewItem trviEOVariables
				[ ] locator "//WPFTreeViewItem[@caption='EO Variables']"
				[ ] 
				[ ] 
			[+] WPFTreeViewItem trviEOModeling
				[ ] locator "//WPFTreeViewItem[@caption='EO Modeling']"
			[ ] 
			[ ] 
			[+] WPFHeaderedContentControl hccProperties
				[ ] locator "//WPFItemsControl[@name='PART_NavigationArea']//WPFHeaderedContentControl[@caption='Properties']"
			[+] WPFHeaderedContentControl hccSimulation
				[ ] locator "//WPFHeaderedContentControl[@caption='Simulation']"
			[+] WPFHeaderedContentControl hccEnergyAnalysis
				[ ] locator "//WPFHeaderedContentControl[@caption='Energy Analysis']"
			[+] WPFHeaderedContentControl hccSafetyAnalysis
				[ ] locator "//WPFHeaderedContentControl[@caption='Safety Analysis']"
			[ ] 
			[+] WPFItemsControl grpModeArea
				[ ] locator "//WPFItemsControl[@name='PART_NavigationArea']"
				[+] WPFHeaderedContentControl hccProperties
					[ ] locator "//WPFHeaderedContentControl[@caption='Properties']"
				[+] WPFHeaderedContentControl hccSimulation
					[ ] locator "//WPFHeaderedContentControl[@caption='Simulation']"
				[+] WPFHeaderedContentControl hccEnergyAnalysis
					[ ] locator "//WPFHeaderedContentControl[@caption='Energy Analysis']"
				[+] WPFHeaderedContentControl hccSafetyAnalysis
					[ ] locator "//WPFHeaderedContentControl[@caption='Safety Analysis']"
			[ ] 
			[+] WPFTreeViewItem trviPureComponents
				[ ] locator "//WPFTreeViewItem[@caption='Pure Components']"
			[ ] 
		[ ] 
		[ ] 
		[-] //Pages
			[ ] //Simulation-->Setup-->Solids
			[ ] wcSimulationSetupSolids pgSimulationSetupSolids
			[ ] wcSimulationSetupSolids_SA pgSimulationSetupSolids_SA
			[ ] wcSimulationStreamsWETCOAL_Input pgSimulationStreamsWETCOAL_Input
			[ ] 
			[ ] //Analysis-->Analysis-->Input
			[+] WPFGroupBox grpElectrolytesCalculationOptions
				[ ] locator "//WPFGroupBox[@caption='Electrolytes calculation options']"
				[+] wcAPWPFComboBox cboChemistryID
					[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
				[+] wcAPWPFComboBox cboSimulationApproach
					[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
				[ ] 
				[ ] 
			[ ] 
			[ ] //Analysis-->Analysis(Generic)
			[+] WPFGroupBox grpPropertyOption  //Properties tab
				[ ] locator "//WPFGroupBox[@caption='Property options']"
				[+] wcAPWPFComboBox cboPropertyMethod
					[ ] locator "//WPFControl[@automationId='MMComboEdit_1']"
			[+] WPFGroupBox grpGenericAnalysisResults //Result tree
				[ ] locator "//WPFControl[@automationId='MMGroupBox_1']"
				[+] WPFDataGrid dgGenericAnalysisResults
					[ ] locator "//WPFDataGrid[@automationId='PART_DataGrid']"
			[+] WPFGroupBox grpFixedStateVariables
				[ ] locator "//WPFGroupBox[@caption='Fixed state variables']"
				[+] wcAPWPFComboBox cboVariable1
					[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
				[+] wcAPWPFTextBox txbVar1
					[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
				[+] wcAPWPFComboBox cboVariable1Unit
					[ ] locator "//WPFControl[@automationId='PART_editControl'][3]"
				[+] wcAPWPFComboBox cboVariable2
					[ ] locator "//WPFControl[@automationId='PART_editControl'][4]"
				[+] wcAPWPFTextBox txbVar2
					[ ] locator "//WPFControl[@automationId='PART_editControl'][5]"
				[+] wcAPWPFComboBox cboVariable2Unit
					[ ] locator "//WPFControl[@automationId='PART_editControl'][6]"
				[ ] 
				[ ] 
			[+] WPFButton btnRangeList
				[ ] locator "//WPFButton[@caption='Range/List']"
			[ ] 
			[ ] //Blocks-->Block-->Block Options
			[+] WPFGroupBox grpCalculationOptions
				[ ] locator "//WPFGroupBox[@automationId='Template_GroupBox']"
				[+] WPFControl cboFlashConvergenceAlgorithm
					[ ] locator "//WPFControl[@automationId='PART_editControl']"
				[+] WPFCheckBox chkPerformHeatBalanceCalculations
					[ ] locator "//WPFControl[@automationId='MMCheckBox_1']//WPFCheckBox[@automationId='PART_CheckBox']"
				[+] WPFCheckBox chkUseResultsFromPreviousConvergencePass
					[ ] locator "//WPFControl[@automationId='MMCheckBox_2']//WPFCheckBox[@automationId='PART_CheckBox']"
			[ ] 
			[ ] //Blocks-->Block-->Report-->Profiles
			[+] WPFGroupBox grpProfileIntervals
				[ ] locator "//WPFGroupBox[@caption='Profile intervals']"
				[+] WPFRadioButton rdUniformlySpaced
					[ ] locator "//WPFRadioButton[1]"
				[+] WPFRadioButton rdMultipleSections
					[ ] locator "//WPFRadioButton[3]"
				[+] wcAPWPFTextBox txbNumberOfIntervals
					[ ] locator "//WPFControl[7]"
			[+] WPFGroupBox grpProfileReportOptions
				[ ] locator "//WPFGroupBox[@caption='Profile report options']"
				[+] WPFCheckBox chkIncludeTemperature
					[ ] locator "//WPFCheckBox[1]"
				[+] WPFCheckBox chkIncludeMolarComp
					[ ] locator "//WPFCheckBox[2]"
				[+] WPFCheckBox chkPrintIntegerAndReal
					[ ] locator "//WPFCheckBox[3]"
				[+] WPFCheckBox chkGenerateProfiles
					[ ] locator "//WPFCheckBox[4]"
					[ ] 
			[+] WPFGroupBox grpAdvancedOptionsForInitialization
				[ ] locator "//WPFGroupBox[@caption='Advanced options for initialization of EO/Dynamic runs']"
				[+] wcAPWPFComboBox cboDiscretizationMethod
					[ ] locator "//WPFControl[4]"
			[ ] 
			[ ]    //Diagnostics
			[+] WPFSlider sliderBlockOptionsDiagnosticsSimulation
				[ ] locator "//WPFSlider[@automationId='PART_slider'][1]"
			[+] WPFSlider sliderBlockOptionsDiagnosticsProperty
				[ ] locator "//WPFSlider[@automationId='PART_slider'][2]"
			[+] WPFSlider sliderBlockOptionsDiagnosticsStream
				[ ] locator "//WPFSlider[@automationId='PART_slider'][3]"
			[+] WPFSlider sliderBlockOptionsDiagnosticsOnScreen
				[ ] locator "//WPFSlider[@automationId='PART_slider'][4]"
			[ ] 
			[ ] 
			[ ] //Blocks-->Block-->Input
			[+] WPFGroupBox grpFlashSpecifications
				[ ] locator "//WPFGroupBox[@caption='Flash specifications' or @caption='Operating conditions']"
				[+] WPFControl FlashTypeTemp
					[ ] locator"//WPFControl[@automationId='MMComboEdit_1']"
				[+] WPFControl FlshTypePre
					[ ] locator "//WPFControl[@automationId='MMComboEdit_2']"
				[+] WPFControl Temperature
					[ ] locator "//WPFControl[@automationId='textBox'][1]"
					[+] WPFTextBox txtTemperature
						[ ] locator "//WPFTextBox[@automationId='PART_TextBox']"
				[+] WPFControl TemperatureUnit
					[ ] locator "//WPFControl[@automationId='PART_UnitEdit'][1]"
				[+] WPFControl Pressure
					[ ] locator "//WPFControl[@automationId='textBox'][5]"
					[+] WPFTextBox txtPressure
						[ ] locator "//WPFTextBox[@automationId='PART_TextBox']"
					[ ] 
				[+] WPFControl PressureUnit
					[ ] locator "//WPFControl[@automationId='PART_UnitEdit'][5]"
				[ ] 
				[ ] 
			[+] WPFRadioButton rbSpecifyStartTemp
				[ ] locator "//WPFRadioButton[(@automationId='PART_RadioButton' and @caption='Specify starting temperature :')]"
			[+] WPFRadioButton rbSpecifyTempDiff
				[ ] locator "//WPFRadioButton[(@automationId='PART_RadioButton' and @caption='Specify temp. difference between first two points*')]"
			[+] WPFTabItem tabFlashOptions
				[ ] locator "//WPFTabItem[@caption='Flash Options']"
			[+] WPFLabel chkPressureDrop
				[ ] locator "//WPFLabel[@caption='Always calculate pressure drop correlation parameter']"
			[+] WPFControl txbVaporFraction
				[ ] locator "//WPFControl[@automationId='PART_editControl'][9]"
			[+] WPFGroupBox grpSelectUtilityForBlock
				[ ] locator "//WPFGroupBox[@automationId='Template_GroupBox']"
				[+] wcAPWPFComboBox cboUtilityID
					[ ] locator "//WPFControl[@automationId='MMComboEdit_1']"
			[+] WPFGroupBox grpOutletFlash
				[+] WPFGroupBox grpFlashSpecifications
					[ ] locator "//WPFGroupBox[@caption='Flash specifications']"
					[+] wcAPWPFTextBox txbPressureValue
						[ ] locator "//WPFControl[@automationId='textBox'][2]"
					[+] wcAPWPFComboBox cboPressureUnit
						[ ] locator "//WPFControl[@automationId='PART_UnitEdit'][2]"
					[+] wcAPWPFTextBox txbTemperatureChange
						[ ] locator "//WPFControl[@automationId='textBox'][3]"
					[+] wcAPWPFComboBox cboTempChangeUnit
						[ ] locator "//WPFControl[@automationId='PART_UnitEdit'][3]"
					[ ] 
					[ ] 
			[+] WPFControl	txtRefluxRatio
				[ ] locator "//WPFControl[@automationId='PART_editControl'][5]"
			[+] WPFButton	btnInteractiveDesign
				[ ] locator "//WPFButton[@caption='Interactive Design']"
			[+] WPFControl cboPressureUnitInput
				[ ] locator "//WPFControl[@automationId='PART_editControl'][8]"
			[+] WPFControl	txtDSComponent1
				[ ] locator "//WPFControl[@automationId='PART_editControl'][10]"
			[+] WPFControl txtDSComponent2
				[ ] locator "//WPFControl[@automationId='PART_editControl'][13]"
			[+] WPFControl txtDSComponent3
				[ ] locator "//WPFControl[@automationId='PART_editControl'][16]"
			[+] WPFControl txtDSRecovery1
				[ ] locator "//WPFControl[@automationId='PART_editControl'][12]"
			[+] WPFControl txtDSRecovery2
				[ ] locator "//WPFControl[@automationId='PART_editControl'][15]"
			[+] WPFControl txtDSRecovery3
				[ ] locator "//WPFControl[@automationId='PART_editControl'][18]"
			[+] WPFControl	txtBSComponent1
				[ ] locator "//WPFControl[@automationId='PART_editControl'][22]"
			[+] WPFControl txtBSComponent2
				[ ] locator "//WPFControl[@automationId='PART_editControl'][25]"
			[+] WPFControl txtBSComponent3
				[ ] locator "//WPFControl[@automationId='PART_editControl'][28]"
			[+] WPFControl txtBSRecovery1
				[ ] locator "//WPFControl[@automationId='PART_editControl'][24]"
			[+] WPFControl txtBSRecovery2
				[ ] locator "//WPFControl[@automationId='PART_editControl'][27]"
			[+] WPFControl txtBSRecovery3
				[ ] locator "//WPFControl[@automationId='PART_editControl'][30]"
			[ ] 
			[ ] 
			[ ]         //Calculation Options
			[+] WPFRadioButton rdlKLLCorrelation
				[ ] locator "//WPFRadioButton[(@automationId='PART_RadioButton' and @caption='KLL correlation')]"
			[ ] 
			[ ] 
			[ ] 
			[ ] //Blocks-->Block-->Setup
			[+] WPFGroupBox grpSetupOptions
				[ ] locator "//WPFGroupBox[@caption='Setup options']"
				[+] WPFControl CalculationType
					[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
					[+] WPFComboBox cboCalculationType
						[ ] locator "//WPFComboBox[@automationId='PART_FocusSite']"
				[+] wcAPWPFTextBox txbNumberOfStages
					[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
				[+] wcAPWPFComboBox cboReboiler
					[ ] locator "//WPFControl[@automationId='PART_editControl'][4]"
				[+] WPFControl ValidPhases
					[ ] locator "//WPFControl[@automationId='PART_editControl'][5]"
					[+] WPFComboBox cboValidPhases
						[ ] locator "//WPFComboBox[@automationId='PART_FocusSite']"
				[+] wcAPWPFComboBox cboConvergence
					[ ] locator "//WPFControl[@automationId='PART_editControl'][6]"
					[ ] 
					[ ] 
				[ ] 
			[+] WPFGroupBox grpSpecificationsCatalyst
				[ ] locator "//WPFGroupBox[@caption='Specifications']"
				[+] wcAPWPFComboBox cboSpec1Type
					[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
				[+] wcAPWPFTextBox txbSpec1Value
					[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
				[+] wcAPWPFComboBox cboSpec1Unit
					[ ] locator "//WPFControl[@automationId='PART_editControl'][3]"
				[+] wcAPWPFComboBox cboSpec2Type
					[ ] locator "//WPFControl[@automationId='PART_editControl'][4]"
				[+] wcAPWPFTextBox txbSpec2Value
					[ ] locator "//WPFControl[@automationId='PART_editControl'][5]"
				[+] wcAPWPFComboBox cboSpec2Unit
					[ ] locator "//WPFControl[@automationId='PART_editControl'][6]"
					[ ] 
					[ ] 
			[+] WPFCheckBox chkCatalystPresentInReactor
				[ ] locator "//WPFCheckBox[@automationId='PART_CheckBox'][1]"
			[+] WPFGroupBox grpRigrousMode
				[ ] locator "//WPFGroupBox[@caption='Rigorous Model']"
				[+] WPFRadioButton rdAirCooler
					[ ] locator "//WPFRadioButton[(@automationId='PART_RadioButton' and @caption='AirCooled')]"
				[+] WPFRadioButton rdPlate
					[ ] locator "//WPFRadioButton[@caption='Plate']"
				[+] WPFRadioButton rdShellTube
					[ ] locator "//WPFRadioButton[(@automationId='PART_RadioButton' and @caption='Shell&Tube')]"
				[ ] //Appended by Susan
				[+] WPFButton	btnTransferUAtoShortcut
					[ ] locator "//WPFButton[@caption='Transfer UA to shortcut']"
				[ ] //Appended done
				[ ] 
			[+] WPFRadioButton rdShellTube
				[ ] locator "//WPFRadioButton[@caption='Shell & Tube']"
				[+] WPFRadioButton rdPlate
					[ ] locator "//WPFRadioButton[(@automationId='PART_RadioButton' and @caption='Plate')]"
				[ ] //Appended by Susan
				[+] WPFButton	btnTransferUAtoShortcut
					[ ] locator "//WPFButton[@caption='Transfer UA to shortcut']"
				[ ] //Appended done
			[+] WPFGroupBox grpCalculation
				[ ] locator "//WPFGroupBox[@caption='Calculation']"
				[+] WPFRadioButton rdShortcut
					[ ] locator "//WPFRadioButton[(@automationId='PART_RadioButton' and @caption='Shortcut')]"
				[+] WPFRadioButton rdDetailed
					[ ] locator "//WPFRadioButton[(@automationId='PART_RadioButton' and @caption='Detailed')]"
				[+] WPFRadioButton rdRigorous
					[ ] locator "//WPFRadioButton[(@automationId='PART_RadioButton' and @caption='Rigorous')]"
				[+] WPFButton	btnSizeShellTube
					[ ] locator "//WPFButton[@caption='Size Shell&Tube']"
			[+] WPFGroupBox grpFlowArrangement
				[ ] locator "//WPFGroupBox[@caption='Flow arrangement']"
				[+] WPFControl HotFluid
					[ ] locator "//WPFControl[@automationId='MMComboEdit_1']"
					[+] WPFComboBox cmbType
						[ ] locator "//WPFComboBox[@automationId='PART_FocusSite']"
						[ ] 
				[ ] 
			[+] WPFControl EDRCalculationType
				[ ] locator "//WPFControl[@automationId='MMComboEdit_3']"
				[+] WPFComboBox cmbType
					[ ] locator "//WPFComboBox[@automationId='PART_FocusSite']"
			[+] wcAPWPFComboBox cboReactorType
				[ ] locator "//WPFControl[@automationId='MMComboEdit_1']"
			[+] wcAPWPFComboBox cboRPlugReactorType
				[ ] locator "//WPFControl[@automationId='PART_editControl']"
			[+] WPFGroupBox grpOperatingConditions
				[ ] locator "//WPFGroupBox[@caption='Operating conditions']"
				[+] wcAPWPFTextBox txtTemperatureValue
					[ ] locator "//WPFControl[@automationId='textBox'][1]"
				[+] wcAPWPFComboBox txtTemeratureUnit
					[ ] locator "//WPFControl[@automationId='PART_UnitEdit'][1]"
				[+] wcAPWPFTextBox txtPressureVaule
					[ ] locator "//WPFControl[@automationId='textBox'][2]"
				[+] wcAPWPFComboBox txtPressureUnit
					[ ] locator "//WPFControl[@automationId='PART_UnitEdit'][2]"
			[+] WPFGroupBox grpOperatingConditionRPlug
				[ ] locator "//WPFGroupBox[@caption='Operating condition']"
				[+] wcAPWPFComboBox cboThermalFluidSpecType
					[ ] locator "//WPFControl[@automationId='PART_editControl'][3]"
				[+] wcAPWPFTextBox txbTemperatureThermalFluid
					[ ] locator "//WPFControl[@automationId='PART_editControl'][4]"
				[+] wcAPWPFComboBox cboTemperatureThermalFluidUnit
					[ ] locator "//WPFControl[@automationId='PART_editControl'][5]"
					[ ] 
			[+] WPFGroupBox grpReactorDimensions
				[ ] locator "//WPFGroupBox[@caption='Reactor dimensions']"
				[+] wcAPWPFTextBox txbLength
					[ ] locator "//WPFControl[6]"
				[+] wcAPWPFComboBox txbLengthUnit
					[ ] locator "//WPFControl[11]"
				[+] wcAPWPFTextBox txbDiameter
					[ ] locator "//WPFControl[18]"
				[+] wcAPWPFComboBox txbDiameterUnit
					[ ] locator "//WPFControl[23]"
					[ ] 
			[+] WPFGroupBox grpValidPhases
				[ ] locator "//WPFGroupBox[@caption='Valid phases']"
				[+] wcAPWPFComboBox cboProcessStream
					[ ] locator "//WPFControl[6]"
				[+] wcAPWPFComboBox cboThermalFluidStream
					[ ] locator "//WPFControl[13]"
				[+] WPFButton btn2ndLiquid
					[ ] locator "//WPFButton[1]"
				[ ] 
				[ ] 
			[+] WPFGroupBox grpSelectReactionSet
				[ ] locator "//WPFGroupBox[@caption='Select reaction set*']"
				[+] WPFListBox lbAvailableReactionSets
					[ ] locator "//WPFListBox[1]"
				[+] WPFListBox lbSelectedReactionSets
					[ ] locator "//WPFListBox[2]"
				[+] WPFButton btnMoveRight
					[ ] locator "//WPFButton[1]"
				[+] WPFButton btnMoveAllRight
					[ ] locator "//WPFButton[2]"
				[+] WPFButton btnMoveLeft
					[ ] locator "//WPFButton[3]"
				[+] WPFButton btnMoveAllLeft
					[ ] locator "//WPFButton[4]"
				[+] WPFButton btnNew
					[ ] locator "//WPFButton[5]"
					[ ] 
					[ ] 
			[+] WPFGroupBox grpPressureDropThroughReactor
				[ ] locator "//WPFGroupBox[@caption='Pressure drop through reactor']"
				[+] WPFRadioButton rdSpecifyPressureDrop
					[ ] locator "//WPFRadioButton[2]"
				[+] WPFRadioButton rdCalculatePressureDrop
					[ ] locator "//WPFRadioButton[4]"
				[+] WPFRadioButton rdUseFrictionalCorrelation
					[ ] locator "//WPFRadioButton[6]"
					[ ] 
			[+] WPFGroupBox grpPressureAtReactorInlet
				[ ] locator "//WPFGroupBox[@caption='Pressure at reactor inlet']"
				[+] wcAPWPFTextBox txbProcessStream
					[ ] locator "//WPFControl[7]"
				[+] wcAPWPFTextBox txbThermalFluidStream
					[ ] locator "//WPFControl[18]"
					[ ] 
			[+] WPFGroupBox grpFrictionalCorrelation
				[ ] locator "//WPFGroupBox[@caption='Frictional correlation']"
				[+] wcAPWPFComboBox cboPressureDropCorrelation
					[ ] locator "//WPFControl[6]"
				[+] wcAPWPFTextBox txbPressureDropScalingFactor
					[ ] locator "//WPFControl[15]"
				[+] wcAPWPFTextBox txbRoughness
					[ ] locator "//WPFControl[23]"
				[+] wcAPWPFComboBox cboRoughnessUnit
					[ ] locator "//WPFControl[26]"
					[ ] 
			[+] WPFGroupBox grpReactorHoldup
				[ ] locator "//WPFGroupBox[@caption='Reactor  holdup']"
				[+] WPFRadioButton rdAssumeNoSlip
					[ ] locator "//WPFRadioButton[2]"
				[+] WPFRadioButton rdCalcualteLiquidHoldup
					[ ] locator "//WPFRadioButton[4]"
				[+] WPFRadioButton rdSpecifyLiquid
					[ ] locator "//WPFRadioButton[6]"
				[+] wcAPWPFComboBox cboLiquidHoldupCorrelation
					[ ] locator "//WPFControl[10]"
			[+] WPFGroupBox grpProcessStreamProfiles
				[ ] locator "//WPFGroupBox[@caption='Process stream profiles']"
				[+] wcAPWPFComboBox cboView
					[ ] locator "//WPFControl[7]"
				[+] WPFDataGridCell	gdFirstCell
					[ ] locator "//WPFDataGridCell[@className='GridControlCell'][1]"
			[+] WPFGroupBox grpHeatTransferSpecification
				[ ] locator "//WPFGroupBox[@caption='Heat transfer specification']"
				[+] WPFRadioButton rdSpecifyHeatTransfer
					[ ] locator "//WPFRadioButton[1]"
				[+] WPFRadioButton rdCalculateInUserSub
					[ ] locator "//WPFRadioButton[3]"
				[+] wcAPWPFTextBox txbHeatTransferCoefficient
					[ ] locator "//WPFControl[10]"
				[+] wcAPWPFComboBox cboHeatTransCoeffUnit
					[ ] locator "//WPFControl[11]"
					[ ] 
			[+] WPFGroupBox grpUtilitySpecification
				[ ] locator "//WPFGroupBox[@caption='Utility specification ']"
				[+] wcAPWPFComboBox cboUtility
					[ ] locator "//WPFControl[@automationId='MMComboEdit_2']"
			[+] WPFGroupBox grpUser2Subroutines
				[ ] locator "//WPFGroupBox[@caption='User2 subroutines']"
				[+] wcAPWPFTextBox txtModel
					[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
				[+] wcAPWPFTextBox txtReport
					[ ] locator "//WPFControl[@automationId='textBox'][2]"
			[+] WPFGroupBox grpConfiguredVariables
				[+] wcAPDataGrid dgVars
					[ ]  locator "//WPFControl[@automationId='PART_DataGrid']"
			[+] WPFGroupBox grpStreamFlash
				[+] wcAPWPFComboBox cboStream
					[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
				[+] wcAPWPFComboBox cboFlashType
					[ ] locator "//WPFControl[@automationId='MMComboEdit_1']"
			[+] WPFGroupBox grpExchangerSpecification
				[ ] locator "//WPFGroupBox[@caption='Exchanger specification']"
				[+] wcAPWPFComboBox cboSpecification
					[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
				[+] wcAPWPFTextBox txbValue
					[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
				[+] wcAPWPFComboBox cboValueUnit
					[ ] locator "//WPFControl[@automationId='PART_editControl'][3]"
				[+] wcAPWPFTextBox txbExchangerArea
					[ ] locator "//WPFControl[@automationId='PART_editControl'][4]"
				[+] wcAPWPFComboBox cboExchangerAreaUnit
					[ ] locator "//WPFControl[@automationId='PART_editControl'][5]"
				[+] wcAPWPFTextBox txbConstantUA
					[ ] locator "//WPFControl[@automationId='PART_editControl'][6]"
				[+] wcAPWPFComboBox cboConstantUAUnit
					[ ] locator "//WPFControl[@automationId='PART_editControl'][7]"
				[+] wcAPWPFTextBox txbMinimumTemperatureApproach
					[ ] locator "//WPFControl[@automationId='PART_editControl'][8]"
				[+] wcAPWPFComboBox cboMinimumTemperatureApproachUnit
					[ ] locator "//WPFControl[@automationId='PART_editControl'][9]"
					[ ] 
					[ ] 
			[+] WPFGroupBox grpSelectedCalculationMethod
				[ ] locator "//WPFGroupBox[@caption='Selected calculation method']"
				[+] WPFRadioButton rdConstantUValue
					[ ] locator "//WPFRadioButton[1]"
				[+] WPFRadioButton rdPhaseSpecificValues
					[ ] locator "//WPFRadioButton[3]"
				[+] WPFRadioButton rdPowerLawForFlowRate
					[ ] locator "//WPFRadioButton[5]"
				[+] WPFRadioButton rdExchangerGeometry
					[ ] locator "//WPFRadioButton[7]"
				[+] WPFRadioButton rdFilmCoefficients
					[ ] locator "//WPFRadioButton[9]"
				[+] WPFRadioButton rdUserSubroutine
					[ ] locator "//WPFRadioButton[11]"
				[+] wcAPWPFTextBox txbConstantU
					[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
				[+] wcAPWPFComboBox cboConstantUUnit
					[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
			[+] WPFGroupBox grpProductstreams
				[ ] locator "//WPFGroupBox[@caption='Product streams']"
				[+] WPFContentControl rdStage
					[ ] locator "//WPFContentControl[@name='LabelContent'][2]"
			[ ] 
			[ ] 
			[ ] 
			[ ] //Blocks-->Block-->Sizing and Rating-->Tray Rating
			[+] WPFGroupBox grpPressureDrop
				[ ] locator "//WPFGroupBox[@caption='Pressure drop']"
				[+] WPFCheckBox chkUpdateSectionPressureProfile
					[ ] locator "//WPFCheckBox[1]"
				[+] wcAPWPFComboBox cboFixPressureAt
					[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
				[ ] 
			[ ] 
			[ ] //Blocks-->Block-->Sizing and Rating-->Packing Rating
			[+] WPFGroupBox grpCalculationOptionsPDrop
				[ ] locator "//WPFGroupBox[@caption='Calculation options']"
				[+] WPFCheckBox chkUpdateSectionPressureProfile
					[ ] locator "//WPFCheckBox[1]"
				[+] wcAPWPFComboBox cboPressureDropCalculationMethod
					[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
				[+] wcAPWPFComboBox cboFixPressureAt
					[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
				[ ] 
				[ ] 
			[ ] 
			[ ] //Blocks-->Block-->Specifications
			[+] wcAPWPFComboBox cboReboiler
				[ ] locator "//WPFControl[@automationId='MMComboEdit_3']"
				[ ] 
				[ ] 
			[+] WPFGroupBox grpOutletCondition
				[ ] locator "//WPFGroupBox[@caption='Outlet condition']"
				[+] wcAPWPFComboBox cboCondition
					[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
				[+] wcAPWPFTextBox txbValue
					[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
				[+] wcAPWPFComboBox cboUnit
					[ ] locator "//WPFControl[@automationId='PART_editControl'][3]"
					[ ] 
				[ ] 
			[+] WPFGroupBox grpThermosiphonReboilerOptions
				[ ] locator "//WPFGroupBox[@caption='Thermosiphon reboiler option*']"
				[+] WPFRadioButton rdSpecifyReboilerFlowRate
					[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_1']"
				[+] WPFRadioButton rdSpecifyReboilerOutletCondition
					[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_2']"
				[+] WPFRadioButton rdSpecifyBothFlowAndOutletCondition
					[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_3']"
					[ ] 
			[+] WPFButton btnReboilerWizard
				[ ] locator "//WPFButton[@caption='Reboiler Wizard']"
			[+] WPFGroupBox grpReboilerConfigurations
				[ ] locator "//WPFGroupBox[@caption='Reboiler configurations']"
				[+] WPFRadioButton rdCirculationWithoutBaffle
					[ ] locator "//WPFRadioButton[1]"
				[+] WPFRadioButton rdCirculationWithBaffle
					[ ] locator "//WPFRadioButton[3]"
				[+] WPFRadioButton rdCirculationWithAuxillaryBaffle
					[ ] locator "//WPFRadioButton[5]"
				[ ] 
				[ ] 
				[ ] 
				[ ] 
			[+] WPFButton btnStagewizard
				[ ] locator "//WPFButton[@caption='Stage Wizard']"
			[ ] 
			[ ] 
			[ ] 
			[ ] //Blocks-->Block-->Specifications-->Block Options
			[+] WPFGroupBox  grpPropertyOptions
				[ ] locator "//WPFGroupBox[@caption='Property options']"
				[+] wcAPWPFComboBox cboPropertyMethod
					[ ] locator "//WPFControl[@automationId='MMComboEdit_1']"
				[+] wcAPWPFComboBox cboHenryComponentID
					[ ] locator "//WPFControl[@automationId='MMComboEdit_2']"
			[+] WPFGroupBox grpOperatingSpecificationsRadFrac
				[ ] locator "//WPFGroupBox[@caption='Operating specifications']"
				[+] wcAPWPFComboBox cboCondition1
					[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
				[+] wcAPWPFComboBox cboCondition1Basis
					[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
				[+] wcAPWPFTextBox cboCondition1Value
					[ ] locator "//WPFControl[@automationId='PART_editControl'][3]"
				[+] wcAPWPFComboBox cboCondition1Unit
					[ ] locator "//WPFControl[@automationId='PART_editControl'][4]"
				[+] wcAPWPFComboBox cboCondition2
					[ ] locator "//WPFControl[@automationId='PART_editControl'][5]"
				[+] wcAPWPFComboBox cboCondition2Basis
					[ ] locator "//WPFControl[@automationId='PART_editControl'][6]"
				[+] wcAPWPFTextBox cboCondition2Value
					[ ] locator "//WPFControl[@automationId='PART_editControl'][7]"
				[+] wcAPWPFComboBox cboCondition2Unit
					[ ] locator "//WPFControl[@automationId='PART_editControl'][8]"
			[ ] 
			[ ] //Blocks-->Block-->Convergence
			[ ] //Estimates
			[+] WPFButton btnGenerateEstimates
				[ ] locator "//WPFButton[@caption='Generate Estimates...']"
			[+] WPFDataGrid dgSpecifications
				[ ] locator "//WPFControl[@automationId='PART_DataGrid']"
			[ ] 
			[ ] //Blocks-->Block-->Convergence-->Convergence
			[+] WPFGroupBox grpBasicConvergence
				[ ] locator "//WPFGroupBox[@caption='Basic convergence']"
				[+] wcAPWPFComboBox cboAlgorithm
					[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
				[+] wcAPWPFTextBox txbMaximumIterations
					[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
				[+] wcAPWPFComboBox cboErrorTolerance
					[ ] locator "//WPFControl[@automationId='PART_editControl'][3]"
					[ ] 
				[ ] 
			[ ] 
			[ ] //Blocks-->Block-->Convergence-->Optional Parameters For Shortcut And Detailed Method
			[+] WPFGroupBox grpOptionalParametersForShortcutAndDetailedMethod
				[ ] locator "//WPFGroupBox[@automationId='Template_GroupBox']"
				[+] WPFCheckBox chkAllowTemperatureCrossovers
					[ ] locator "//WPFCheckBox[@automationId='PART_CheckBox']"
			[ ] 
			[ ] //Blocks-->Block-->Convergence-->EO Options--> SM Initi
			[+] WPFGroupBox grpSMInitializationParameters
				[ ] locator "//WPFGroupBox[@caption='SM initialization parameters']"
				[+] wcAPWPFTextBox txbMaximumFlowsheetEvaluations
					[ ] locator "//WPFControl[@automationId='MMSpinBox_1']"
				[+] wcAPWPFTextBox txbWait
					[ ] locator "//WPFControl[@automationId='MMSpinBox_2']"
				[+] wcAPWPFTextBox txbConsecutiveDirectSubstitutionSteps
					[ ] locator "//WPFControl[@automationId='MMSpinBox_3']"
				[+] wcAPWPFTextBox txbDiagnosticMessageLevel
					[ ] locator "//WPFControl[@automationId='MMSpinBox_4']"
			[ ] 
			[ ] //Blocks-->Block-->Convergenece-->EO Options-->SM to EO
			[+] WPFGroupBox grpSMToEOSwitchParameters
				[ ] locator "//WPFGroupBox[@automationId='Template_GroupBox']"
				[+] wcAPWPFTextBox txbMaximumInitializationPasses
					[ ] locator "//WPFControl[@automationId='MMSpinBox_1']"
				[+] wcAPWPFTextBox txbTolerance
					[ ] locator "//WPFControl[@automationId='MMVariableEdit_1']"
				[+] wcAPWPFComboBox cboBypassSMInitialization
					[ ] locator "//WPFControl[@automationId='MMComboEdit_1']"
			[ ] 
			[ ] //Blocks-->Block-->Convergence-->EO Options-->Solver
			[+] WPFGroupBox grpSelectSolverForEquationOrientedSolution
				[ ] locator "//WPFGroupBox[@automationId='Template_GroupBox']"
				[+] wcAPWPFComboBox cboSolver
					[ ] locator "//WPFControl[@automationId='MMComboEdit_1']"
				[+] WPFCheckBox chkEnableHomotopy
					[ ] locator "//WPFCheckBox[@automationId='PART_CheckBox']"
				[ ] 
			[ ] 
			[ ] //Blocks-->Block-->Sizing and Rating
			[+] WPFButton btnNew
				[ ] locator "//WPFButton[@caption='New...']"
				[ ] 
			[+] WPFButton btnCopy
				[ ] locator "//WPFButton[@caption='Copy']"
			[+] WPFButton btnPaste
				[ ] locator "//WPFButton[@caption='Paste']"
			[+] WPFButton	btnDelete
				[ ] locator "//WPFButton[@caption='Delete']"
			[ ] 
			[+] WPFCheckBox chkRateBasedCalculation
				[ ] locator "//WPFCheckBox[@automationId='PART_CheckBox']"
			[+] WPFRadioButton rbSectionPackedHeight
				[ ] locator "//WPFRadioButton[(@automationId='PART_RadioButton' and @caption='Section packed height*')]"
			[ ] 
			[ ] 
			[ ] //Blocks-->Block-->Configuration-->Heaters and Coolers
			[+] wcAPDataGrid OutletHeatStreams
				[ ] locator  "//WPFControl[@automationId='PART_DataGrid'][2]"
			[+] WPFTabItem tbSideDuties
				[ ] locator "//WPFTabItem[@caption='Side Duties']"
			[+] wcAPDataGrid SideDuties
				[ ] locator "//WPFControl[@automationId='PART_DataGrid']"
				[ ] 
			[+] WPFGroupBox grpSpecifications_HeatersNCoolers_Utility_Exchangers
				[ ] locator "//WPFGroupBox[@caption='Specifications']"
				[+] wcAPWPFComboBox cboStage
					[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
			[ ] 
			[ ] //Blocks-->Block-->Configuration-->Decanters
			[+] WPFGroupBox grp1stliquidreturned
				[ ] locator "//WPFGroupBox[@caption='1st liquid returned']"
			[+] WPFGroupBox grp2ndliquidreturned
				[ ] locator "//WPFGroupBox[@caption='2nd liquid returned']"
			[ ] 
			[ ] //Blocks-->Block-->Report-->Property Options
			[+] WPFCheckBox chkIncludeHydraulicParameters
				[ ] locator "//WPFCheckBox[@automationId='PART_CheckBox'][5]"
			[ ] 
			[ ] 
			[ ] //Blocks-->Block-->EDR Options
			[+] WPFGroupBox grpEDRinputFile
				[ ] locator "//WPFGroupBox[@caption='EDR  input file']"
				[+] WPFContentControl btnBrowse
					[ ] locator "//WPFContentControl[@caption='Browse...'][1]"
			[ ] 
			[ ] //Blocks-->Block-->EDR Browser
			[+] WPFContentControl BrowserWarning
				[ ] locator "//WPFContentControl[@caption='WARNING: In order to display the EDR data browser, you must set calculation method as Rigorous, and provide an EDR input file in the EDR Options form.'][1]"
			[ ] 
			[ ] //Blocks-->Block-->Results
			[+] WPFGroupBox grpResultSummary
				[ ] // locator "//WPFGroupBox[@automationId='Template_GroupBox']"
				[+] WPFControl Temperature
					[ ] locator "//WPFControl[@automationId='textBox'][1]"
					[+] WPFTextBox txtTemperature
						[ ] locator "//WPFTextBox[@automationId='PART_TextBox']"
				[+] WPFControl TemperatureUnit
					[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
				[+] WPFControl Pressure
					[ ] locator "//WPFControl[@automationId='textBox'][2]"
					[+] WPFTextBox txtPressure
						[ ] locator "//WPFTextBox[@automationId='PART_TextBox']"
				[+] wcAPWPFTextBox txbHeatDuty
					[ ] locator "//WPFControl[@automationId='MMVariableEdit_3']"
			[+] wcAPWPFTextBox txbHeatDuty
				[ ] locator "//WPFControl[@automationId='PART_editControl'][5]"
			[+] WPFContentControl grpRPlugResults
				[ ] locator "//WPFContentControl[@className='MMRPlug_Result_Summar']"
				[+] wcAPWPFTextBox txbHeatDuty
					[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
				[+] wcAPWPFTextBox txbMinTemp
					[ ] locator "//WPFControl[@automationId='PART_editControl'][3]"
				[+] wcAPWPFTextBox txbMaxTemp
					[ ] locator "//WPFControl[@automationId='PART_editControl'][5]"
				[+] wcAPWPFTextBox txbResidenceTime
					[ ] locator "//WPFControl[@automationId='PART_editControl'][7]"
				[+] wcAPWPFTextBox txbThermalFluidTempinlet
					[ ] locator "//WPFControl[@automationId='PART_editControl'][9]"
				[+] wcAPWPFTextBox txbThermalFluidVapFracInlet
					[ ] locator "//WPFControl[@automationId='PART_editControl'][11]"
				[+] wcAPWPFComboBox cboHeatDutyUnit
					[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
				[+] wcAPWPFComboBox cboMinTempUnit
					[ ] locator "//WPFControl[@automationId='PART_editControl'][4]"
				[+] wcAPWPFComboBox cboMaxTempUnit
					[ ] locator "//WPFControl[@automationId='PART_editControl'][6]"
				[+] wcAPWPFComboBox cboResTimeUnit
					[ ] locator "//WPFControl[@automationId='PART_editControl'][8]"
				[+] wcAPWPFComboBox cboThermFluidTempUnit
					[ ] locator "//WPFControl[@automationId='PART_editControl'][10]"
				[ ] 
			[+]  WPFGroupBox grpUtilities
				[+]  wcAPWPFTextBox txbUsage
					[ ] locator "//WPFControl[@automationId='textBox'][5]"
				[+] wcAPWPFComboBox cboUsageUnit
					[ ] locator "//WPFControl[@automationId='PART_UnitEdit'][3]"
				[+] wcAPWPFTextBox txbCost
					[ ] locator "//WPFControl[@automationId='textBox'][7]"
				[+]  wcAPWPFComboBox cboCostUnit
					[ ] locator "//WPFControl[@automationId='PART_UnitEdit'][5]"
				[+] wcAPWPFTextBox txbCost_Condenser
					[ ] locator "//WPFControl[@automationId='PART_editControl'][11]"
				[+] wcAPWPFTextBox txbCost_Reboiler
					[ ] locator "//WPFControl[@automationId='PART_editControl'][13]"
				[ ] 
			[+] WPFGroupBox grpUtilitiesUsage
				[+] wcAPWPFTextBox txbUsage
					[ ] locator "//WPFControl[@automationId='textBox'][2]"
				[+] wcAPWPFComboBox cboUsageUnit
					[ ] locator "//WPFControl[@automationId='PART_UnitEdit'][2]"
			[+] WPFGroupBox grpThermosiphonReboilerSummary
				[ ] locator "//WPFGroupBox[@caption='Thermosiphon reboiler summary']"
				[+] wcAPWPFTextBox txbPressure
					[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
				[+] wcAPWPFComboBox cboTemperatureUnit
					[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
				[+] wcAPWPFTextBox txbTemperature
					[ ] locator "//WPFControl[@automationId='PART_editControl'][3]"
				[+] wcAPWPFComboBox cboPressureUnit
					[ ] locator "//WPFControl[@automationId='PART_editControl'][4]"
				[+] wcAPWPFTextBox txbVaporFraction
					[ ] locator "//WPFControl[@automationId='PART_editControl'][5]"
				[+] wcAPWPFTextBox txbMoleFlow
					[ ] locator "//WPFControl[@automationId='PART_editControl'][6]"
				[+] wcAPWPFComboBox cboMoleFlowUnit
					[ ] locator "//WPFControl[@automationId='PART_editControl'][7]"
				[+] wcAPWPFTextBox txbMassFlow
					[ ] locator "//WPFControl[@automationId='PART_editControl'][8]"
				[+] wcAPWPFComboBox cboMassFlowUnit
					[ ] locator "//WPFControl[@automationId='PART_editControl'][9]"
				[+] wcAPWPFTextBox txbHeatDuty
					[ ] locator "//WPFControl[@automationId='PART_editControl'][10]"
				[+] wcAPWPFComboBox cboHeatDutyUnit
					[ ] locator "//WPFControl[@automationId='PART_editControl'][11]"
					[ ] 
			[+] WPFGroupBox grpColumnUtilities
				[+] wcAPWPFTextBox txbDuty_1 
					[ ] locator "//WPFControl[@automationId='PART_editControl'][4]"
				[+] wcAPWPFTextBox txbDuty_2
					[ ] locator "//WPFControl[@automationId='PART_editControl'][6]"
				[+] wcAPWPFTextBox txbUsage_1 
					[ ] locator "//WPFControl[@automationId='PART_editControl'][8]"
				[+] wcAPWPFTextBox txbUsage_2 
					[ ] locator "//WPFControl[@automationId='PART_editControl'][10]"
				[+] wcAPWPFTextBox txbCost_1 
					[ ] locator "//WPFControl[@automationId='PART_editControl'][12]"
				[+] wcAPWPFTextBox txbCost_2 
					[ ] locator "//WPFControl[@automationId='PART_editControl'][14]"
			[ ] 
			[ ] ////Blocks-->Block-->Vary-->1
			[+] WPFGroupBox grpAdjustedvariable
				[ ] locator "//WPFGroupBox[@caption='Adjusted variable']"
				[+] wcAPWPFComboBox cboType
					[ ] locator "//WPFControl[@className='AesXamComboEdit']"
				[+] wcAPWPFTextBox txtStage
					[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
			[ ] 
			[ ] 
			[ ] //Convergence-->EO Options-->DMO Basic
			[+] WPFGroupBox grpCreepStepParameters
				[ ] locator "//WPFGroupBox[@caption='Creep step parameters']"
				[+] wcAPWPFComboBox cboONOffSwitch
					[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
				[+] wcAPWPFTextBox txbIterations
					[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
					[ ] 
					[ ] 
			[+] WPFGroupBox grpIterationLimits
				[ ] locator "//WPFGroupBox[@caption='Iteration limits']"
				[+] wcAPWPFTextBox txbMaxIterations
					[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
			[+] WPFGroupBox grpConvegTolerance
				[ ] locator "//WPFGroupBox[@caption='Convergence tolerance']"
				[+] wcAPWPFTextBox tbResidual
					[ ] locator "//WPFControl[@automationId='MMVariableEdit_1']"
				[+] wcAPWPFTextBox tbObjective
					[ ] locator "//WPFControl[@automationId='MMVariableEdit_2']"
			[ ] 
			[ ] //Blocks-->Block-->EO Configuration-->Solve Options
			[+] WPFGroupBox  grpSolutionOptions
				[ ] locator "//WPFGroupBox[@caption='Solution options']"
				[+] wcAPWPFComboBox cboSolutionMethod
					[ ] locator "//WPFControl[@automationId='MMComboEdit_1']"
				[+] wcAPWPFComboBox cboRunMode
					[ ] locator "//WPFControl[@automationId='MMComboEdit_2']"
				[ ] 
			[ ] 
			[ ] //Blocks-->Block-->EO Modeling-->Ports
			[+] WPFGroupBox grpAdvancedOptions
				[ ] locator "//WPFGroupBox[@automationId='Template_GroupBox']"
				[+] wcAPWPFComboBox cboPortType
					[ ] locator "//WPFControl[@automationId='MMComboEdit_1']"
			[ ] 
			[ ] //Blocks-->Block(Radfrac)-->Analysis-->NQ Curves-->one curve
			[ ] //Setup
			[+] WPFGroupBox grpTotalStageOptimization
				[ ] locator "//WPFGroupBox[@caption='Total stage optimization']"
				[+] wcAPWPFTextBox txtLowerLimit
					[ ] locator "//WPFControl[@automationId='MMSpinBox_1']"
				[+] wcAPWPFTextBox txtUpperLimit
					[ ] locator "//WPFControl[@automationId='MMSpinBox_2']"
				[+] wcAPWPFTextBox txtStepSize
					[ ] locator "//WPFControl[@automationId='MMSpinBox_3']"
			[+] WPFGroupBox grpFeedTrayOptimization
				[ ] locator "//WPFGroupBox[@caption='Feed tray optimization']"
				[+] wcAPWPFComboBox cboFeedStream
					[ ]  locator "//WPFControl[@automationId='MMComboEdit_1']" 
				[+] wcAPWPFTextBox txtMinimumRefluxRatio
					[ ] locator "//WPFControl[@automationId='MMVariableEdit_1']"
				[+] wcAPWPFTextBox txtStageLimitFromTop
					[ ] locator "//WPFControl[@automationId='MMSpinBox_4']"
			[+] WPFGroupBox grpObjectiveFunction
				[ ] locator "//WPFGroupBox[@caption='Objective Function']"
				[+] wcAPWPFComboBox cboMinimize
					[ ] locator "//WPFControl[@automationId='MMComboEdit_2']"
			[ ] //Result
			[+] WPFGroupBox grpGlobalOptimumResults
				[ ] locator "//WPFGroupBox[@automationId='Template_GroupBox']"
				[+] WPFControl dlgDataGrid
					[ ] locator "//WPFControl[@automationId='PART_DataGrid']"
			[ ] //Result-->TPQLV tab
			[+] wcAPWPFComboBox cboCaseNo
				[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
			[ ] 
			[ ] //Blocks-->COMPR-->Specifications
			[+] WPFControl cboType
				[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
				[ ] 
			[ ] 
			[ ] //Blocks-->COMPR-->Integration Parameters
			[+] WPFGroupBox grpIntegrationMethod
				[ ] locator "//WPFGroupBox[@caption='Integration method']"
				[+] wcAPWPFComboBox cboMethod
					[ ] locator "//WPFControl[@automationId='MMComboEdit_1']"
			[+] WPFGroupBox grpIntegrationSteps
				[ ] locator "//WPFGroupBox[@caption='Integration steps']"
				[+] WPFRadioButton rdEqualPressureChange
					[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_1']"
			[ ] 
			[ ] //Blocks-->COMPR-->Performance Curve
			[+] WPFRadioButton rdlMultipleCurvesAtDifferentSpeeds
				[ ] locator "(@automationId='PART_RadioButton' and @caption='Multiple curves at different speeds')"
			[+] WPFButton btnHeadCeffVsFlowTablesSelectAll
				[ ] locator "[@automationId='SelectAll'][1]"
			[+] wcAPWPFComboBox cboCurveNo
				[ ] locator "@automationId='MMComboEdit_20'"
			[ ] 
			[ ] //Blocks-->MCOMPR-->Configuration
			[+] WPFGroupBox grpCompressorModel
				[ ] locator "//WPFGroupBox[@caption='Compressor model']"
				[ ] 
				[ ] 
				[+] WPFRadioButton rdlIsentropic
					[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_1']"
				[+] WPFRadioButton rdlIsentropicASME
					[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_3']"
				[+] WPFRadioButton rdlIsentropicGPSA
					[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_5']"
				[+] WPFRadioButton rdlPolytropicASME
					[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_2']"
				[+] WPFRadioButton rdlPolytropicGPSA
					[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_4']"
				[+] WPFRadioButton rdlPositiveDisplacement
					[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_6']"
				[ ] 
			[ ] 
			[ ] //Blocks-->Solids
			[+] wcAPDataGrid dgDielectricConstant
				[ ] locator "//WPFControl[@automationId='PART_DataGrid']"
			[+] wcAPWPFComboBox cboSeparationEfficeiency
				[ ] locator "//WPFControl[@automationId='PART_editControl']"
			[+] wcAPWPFComboBox cboAtomizerType
				[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
			[+] wcAPDataGrid dgDryerInputAtomization
				[ ] locator "//WPFControl[@automationId='PART_DataGrid']"
			[+] wcAPDataGrid dgDryerResultsSummary
				[ ] locator "//WPFControl[@automationId='PART_DataGrid']"
			[+] wcAPWPFTextBox txDryerNumberofDropletIntervals
				[ ] locator "//WPFControl[@automationId='PART_editControl'][9]"
			[+] wcAPDataGrid dgDryerResultsProfiles
				[ ] locator "//WPFControl[@automationId='PART_DataGrid']"
			[+] wcAPWPFComboBox cboGasFlowDirection
				[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
			[+] wcAPWPFComboBox cboStreamResultsSolidsSubstream
				[ ] locator "//WPFControl[@automationId='PART_editControl']"
			[+] wcAPWPFComboBox cboStreamResultsSolidsView
				[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
			[+] wcAPDataGrid dgStreamResultsSolids
				[ ] locator "//WPFControl[@className='GridControl']"
			[+] WPFGroupBox grpFluidBedPSDCalcalationOption
				[ ] locator "//WPFGroupBox[@automationId='Template_GroupBox']"
				[+] WPFRadioButton rdUserspecifiedPSD
					[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_3']"
				[+] WPFRadioButton rdOverall
					[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_5']"
				[+] WPFRadioButton rdSubstreamID
					[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_6']"
			[+] WPFGroupBox grpUserspecifiedPSD
				[ ] locator "//WPFGroupBox[@caption='User-specified PSD']"
				[+] WPFRadioButton rbUserspecifiedPSD
					[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_Tabular']"
			[+] wcAPWPFComboBox cboGlobalPSDmesh
				[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
			[+] wcAPWPFComboBox cboFluidPSDDistributionID
				[ ] locator "//WPFControl[@automationId='PART_editControl'][3]"
			[+] wcAPWPFComboBox cboFluidPSDSelectParameters
				[ ] locator "//WPFControl[@automationId='PART_editControl'][6]"
			[+] wcAPWPFTextBox txbFluidPSDD63
				[ ] locator "//WPFControl[@automationId='PART_editControl'][7]"
			[+] wcAPWPFTextBox txbFluidPSDGGSDispersion
				[ ] locator "//WPFControl[@automationId='PART_editControl'][9]"
			[+] wcAPDataGrid  dgPSD
				[ ] locator "//WPFControl[@className='GridControl']"
			[ ] 
			[ ] 
			[ ] //Chemistry-->Global-->Specifications
			[+] WPFGroupBox grpSpecificationsChem
				[ ] locator "//WPFGroupBox[@caption='Specifications']"
				[+] wcAPWPFComboBox cboConcentrationBasis
					[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
				[+] wcAPWPFTextBox txbTemperatureApproachValue
					[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
				[+] wcAPWPFComboBox cboTemperatureApproachUnit
					[ ] locator "//WPFControl[@automationId='PART_editControl'][3]"
				[+] wcAPWPFComboBox cboHydrateCheck
					[ ] locator "//WPFControl[@automationId='PART_editControl'][4]"
				[+] wcAPWPFComboBox cboReferenceState
					[ ] locator "//WPFControl[@automationId='PART_editControl'][5]"
    
			[+] WPFGroupBox grpEquilibriumConstants
				[ ] locator "//WPFGroupBox[@caption='Equilibrium constants'][1]"
				[+] wcAPWPFComboBox cboReaction
					[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
				[+] wcAPWPFTextBox txbA
					[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
				[+] wcAPWPFTextBox txbB
					[ ] locator "//WPFControl[@automationId='PART_editControl'][3]"
				[+] wcAPWPFTextBox txbC
					[ ] locator "//WPFControl[@automationId='PART_editControl'][4]"
				[+] wcAPWPFTextBox txbD
					[ ] locator "//WPFControl[@automationId='PART_editControl'][5]"
				[+] wcAPWPFTextBox txbE
					[ ] locator "//WPFControl[@automationId='PART_editControl'][6]"
			[ ] 
			[ ] //Data
			[+] wcAPWPFComboBox cboCategory
				[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
			[+] wcAPWPFComboBox cboDataType
				[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
			[+] WPFGroupBox grpConstantTemperatureorPressure
				[ ] locator "//WPFGroupBox[@caption='Constant temperature or pressure']"
				[+] wcAPWPFTextBox txbTemperature
					[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
				[+] wcAPWPFComboBox cboTemperatureUnit
					[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
				[+] wcAPWPFTextBox txbPressure
					[ ] locator "//WPFControl[@automationId='PART_editControl'][3]"
				[+] wcAPWPFComboBox cboPressureUnit
					[ ] locator "//WPFControl[@automationId='PART_editControl'][4]"
			[+] WPFGroupBox grpComponentsInMixture
				[ ] locator "//WPFGroupBox[@caption='Components in mixture']"
				[+] WPFListBox lsbAvaiableComponents
					[ ] locator "//WPFListBox[1]"
				[+] WPFListBox lsbSelectedComponents
					[ ] locator "//WPFListBox[2]"
				[+] WPFButton btnMoveRight
					[ ] locator "//WPFButton[1]"
				[+] WPFButton btnMoveAllRight
					[ ] locator "//WPFButton[2]"
				[+] WPFButton btnMoveLeft
					[ ] locator "//WPFButton[3]"
				[+] WPFButton btnMoveAllLeft
					[ ] locator "//WPFButton[4]"
			[+] WPFButton btnGenerateData
				[ ] locator "//WPFButton[@caption='Generate Data...']"
			[+] WPFButton btnRetrieveTDEBinaryData
				[ ] locator "//WPFButton[@caption='Retrieve TDE Binary Data...']"
			[+] WPFButton btnClearData
				[ ] locator "//WPFButton[@caption='Clear Data']"
			[+] WPFControl txbDataType
				[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
			[+] wcAPWPFComboBox cboMeasurementMethod
				[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
			[+] WPFGroupBox grpEquipmentData
				[ ] locator "//WPFGroupBox[@caption='Equipment data']"
				[+] wcAPWPFTextBox txbCoefficientOfEvaporation
					[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
				[+] wcAPWPFTextBox txbEbulliometerConstant
					[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
				[+] wcAPWPFTextBox txbStaticCellConstant
					[ ] locator "//WPFControl[@automationId='PART_editControl'][3]"
				[+] wcAPWPFTextBox txbStaticCellVolume
					[ ] locator "//WPFControl[@automationId='PART_editControl'][4]"
				[+] wcAPWPFComboBox cboStaticCellVolumeUnit
					[ ] locator "//WPFControl[@automationId='PART_editControl'][5]"
					[ ] 
				[ ] 
			[ ] 
			[ ] 
			[ ] // Estimation-->...
			[+] WPFControl cboParameter
				[ ] locator "//WPFControl[@automationId='PART_editControl']"
			[+] WPFControl cboProperty
				[ ] locator "//WPFControl[@automationId='PART_editControl']"
			[ ] 
			[ ] //Estimation-->Input
			[+] WPFControl cboMethodBinary
				[ ] locator "//WPFControl[@className='AesXamComboEdit'][2]"
			[+] WPFButton btnNextBinary
				[ ] locator "//WPFButton[@caption='>']"
			[+] WPFControl cboComponenti
				[ ] locator "//WPFControl[@className='AesXamComboEdit'][4]"
			[+] WPFControl cboComponentj
				[ ] locator "//WPFControl[@className='AesXamComboEdit'][5]"
			[ ] 
			[ ] //Methods-->Selected Methods-->Method
			[+] WPFButton btnOptionCodes
				[ ] locator "//WPFButton[@caption='Option codes']"
			[ ] 
			[ ] 
			[ ] // //Model Analysis Tool-->Sensitivity
			[+] WPFButton btnHide
				[ ] locator "//WPFButton[@caption='Hide']"
			[ ] 
			[ ] //Resutls Summary-->Streams
			[+] WPFContentControl grpMaterialStreamResults
				[ ] locator "//WPFContentControl[@automationId='MMTabPage_1']"
				[+] wcAPWPFComboBox cboDisplay
					[ ] locator "//WPFControl[4]"
				[+] wcAPWPFComboBox cboFormat
					[ ] locator "//WPFControl[12]"
				[+] wcAPWPFComboBox cboStream1
					[ ] locator "//WPFControl[@automationId='PART_editControl'][3]"
				[+] wcAPWPFComboBox cboStream2
					[ ] locator  "//WPFControl[@automationId='PART_editControl'][4]"
				[+] wcAPWPFComboBox cboStream3
					[ ] locator  "//WPFControl[@automationId='PART_editControl'][5]"
				[+] wcAPWPFComboBox cboStream4
					[ ] locator  "//WPFControl[@automationId='PART_editControl'][6]"
				[+] wcAPWPFComboBox cboStream5
					[ ] locator  "//WPFControl[@automationId='PART_editControl'][7]"
				[+] wcAPWPFComboBox cboStream6
					[ ] locator  "//WPFControl[@automationId='PART_editControl'][8]"
				[+] WPFButton btnStreamTable
					[ ] locator "//WPFButton[1]"
				[+] WPFButton btnCopyAll
					[ ] locator "//WPFButton[2]"
				[+] WPFDataGridCell gdFirstGridCell
					[ ] locator "//WPFDataGridCell[@className='GridControlCell'][1]"
			[ ] 
			[ ] //Regression-->Regression-->Input
			[+] WPFGroupBox grpPropertyOptionsRegression
				[ ] locator "//WPFGroupBox[@caption='Property options']"
				[+] wcAPWPFComboBox cboMethod
					[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
				[+] wcAPWPFComboBox cboHenryComponents
					[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
				[+] wcAPWPFComboBox cboChemistryID
					[ ] locator "//WPFControl[@automationId='PART_editControl'][3]"
				[+] WPFCheckBox chkUseTrueComponents
					[ ] locator "//WPFCheckBox[1]"
			[+] WPFGroupBox grpParametersToBeRegressed
				[ ] locator "//WPFGroupBox[@caption='Parameters to be regressed']"
				[+] wcAPWPFComboBox cboType
					[ ] locator "//WPFControl[@className='AesXamComboEdit'][1]"
				[+] wcAPWPFComboBox cboName
					[ ] locator "//WPFControl[@className='AesXamComboEdit'][2]"
				[+] wcAPWPFComboBox cboComponent
					[ ] locator "//WPFControl[@className='AesXamComboEdit'][3]"
				[+] wcAPWPFComboBox cboGroup
					[ ] locator "//WPFControl[@className='AesXamComboEdit'][4]"
				[+] wcAPWPFComboBox cboUsage
					[ ] locator "//WPFControl[@className='AesXamComboEdit'][7]"
				[+] wcAPWPFComboBox cboSetAji
					[ ] locator "//WPFControl[@className='AesXamComboEdit'][8]"
				[+] wcAPWPFTextBox txbElement
					[ ] locator "//WPFControl[@className='AesXamValueEdit'][1]"
				[+] wcAPWPFTextBox txbIntialValue
					[ ] locator "//WPFControl[@className='AesXamValueEdit'][2]"
				[+] wcAPWPFTextBox txbLowerBound
					[ ] locator "//WPFControl[@className='AesXamValueEdit'][3]"
				[+] wcAPWPFTextBox txbUpperBound
					[ ] locator "//WPFControl[@className='AesXamValueEdit'][4]"
				[+] wcAPWPFTextBox txbScaleFactor
					[ ] locator "//WPFControl[@className='AesXamValueEdit'][5]"
				[ ] 
			[ ] 
			[ ] //Regression-->Regression-->Results
			[+] WPFButton btnDeviations
				[ ] locator "//WPFButton[@caption='Deviations']"
			[ ] 
			[ ] 
			[ ] //Streams-->Stream-->Input
			[+] WPFTabItem tbLoad
				[ ] locator "//WPFTabItem[@caption='Load']"
			[+] WPFControl NumOfPoints
				[ ] locator "//WPFControl[@className='AesXamValueEdit']"
			[+] WPFTabControl tabctrlPFS
				[+] locator "//WPFTabControl[@automationId='PART_TabControl']"
					[+] WPFControl cboEdit1
						[ ] locator "//WPFControl[@className='AesXamComboEdit' or @className='AesXamComboEdit'][1]"
					[+] WPFControl cboEdit2
						[ ] locator "//WPFControl[@className='AesXamComboEdit'][2]"
					[+] WPFControl cboEdit3
						[ ] locator "//WPFControl[@className='AesXamComboEdit'][3]"
					[+] WPFControl cboEdit4
						[ ] locator "//WPFControl[@className='AesXamComboEdit'][4]"
					[+] WPFControl cboEdit5
						[ ] locator "//WPFControl[@className='AesXamComboEdit'][5]"
					[+] WPFControl cboEdit6
						[ ] locator "//WPFControl[@className='AesXamComboEdit'][6]"
					[+] WPFControl cboEdit7
						[ ] locator "//WPFControl[@className='AesXamComboEdit'][7]"
					[+] WPFControl cboEdit8
						[ ] locator "//WPFControl[@className='AesXamComboEdit'][8]"
					[+] WPFControl cboEdit9
						[ ] locator "//WPFControl[@className='AesXamComboEdit'][9]"
						[ ] 
					[+] WPFControl cboEdit10
						[ ] locator "//WPFControl[@className='AesXamComboEdit'][10]"
					[+] WPFControl txtBlockID1
						[ ] locator "//WPFControl[@className='AesXamValueEdit'][1]"
					[ ] 
					[+] WPFControl txtBlockID2
						[ ] locator "//WPFControl[@className='AesXamValueEdit'][2]"
						[ ] 
					[ ] //WPFTextBlock[(@automationId='TextBlock' and @caption='B1')]
					[ ] //WPFTextBlock[@caption='B1']
			[+] WPFGroupBox grpComposition
				[ ] locator "//WPFGroupBox[@caption='Composition']"
				[+] wcAPDataGrid dgComponentGrid
					[ ] locator "//WPFControl[@automationId='PART_DataGrid']"
				[+] wcAPWPFComboBox cboCompositionType
					[ ] locator "//WPFControl[@automationId='PART_BasisEdit'][1]"
				[+] wcAPWPFComboBox cboCompUnit
					[ ] locator "//WPFControl[@automationId='PART_UnitEdit'][1]"
				[ ] 
			[+] WPFGroupBox grpStateVariables
				[ ] locator "//WPFGroupBox[@caption='State variables']"
				[+] wcAPWPFTextBox txbTemperature
					[ ] locator "//WPFControl[@automationId='textBox']"
				[+] wcAPWPFComboBox cboTemperatureUnit
					[ ] locator "//WPFControl[@automationId='PART_UnitEdit']"
				[+] wcAPWPFTextBox txbPressure
					[ ] locator "//WPFControl[@automationId='textBox'][2]"
				[+] wcAPWPFComboBox cboPressureUnit
					[ ] locator "//WPFControl[@automationId='PART_UnitEdit'][2]"
				[+] wcAPWPFTextBox txbVaporFraction
					[ ] locator "//WPFControl[@automationId='PART_editControl'][7]"
				[+] wcAPWPFComboBox cboTotalFlowBasis
					[ ] locator "//WPFControl[@automationId='MMVariableEdit_3']"
				[+] wcAPWPFTextBox txbTotalFlowRate
					[ ] locator "//WPFControl[@automationId='textBox'][3]"
				[+] wcAPWPFComboBox cboTotalFlowRateUnit
					[ ] locator "//WPFControl[@automationId='PART_UnitEdit'][3]"
				[+] wcAPWPFComboBox cboSolvent
					[ ] locator "//WPFControl[@automationId='PART_editControl'][11]"
				[+] wcAPWPFComboBox	cboSubstreamName
					[ ] locator "//WPFControl[@automationId='MMAdvancedComboEdit_1']"
			[+] WPFToggleButton	btnToggleBtnParticleSizeDistribution
				[ ] locator "//WPFToggleButton[@caption='Particle Size Distribution']"
			[ ] 
			[ ]        //Stream/Input/Mixed page
			[+] WPFControl txtFlashType1
				[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
			[+] WPFControl txtFlashType2
				[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
			[+] WPFControl txtStateVariablesTemperatureValue
				[ ] locator "//WPFControl[@automationId='PART_editControl'][3]"
			[+] WPFControl txtStateVariablesTemperatureUnit
				[ ] locator "//WPFControl[@automationId='PART_editControl'][4]"
			[+] WPFControl txtStateVariablesPressureValue
				[ ] locator "//WPFControl[@automationId='PART_editControl'][5]"
			[+] WPFControl txtStateVariablesPressureUnit
				[ ] locator "//WPFControl[@automationId='PART_editControl'][6]"
			[+] WPFControl txtStateVariablesVaporFraction
				[ ] locator "//WPFControl[@automationId='PART_editControl'][7]"
			[+] WPFControl txtStateVariablesTotalFlowBasis
				[ ] locator "//WPFControl[@automationId='PART_editControl'][8]"
			[+] WPFControl txtStateVariablesTotalFlowRateValue
				[ ] locator "//WPFControl[@automationId='PART_editControl'][9]"
			[+] WPFControl txtStateVariablesTotalFlowRateUnit
				[ ] locator "//WPFControl[@automationId='PART_editControl'][10]"
			[+] WPFControl txtStateVariablesSolvent
				[ ] locator "//WPFControl[@automationId='PART_editControl'][11]"
			[+] WPFControl txtCompositionFlowType
				[ ] locator "//WPFControl[@automationId='PART_editControl'][12]"
			[+] WPFControl txtCompositionFlowUnit
				[ ] locator "//WPFControl[@automationId='PART_editControl'][13]"
				[ ] 
				[ ] 
			[+] WPFControl txtCompositionComponent1
				[ ] locator "//GridControlCell[@className='GridControlCell'][1]"
			[+] WPFControl txtCompositionValue1
				[ ] locator "//WPFDataGridCell[@className='GridControlCell'][2]"
			[+] WPFControl txtCompositionComponent2
				[ ] locator "//WPFDataGridCell[@className='GridControlCell'][3]"
			[+] WPFControl txtCompositionValue2
				[ ] locator "//WPFDataGridCell[@className='GridControlCell'][4]"
			[+] WPFControl txtCompositionComponent3
				[ ] locator "//WPFDataGridCell[@className='GridControlCell'][5]"
			[+] WPFControl txtCompositionValue3
				[ ] locator "//WPFDataGridCell[@className='GridControlCell'][6]"
			[+] WPFControl txtCompositionComponent4
				[ ] locator "//WPFDataGridCell[@className='GridControlCell'][7]"
			[+] WPFControl txtCompositionValue4
				[ ] locator "//WPFDataGridCell[@className='GridControlCell'][8]"
			[+] WPFControl txtCompositionComponent5
				[ ] locator "//WPFDataGridCell[@className='GridControlCell'][9]"
			[+] WPFControl txtCompositionValue5
				[ ] locator "//WPFDataGridCell[@className='GridControlCell'][10]"
				[ ] 
				[ ] 
			[ ] 
			[ ] 
			[ ] //Setup-->Stream Class
			[+] WPFTabItem tbLoadStreams
				[ ] locator "//WPFTabItem[@caption='Load Streams']"
			[+] WPFGroupBox grpSelectLoadStreams
				[ ] locator "//WPFGroupBox[@caption='Select load streams from available heat streams']"
				[+] WPFListBox lbAvailableHeatStreams
					[ ] locator "//WPFListBox[@automationId='Part_OptionsBox']"
				[+] WPFListBox lbSelectedLoadStreams
					[ ] locator "//WPFListBox[@automationId='Part_SelectionBox']"
				[+] WPFButton btnMoveRight
					[ ] locator "//WPFButton[@automationId='Move Right']"
			[ ] 
			[ ] //Setup-->Specifications
			[+] wcAPWPFTextBox txbTitle
				[ ] // locator "//WPFTextBox[@automationId='PART_TextBox']"
				[ ] locator "//WPFControl[@automationId='MMVariableEdit_1']"
			[ ]         //Description tab
			[+] WPFTextBox txbDescription
				[ ] // locator "//WPFRichTextBox[@automationId='PART_editControl']"
				[ ] locator "//WPFTextBox[@automationId='PART_editControl']"
			[ ]   
			[ ]     //Diagnostics
			[+] WPFSlider sliderSetUpDiagnosticsSimulationTop
				[ ] locator "//WPFSlider[@automationId='PART_slider'][3]"
			[+] WPFSlider sliderSetUpDiagnosticsSimulationBottom
				[ ] locator "//WPFSlider[@automationId='PART_slider'][4]"
			[ ] 
			[ ] 
			[ ] 
			[ ] //Setup-->Stream Price-->EO Variables
			[+] WPFControl ctlTabs
				[ ] locator "//WPFControl[@className='DocumentContentHost']"
			[+] WPFDataGrid dgDataGridEOVar
				[ ] locator "//WPFDataGrid[@automationId='PART_DataGrid']"
				[ ] 
				[ ] 
			[ ] 
			[ ] //Setup-->Calculation Options-->Flash COnvergence
			[+] WPFControl cboFlashConvergenceAlgorithm
				[ ] locator "//WPFControl[@automationId='PART_editControl'][12]"
			[ ] 
			[ ] //Setup-->Calculation Options-->Calculations
			[+] WPFGroupBox grpCalculationOptionsInSetup
				[ ] locator "//WPFGroupBox[@automationId='Template_GroupBox']"
				[+] wcAPWPFComboBox cboStandardForGlobalWarming
					[ ] locator "//WPFControl[@automationId='MMComboEdit_2']"
			[ ] 
			[ ] 
			[ ] //Setup--> Report Options
			[+] WPFCheckBox chkSummaryOfUserInput
				[ ] locator "//WPFCheckBox[@automationId='PART_CheckBox'][2]"
			[ ] 
			[ ] //Configuration Tab page in PFS Areas
			[+] WPFControl editNumberOfStage
				[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
			[+] WPFControl editCondenser
				[ ] locator "//WPFControl[@automationId='PART_editControl'][3]"
			[+] WPFControl editReboiler
				[ ] locator "//WPFControl[@automationId='PART_editControl'][4]"
			[+] WPFControl editValidPhases
				[ ] locator "//WPFControl[@automationId='PART_editControl'][5]"
			[+] WPFControl editConvergence
				[ ] locator "//WPFControl[@automationId='PART_editControl'][6]"
				[ ] 
			[+] WPFControl editRow1Rate
				[ ] locator "//WPFControl[@automationId='PART_editControl'][7]"
			[+] WPFControl editRow1CountType
				[ ] locator "//WPFControl[@automationId='PART_editControl'][8]"
			[+] WPFControl editRow1Value
				[ ] locator "//WPFControl[@automationId='PART_editControl'][9]"
			[+] WPFControl editRow1Unit
				[ ] locator "//WPFControl[@automationId='PART_editControl'][10]"
				[ ] 
			[+] WPFControl editRow2Rate
				[ ] locator "//WPFControl[@automationId='PART_editControl'][11]"
			[+] WPFControl editRow2CountType
				[ ] locator "//WPFControl[@automationId='PART_editControl'][12]"
			[+] WPFControl editRow2Value
				[ ] locator "//WPFControl[@automationId='PART_editControl'][13]"
			[+] WPFControl editRow2Unit
				[ ] locator "//WPFControl[@automationId='PART_editControl'][14]"
				[ ] 
			[+] WPFGroupBox grpFeedStream
				[ ] locator "//WPFGroupBox[@caption='Feed streams']"
				[+] WPFControl editFeedStreamRow1Stage
					[ ] locator "//WPFControl[@className='AesXamValueEdit'][2]"
				[+] WPFControl editFeedStreamRow2Stage
					[ ] locator "//WPFControl[@className='AesXamValueEdit'][5]"
					[ ] 
			[ ] 
			[ ] //Stream Tab page in PFS Areas
			[+] WPFToggleButton togbtnView
				[ ] locator "//WPFToggleButton[@automationId='PART_DropDownButton'][1]"
			[+] wcAPWPFComboBox cboView
				[ ] // locator "//WPFComboBox[@automationId='PART_FocusSite']"
				[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
			[ ] //Pressure Profile
			[+] WPFControl editPressureProfileUnit
				[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
			[+] WPFControl editPressureProfileRow1Stage
				[ ] locator "//WPFControl[@className='AesXamValueEdit'][1]"
			[+] WPFControl editPressureProfileRow1Pressure
				[ ] locator "//WPFControl[@className='AesXamValueEdit'][2]"
			[ ] //Top/Bottom
			[+] WPFControl editTopBottomTopStageCondenserPressure
				[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
			[+] WPFControl editTopBottomTopStageCondenserPressureUnit
				[ ] locator "//WPFControl[@automationId='PART_editControl'][3]"
				[ ] 
			[ ] 
			[ ] //EO Configuration-->EO Options
			[+] WPFGroupBox grpGlobalequation_orientedoptions
				[+] wcAPWPFComboBox cboRemovecomponents
					[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
			[ ] 
			[ ] //EO Configuration-->Objectives
			[+] wcAPDataGrid dgDataGrid
				[ ] locator "//WPFControl[@automationId='PART_DataGrid']"
			[+] WPFButton btnEdit
				[ ] locator "//WPFButton[@caption='Edit']"
			[+] WPFControl cboOptimization
				[+] locator "//WPFControl[@automationId='PART_editControl'][2]"
					[+] WPFComboBoxItem PROFCUS
						[ ] locator "//WPFComboBoxItem[@caption='PROF-CUS']"
					[+] WPFComboBoxItem PROFLIN
						[ ] locator "//WPFComboBoxItem[@caption='PROF-LIN']"
				[ ] SetFunctionType(STRING sType)
			[ ] 
			[ ] //EO Configuration-->EO Variables
			[+] WPFTabItem tabiDefault
				[ ] locator "//WPFTabItem[@caption='Default']"
				[ ] 
			[+] WPFDataGridColumnHeader ColHIndex
				[ ] locator "//WPFDataGridColumnHeader[2]"
			[+] WPFDataGridColumnHeader ColHVariables
				[ ] locator "//WPFDataGridColumnHeader[3]"
			[ ] 
			[ ] //EO Configuration-->EO Sensitivity
			[+] WPFButton btnCalculateSensitivity
				[ ] locator "//WPFButton[@automationId='av_Button_1']"
			[ ] 
			[ ] 
			[ ] //EO Configuration-->Connect
			[+] wcAPDataGrid dgConfiguration
				[ ] locator "//WPFControl[@automationId='PART_DataGrid']"
			[+] WPFRepeatButton btnZoomOut
				[ ] locator "//WPFRepeatButton[@automationId='PART_ZoomOutButton']"
			[+] WPFRepeatButton btnZoomIn
				[ ] locator "//WPFRepeatButton[@automationId='PART_ZoomInButton']"
			[ ] 
			[ ] 
			[ ] //EO Configuration-->Spec Groups
			[+] WPFButton  btnMoveDown
				[ ] locator "//WPFButton[@caption='Move Down']"
			[ ] 
			[ ] 
			[ ] //Control Panel
			[+] WPFToggleButton togbtnCalculationSequence
				[ ] locator "//WPFToggleButton[@caption='Hide sequence' or @caption='Show sequence']"
			[+] WPFRichTextBox	rtxtMessageView
				[ ] locator "//WPFRichTextBox[@automationId='messageView']"
				[+] LIST OF STRING GetText()
					[+] // if !this.Exists()
						[ ] // this.OpenControlPanel()
					[ ] Clipboard.SetText()
					[ ] this.SetFocus()
					[ ] sleep(0.25)
					[ ] this.SelectAll()
					[ ] sleep(0.25)
					[ ] this.Copy()
					[ ] sleep(0.25)
					[ ] return Clipboard.GetText()
					[ ] 
				[+] boolean FindStr(string sPattern)
					[ ] int i
					[ ] boolean bRev = false
					[ ] list of string lsResults = this.GetText()
					[+] for (i = 1; i <= listcount(lsResults); ++i)
						[+] if MatchStr(sPattern,lsResults[i])
							[ ] bRev = True
							[ ] break
					[ ] 
					[ ] return bRev
				[+] boolean FindMultiText(List of string lsVerify)
					[ ] int i,j
					[ ] boolean bRev = false
					[ ] list of STRING lsFounds ={}
					[ ] list of string lsResults = this.GetText()
					[+] for (i = 1; i <= listcount(lsResults); ++i)
						[+] for(j=1;j<= listcount(lsVerify);j++)
							[+] if MatchStr("*{lsVerify[j]}*",lsResults[i])
								[ ] ListAppend(lsFounds,lsVerify[j])
								[ ] StdList.Unique(lsFounds)
					[ ] 
					[+] if listcount(lsFounds)==listcount(lsVerify)
						[ ] bRev = true
						[ ] Log.Pass("Find the following texts in Control Panel")
						[ ] ListPrint(lsFounds)
						[ ] 
					[ ] return bRev
					[ ] 
				[+] void printControlPanelContents()
					[ ] string line
					[ ] list of string output = this.GetText()
					[+] for each line in output
						[ ] Print(line)
			[+] WPFTabItem tabControlPanel
				[ ] locator "//WPFTabItem[@caption='Control Panel Control Panel']"
			[+] WPFToggleButton togbtnExpander
				[ ] locator "//WPFToggleButton[@automationId='HeaderSite']"
			[+] WPFTextBox txtCommandLine
				[ ] locator "//WPFTextBox[@automationId='tbCommandLine']"
			[ ] 
			[+] //Flowsheet
				[ ] //Flowsheet-->Section-->GLOBAL
			[+] WPFMenuItem miInput
				[ ] locator "//WPFMenuItem[@caption='_Input...']"
			[+] wcAPDataGrid dgBlocks
				[ ] locator "//WPFControl[@automationId='PART_DataGrid']"
				[+] wcAPWPFTextBox txtBlockName
					[ ] locator "//WPFContentControl[@className='CellValuePresenter'][1]"
				[+] wcAPWPFComboBox cboModeType
					[ ] locator "//WPFContentControl[@className='CellValuePresenter'][2]"
			[+] WPFHeaderedContentControl mainFlowSheetArea
				[ ] locator"//WPFHeaderedContentControl[@automationId='FlowsheetScreenFactory']"
				[ ] 
			[+] WPFMenuItem miImportRC
				[ ] locator "//WPFMenuItem[@caption='I_mport...']"
			[+] WPFMenuItem miRenameBlock
				[ ] locator "//WPFMenuItem[@caption='Re_name Block']"
			[+] WPFMenuItem miMoveSelectionRC
				[ ] locator "//WPFMenuItem[@caption='Move Selection...']"
			[+] WPFTabItem tbMainFlowsheet
				[ ] locator "//WPFTabItem[@caption='Main Flowsheet*']"
			[+] WPFTabItem tbStartPage
				[ ] locator "//WPFTabItem[@caption='Start Page']"
			[+] WPFMenu mnuFilesMenu
				[ ] locator "//WPFMenu[@automationId='filesMenu']"
				[+] WPFMenuItem mniFilesMenuItem
					[ ] locator "//WPFMenuItem[@automationId='PART_FilesMenuItem']"
			[+] WPFButton btnCollapseAll
				[ ] locator "//WPFButton[@caption='Collapse All']"
			[+] WPFContextMenu contextMenu
				[ ] locator "//WPFContextMenu[@className='ContextMenuExtender']"
				[+] WPFMenuItem	mniConvertTo
					[ ] locator "//WPFMenuItem[@automationId='Menu_8460']"
				[+] WPFMenuItem	mniReconcile
					[ ] locator "//WPFMenuItem[@automationId='Menu_8455']"
			[-] FormsHost areaForMainFlowsheet
				[ ] locator "//FormsHost[1]"
			[ ] 
			[ ] //Ternary Maps
			[+] WPFHeaderedContentControl grpTernaryMaps
				[ ] locator "//WPFHeaderedContentControl[@automationId='TernaryMaps']"
				[+] WPFTabControl tbleftTabCtrl
					[ ] locator "//WPFTabControl[@automationId='leftTabCtrl']"
					[+] WPFTreeView trviExplorerTree
						[ ] locator "//WPFTreeView[@automationId='explorerTree']"
						[+] void Click(string sItem)
							[ ] 
							[ ] integer i
							[ ] window trvItem
							[ ] // 
							[ ] // this.Select(sItem)
							[ ] list of string lstr = glCastStrToList(sItem, "/")
							[ ] trvItem = this.Find("//WPFTreeViewItem[@caption='{lstr[1]}']")
							[+] for (i=2; i<=ListCount(lstr); i++)
								[ ] 
								[ ] trvItem = trvItem.Find("//WPFTreeViewItem[@caption='{lstr[i]}']")
								[ ] 
							[ ] trvItem.SetFocus()
							[ ] trvItem.Select()
							[ ] trvItem.Click()
						[ ] 
			[ ] 
			[ ] //Right Click Menu EO TAB
			[+] WPFMenuItem miEnterQuery
				[ ] locator "//WPFMenuItem[@automationId='av_MenuItem_10']"
			[ ] 
			[ ] //Methods-->Components-->Global
			[+] wcAPWPFComboBox cboMethodName
				[ ] locator "//WPFControl[@automationId='PART_editControl'][7]"
			[+] WPFControl cboBaseMethod
				[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
				[ ] 
				[+] WPFComboBoxItem cbiIDEAL
					[ ] locator"//WPFComboBoxItem[@caption='IDEAL']"
				[ ] 
			[+] WPFButtonBase btnCleanParameters
				[ ] locator "//WPFButtonBase[@automationId='igRibbon_btnMethod_CleanParameters']"
			[+] WPFButtonBase btnCleanParameters_APR
				[ ] locator "//WPFButtonBase[@automationId='igRibbon_btnMethod_CleanParameters']"
			[ ] 
			[ ] //Methods-->Specifications
			[+] WPFButton btnMethodsAssistant
				[ ] locator "//WPFButton[@automationId='PART_BUTTON']"
			[+] wcAPWPFComboBox cboMethods
				[ ] // locator "//WPFControl[@automationId='PART_editControl'][2]"
				[ ] locator "//WPFControl[@automationId='PART_editControl'][7]"
			[+] WPFToggleButton togbtnMethods
				[ ] locator "//WPFToggleButton[@automationId='PART_DropDownButton'][6]"
			[+] WPFGroupBox grpPropertyMethods
				[ ] locator "//WPFGroupBox[@caption='Property methods & options']"
				[+] wcAPWPFComboBox cboBaseMethod
					[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
			[ ] 
			[ ] //Methods-->Specifications-->Referenced
			[+] WPFGroupBox grpPropertyMethodsForBlocks
				[ ] locator "//WPFGroupBox[@automationId='Template_GroupBox']"
				[+] WPFButton btnMoveRight
					[ ] locator "//WPFButton[@automationId='Move Right']"
				[+] WPFListBox lbAvailableMethods
					[ ] locator "//WPFListBox[@automationId='Part_OptionsBox']"
				[+] WPFListBox lbReferencedMethods
					[ ] locator "//WPFListBox[@automationId='Part_SelectionBox']"
				[+] WPFListBoxItem lsiPengRob
					[ ] locator "//WPFListBoxItem[@caption='PENG-ROB']"
			[ ] 
			[ ] //Methods-->Selected Methods-->
			[+] WPFGroupBox grpModels
				[ ] locator "//WPFGroupBox[@automationId='Template_GroupBox']"
				[+] WPFButton btnOptionCodes
					[ ] locator "//WPFButton[@caption='Option codes']"
			[ ] 
			[ ] //Component-->Specification
			[+] WPFTabItem tbComponentsSpec
				[ ] locator "//WPFTabItem[@caption='Components - Specifications*']"
			[+] WPFButton btnElecWizard
				[ ] locator "//WPFButton[@caption='Elec Wizard']"
			[+] WPFButton btnUserDefined
				[ ] locator "//WPFButton[@caption='User Defined']"
			[+] WPFButton btnFind
				[ ] locator "//WPFButton[@caption='Find']"
				[ ] 
			[+] wcAPDataGrid dgComponents
				[ ] locator "//WPFControl[@automationId='PART_DataGrid'] "
			[ ] 
			[ ] 
			[ ] //Enterprise Database Tab
			[+] WPFGroupBox grpSelectedDatabanks
				[ ] // locator "//WPFGroupBox[@caption='Selected databanks:']"
				[ ] locator "//WPFGroupBox[@automationId='Template_GroupBox']"
				[+] WPFListBox lstSelectedDataBanks
					[ ] locator "//WPFListBox[@automationId='Part_SelectionBox']"
					[+] BOOLEAN isItemExist(string sItemText)
						[+] do
							[+] if(this.Find("//WPFListBoxItem[@caption='{sItemText}']").Exists())
								[ ] return true
							[+] else
								[ ] return false
						[+] except
							[ ] return false
			[+] WPFButtonBase btnDECHEMA
				[ ] locator "//WPFButtonBase[@caption='DECHEMA']"
			[+] WPFListBox lsbAvailableDataBanks
				[ ] locator "//WPFListBox[@automationId='Part_OptionsBox']"
				[ ] 
				[+] list of string GetContents()
					[ ] 
					[ ] integer i
					[ ] list of string lsResult = derived::GetContents()
					[ ] 
					[+] for (i=1; i<=ListCount(lsResult); i++)
						[ ] 
						[ ] lsResult[i] = StrTran(lsResult[i], "[WPFListBoxItem]",  "")
						[ ] 
					[ ] return lsResult
					[ ] 
					[ ] 
				[ ] 
				[ ] 
			[+] WPFListBox lsbSelectedDataBanks
				[ ] locator "//WPFListBox[@automationId='Part_SelectionBox']"
				[ ] 
				[+] list of string GetContents()
					[ ] 
					[ ] integer i
					[ ] list of string lsResult = derived::GetContents()
					[ ] 
					[+] for (i=1; i<=ListCount(lsResult); i++)
						[ ] 
						[ ] lsResult[i] = StrTran(lsResult[i], "[WPFListBoxItem]",  "")
						[ ] 
					[ ] return lsResult
					[ ] 
					[ ] 
				[ ] 
			[+] WPFButton btnMoveRight
				[ ] locator "//WPFButton[@automationId='Move Right']"
				[ ] 
			[+] WPFButton btnMoveAllRight
				[ ] locator "//WPFButton[@automationId='*AddAll']"
				[ ] 
			[+] WPFButton btnMoveLeft
				[ ] locator "//WPFButton[@automationId='Move Left']"
				[ ] 
			[+] WPFButton btnMoveAllLeft
				[ ] locator "//WPFButton[@automationId='*RemoveAll']"
				[ ] 
			[ ] 
			[ ]  //Analysis -->BINRY-1 --> Input
			[+] WPFControl cboAnalysisType
				[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
			[+] WPFControl cboComponent1
				[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
			[+] WPFControl cboComponent2
				[ ] locator "//WPFControl[@automationId='PART_editControl'][3]"
			[+] WPFControl cboBasis
				[ ] locator "//WPFControl[@automationId='PART_editControl'][4]"
			[+] WPFControl cboVary
				[ ] locator "//WPFControl[@automationId='PART_editControl'][5]"
			[+] WPFControl txtLowerLimitBA
				[ ] locator "//WPFControl[@automationId='PART_editControl'][6]"
			[+] WPFControl txtUpperLimitBA
				[ ] locator "//WPFControl[@automationId='PART_editControl'][7]"
			[+] WPFControl cboNumberOfPoints
				[ ] locator "//WPFControl[@automationId='PART_editControl'][8]"
			[+] WPFControl cboValidPhases
				[ ] locator "//WPFControl[@automationId='PART_editControl'][10]"
			[+] WPFControl txtPressureConditions
				[ ] locator "//WPFControl[@automationId='PART_DataGrid'][2]//WPFControl[@className='AesXamValueEdit'][1]"
			[+] WPFControl cboPropertyMethod
				[ ] locator "//WPFGroupBox[@caption='Property options']//WPFControl[@automationId='PART_editControl'][1]"
			[+] WPFControl cboHenryComponents
				[ ] locator "//WPFGroupBox[@caption='Property options']//WPFControl[@automationId='PART_editControl'][2]"
			[+] WPFControl cboChemistryID
				[ ] locator "//WPFGroupBox[@caption='Property options']//WPFControl[@automationId='PART_editControl'][3]"
			[+] WPFControl cboCalculationApproach
				[ ] locator "//WPFGroupBox[@caption='Property options']//WPFControl[@automationId='PART_editControl'][4]"
				[ ] 
			[ ] 
			[+] WPFButton btnRunAnalysis
				[ ] locator "//WPFButton[@caption='Run Analysis' or @automationId='PART_BUTTON']"
			[ ] 
			[ ] //Flowsheeting Options/Design Specs/.../Input/
			[+] WPFControl grpDefineSampledVariables
				[ ] locator "//WPFControl[@automationId='MMExpander_1']"
				[+]  WPFControl btnPaste
					[ ] locator "//WPFControl[@automationId='cmdPaste']"
			[+] WPFGroupBox grpCategory
				[ ] locator "//WPFGroupBox[@caption='Category']"
				[+] WPFRadioButton rdAll
					[ ] locator "//WPFRadioButton[1]"
				[+] WPFRadioButton rdBlocks
					[ ] locator "//WPFRadioButton[4]"
				[+] WPFRadioButton rdStreams
					[ ] locator "//WPFRadioButton[6]"
				[+] WPFRadioButton rdModelUtility
					[ ] locator "//WPFRadioButton[8]"
				[+] WPFRadioButton rdPhysicalPropertyParameters
					[ ] locator "//WPFRadioButton[10]"
				[+] WPFRadioButton rdReactions
					[ ] locator "//WPFRadioButton[12]"
			[+] WPFGroupBox grpReference
				[ ] locator "//WPFGroupBox[@caption=' Reference ']"
				[ ] string sLocator = ""
				[+] wcAPWPFComboBox cboOption
					[ ] locator sLocator
				[+] wcAPWPFTextBox txbOption
					[ ] locator sLocator
				[+] void setOption(string value, boolean comboBox, int position)
					[ ] sLocator = "//WPFControl[@automationId='PART_editControl'][{position}]"
					[+] if( comboBox)
						[ ] this.cboOption.Select(value)
					[+] else
						[ ] this.txbOption.InputText(value)
				[+] WPFButton btnBrowse
					[ ] locator "//WPFButton[1]"
			[+] WPFGroupBox grpEOInput
				[ ] locator "//WPFGroupBox[@caption='EO input']"
				[+] wcAPWPFTextBox txbOpenVariable
					[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
				[+] wcAPWPFTextBox txbDescription
					[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
				[+] WPFButton btnBrowseVariable
					[ ] locator "//WPFButton[@automationId='PART_browse']"
				[ ] 
				[ ] 
			[+] WPFGroupBox grpManipulatedVariables
				[ ] locator "//WPFGroupBox[@caption='Manipulated variable']"
				[ ] string sLocator = ""
				[+] wcAPWPFComboBox cboOption
					[ ] locator sLocator
				[+] wcAPWPFTextBox txbOption
					[ ] locator sLocator
				[+] void setOption(string value, boolean comboBox, int position)
					[ ] sLocator = "//WPFControl[@automationId='PART_editControl'][{position}]"
					[+] if( comboBox)
						[ ] this.cboOption.Select(value)
					[+] else
						[ ] this.txbOption.InputText(value)
				[+] WPFButton btnBrowse
					[+] locator "//WPFButton[1]"
						[ ] 
			[ ] 
			[ ] 
			[+] WPFTabItem tbVary
				[ ] locator "//WPFTabItem[@automationId='MMTabItem_3']"
			[+] WPFTabItem tbFortran
				[ ] locator "//WPFTabItem[@className='MMTabItem' and @caption='*Fortran*']"
			[+] WPFTextBox txtMMFortran
				[ ] locator "//WPFControl[@className='MMFortran']//WPFTextBox[@automationId='PART_TextBoxControl']"
			[+] WPFImage imgSearch
				[ ] // locator "[3]"
				[ ] locator "//WPFControl[@automationId='MMFindButton_3']"
			[+] WPFButton btnSearcher
				[ ] locator "//WPFGroupBox[@caption='Manipulated variable']//WPFButton[1]"
			[+] WPFControl cboVariable
				[ ] locator "WPFLabel[@caption='Variable:']/../../../WPFControl[@automationId='MMComboEdit_3']/WPFContentControl"
				[ ] 
				[ ] 
			[+] WPFButtonBase btnReveal
				[ ] locator "//WPFButton[@caption='Reveal']"
			[ ] 
			[ ] //Flowsheeting Options/Add Input
			[+] WPFContentControl grpEnterAnyAdditionalAspenPlusInput
				[ ] locator "//WPFContentControl[@caption='Enter any additional Aspen Plus input language*'][4]"
				[+] WPFTextBox txbEnterInput
					[ ] locator "//WPFTextBox[@automationId='PART_editControl']"
				[ ] 
			[ ] 
			[ ] 
			[ ] //Results Summary-->Streams
			[+] WPFButton btnStreamTable
				[ ] locator "//WPFButton[@caption='Stream Table']"
			[+] WPFControl cbosetFirstStream
				[ ] locator "//WPFControl[@automationId='PART_editControl'][3]"
			[+] WPFControl cbosetSecondStream
				[ ] locator "//WPFControl[@automationId='PART_editControl'][4]"
			[+] WPFDataGrid dgStreamResults
				[ ] locator "//WPFDataGrid[@automationId='PART_DataGrid']"
			[ ] 
			[ ] 
			[ ] //Results Summary-->Run Status-->Summary
			[+] WPFContentControl grpRunStatusSummary
				[ ] locator "//WPFContentControl[@automationId='MMTabPage_1']"
				[+] wcAPWPFTextBox txbStatus1
					[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
				[+] wcAPWPFTextBox txbStatus2
					[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
				[+] wcAPWPFTextBox txbAspenPlusVersion
					[ ] locator "//WPFControl[@automationId='PART_editControl'][3]"
				[+] wcAPWPFTextBox txbTitle
					[ ] locator "//WPFControl[@automationId='PART_editControl'][4]"
				[+] wcAPWPFTextBox txbDateTime
					[ ] locator "//WPFControl[@automationId='PART_editControl'][5]"
				[+] wcAPWPFTextBox txbUserName
					[ ] locator "//WPFControl[@automationId='PART_editControl'][6]"
				[+] wcAPWPFTextBox txbSiteID
					[ ] locator "//WPFControl[@automationId='PART_editControl'][7]"
				[+] wcAPWPFTextBox txbMachineType
					[ ] locator "//WPFControl[@automationId='PART_editControl'][8]"
				[+] wcAPWPFTextBox txbHostComputer
					[ ] locator "//WPFControl[@automationId='PART_editControl'][9]"
					[ ] 
					[ ] 
				[+] WPFRichTextBox tbAspenPlusmessages
					[ ] locator "//WPFRichTextBox[@automationId='PART_editControl']"
			[ ] 
			[ ] //Results Summary-->Streams (Custom)
			[+] WPFContextMenu ctmCustomStreamPageTabMenu
				[ ] locator "//WPFContextMenu[@automationId='av_ContextMenu_1']"
				[+] WPFMenuItem miAddNew
					[ ] locator "//WPFMenuItem[1]"
				[+] WPFMenuItem miCopy
					[ ] locator "//WPFMenuItem[2]"
				[+] WPFMenuItem miRename
					[ ] locator "//WPFMenuItem[3]"
				[+] WPFMenuItem miRemove
					[ ] locator "//WPFMenuItem[4]"
				[+] WPFMenuItem miChangeType
					[ ] locator "//WPFMenuItem[5]"
				[+] WPFMenuItem miEditView
					[ ] locator "//WPFMenuItem[6]"
					[ ] 
			[+] wcAPDataGrid dgResSumStreamsCustom
				[ ] locator "//WPFControl[@className='GridControl']"
			[+] WPFTabItem tbSheet1
				[ ] locator "//WPFTabItem[@caption='Sheet 1']"
			[+] WPFTabItem tbStreamsCustomDefault
				[ ] locator "//WPFTabItem[@caption='Default']"
			[+] WPFContextMenu ctmCustomStreamResultsDefalut
				[ ] locator "//WPFContextMenu"
				[+] WPFMenuItem miAddNew
					[ ] locator "//WPFMenuItem[1]"
				[+] WPFMenuItem miCopy
					[ ] locator "//WPFMenuItem[2]"
				[+] WPFMenuItem miRename
					[ ] locator "//WPFMenuItem[3]"
				[+] WPFMenuItem miRemove
					[ ] locator "//WPFMenuItem[4]"
				[+] WPFMenuItem miChangeType
					[ ] locator "//WPFMenuItem[5]"
				[+] WPFMenuItem miEditView
					[ ] locator "//WPFMenuItem[6]"
					[ ] 
			[ ] //Results Summary-->CO2 Emissions-->Summary
			[+] wcAPWPFComboBox cboHierarchy
				[ ] locator "//WPFControl[@automationId='MMComboEdit_1']"
			[+] wcAPWPFTextBox txbNetstreamCO2e
				[ ] locator "//WPFControl[@automationId='textBox'][1]"
			[+] wcAPWPFTextBox txbUtilityCO2e
				[ ] locator "//WPFControl[@automationId='textBox'][2]"
			[+] wcAPWPFTextBox txbTotalCO2e
				[ ] locator "//WPFControl[@automationId='textBox'][3]"
			[+] wcAPWPFTextBox txbNetCarbonFeeTax
				[ ] locator "//WPFControl[@automationId='textBox'][4]"
			[+] wcAPWPFComboBox cboFeedFlowUnit
				[ ] locator "//WPFControl[@className='MMUnitsEdit'][1]"
			[+] wcAPWPFComboBox cboFeedCO2eUnit
				[ ] locator "//WPFControl[@className='MMUnitsEdit'][2]"
			[+] wcAPWPFComboBox cboProductFlowUnit
				[ ] locator "//WPFControl[@className='MMUnitsEdit'][3]"
			[+] wcAPWPFComboBox cboProductCO2eUnit
				[ ] locator "//WPFControl[@className='MMUnitsEdit'][4]"
			[+] WPFControl grid1Corner
				[ ] locator "//WPFControl[@automationId='PART_DataGrid'][1]//WPFControl[@className='AesXamValueEdit'][1]"
			[+] WPFControl grid2Corner
				[ ] locator "//WPFControl[@automationId='PART_DataGrid'][2]//WPFControl[@className='AesXamValueEdit'][1]"
				[ ] 
			[ ] 
			[ ] 
			[ ] //ExpansionIndicator
			[+] WPFToggleButton togbtn1
				[ ] locator "//WPFToggleButton[@automationId='ExpansionIndicator' or @automationId='ExpansionIndicator'][1]"
			[+] WPFToggleButton togbtn2
				[ ] locator "//WPFToggleButton[@automationId='ExpansionIndicator'][2]"
			[+] WPFToggleButton togbtn3
				[ ] locator "//WPFToggleButton[@automationId='ExpansionIndicator'][3]"
			[+] WPFToggleButton togbtn4
				[ ] locator "//WPFToggleButton[@automationId='ExpansionIndicator'][4]"
			[+] WPFToggleButton togbtn5
				[ ] locator "//WPFToggleButton[@automationId='ExpansionIndicator'][5]"
			[+] WPFToggleButton togbtn6
				[ ] locator "//WPFToggleButton[@automationId='ExpansionIndicator'][6]"
			[+] WPFToggleButton togbtn7
				[ ] locator "//WPFToggleButton[@automationId='ExpansionIndicator'][7]"
			[+] WPFToggleButton togbtn8
				[ ] locator "//WPFToggleButton[@automationId='ExpansionIndicator'][8]"
			[+] WPFToggleButton togbtn9
				[ ] locator "//WPFToggleButton[@automationId='ExpansionIndicator'][9]"
				[ ] 
			[+] WPFToggleButton togbtn10
				[ ] locator "//WPFToggleButton[@automationId='ExpansionIndicator'][10]"
			[ ] 
			[ ] //Heater/Input/Specifications page
			[+] WPFControl txtFlashSpecRow1Type
				[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
			[+] wcAPWPFTextBox txtFlashSpecRow1Value
				[ ] locator "//WPFControl[@automationId='PART_editControl'][3]"
				[ ] // locator "//WPFControl[@automationId='textBox'][1]"
			[+] wcAPWPFComboBox txtFlashSpecRow1Unit
				[ ] locator "//WPFControl[@automationId='PART_editControl'][4]"
				[ ] // locator "//WPFControl[@automationId='PART_UnitEdit'][1]"
			[+] WPFControl txtFlashSpecRow2Type
				[ ] locator "//WPFControl[@automationId='PART_editControl'][4]"
			[+] wcAPWPFTextBox txtFlashSpecRow2Value
				[ ] // locator "//WPFControl[@automationId='PART_editControl'][5]"
				[ ] locator "//WPFControl[@automationId='textBox'][5]"
			[+] wcAPWPFComboBox txtFlashSpecRow2Unit
				[ ] locator "//WPFControl[@automationId='PART_editControl'][12]"
				[ ] // locator "//WPFControl[@automationId='PART_UnitEdit'][5]"
			[+] WPFControl txtDischargePressureValue
				[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
			[+] WPFControl txtDischargePressureUnit
				[ ] locator "//WPFControl[@automationId='PART_editControl'][3]"
				[ ] 
				[ ] 
			[+] WPFControl txtVaporFraction
				[ ] locator "//WPFControl[@automationId='PART_editControl'][9]"
			[+] WPFControl txtVaporFractionInResultsSummary
				[ ] locator "//WPFControl[@automationId='PART_editControl'][5]"
			[+] WPFControl txtVaporFractionInOperatingConditions
				[ ] locator "//WPFControl[@automationId='PART_editControl'][11]"
			[+] WPFControl txtPressureValue
				[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
			[+] WPFControl txtPressureUnit
				[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
			[+] WPFControl txtExchangerSpecificationValue
				[ ] locator "//WPFControl[@automationId='PART_editControl'][4]"
			[+] WPFControl txtExchangerAreaValue
				[ ] locator "//WPFControl[@automationId='PART_editControl'][9]"
				[ ] 
				[ ] 
				[ ] 
				[ ] 
			[+] WPFControl txtStreamMultipilerSpecification
				[ ] locator "//WPFControl[@automationId='PART_editControl']"
			[+] WPFControl txtOperationConditionPressureValue
				[ ] locator "//WPFControl[@automationId='PART_editControl'][7]"
			[+] WPFControl txtOperationConditionTempValue
				[ ] locator "//WPFControl[@automationId='PART_editControl'][5]"
			[+] WPFControl txtShaftSpeedValue
				[ ] locator "//WPFControl[@automationId='PART_editControl'][4]"
			[+] WPFControl txtShaftSpeedUnit
				[ ] locator "//WPFControl[@automationId='PART_editControl'][5]"
			[+] WPFControl txtPowerLossValue
				[ ] locator "//WPFControl[@automationId='PART_editControl'][7]"
			[+] WPFControl grpHeaterFlashSpecifications
				[ ] locator "@automationId='MMGroupBox_1'"
				[+] wcAPWPFComboBox cboFlashType1
					[ ] locator "//WPFControl[@automationId='MMComboEdit_1']"
				[+] wcAPWPFComboBox cboFlashType2
					[ ] locator "//WPFControl[@automationId='MMComboEdit_2']"
				[+] wcMMVariableEdit ctPressure
					[ ] locator "//WPFControl[@automationId='MMVariableEdit_5']"
				[+] wcMMVariableEdit ctDuty
					[ ] locator "//WPFControl[@automationId='MMVariableEdit_6']"
				[ ] 
			[ ] //Heater/Input/Flash Options page
			[+] WPFControl grpHeaterFlashOptions
				[+] WPFControl grpEstimates
					[+] wcMMVariableEdit ctTemperature
						[ ] locator "@automationId='MMVariableEdit_1'"
					[+] wcMMVariableEdit ctPressure
						[ ] locator "@automationId='MMVariableEdit_2'"
				[+] WPFControl grpConvergenceParameters
					[+] wcAPWPFTextBox txtMaximumIterations
						[ ] locator "@automationId='MMSpinBox_1'"
					[+] wcMMVariableEdit ctErrorTolerance
						[ ] locator "@automationId='MMVariableEdit_3'"
			[ ] 
			[ ] 
			[ ] //Pure Component
			[+] WPFButton btnSelectAllComponents
				[ ] locator "//WPFButton[@automationId='*AddAll']"
			[+] WPFControl txtPropertyType
				[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
			[+] WPFControl txtProperty
				[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
			[+] WPFControl txtUnits
				[ ] locator "//WPFControl[@automationId='PART_editControl'][4]"
			[+] WPFRadioButton rdlListOfValues
				[ ] locator "//WPFRadioButton[@automationId='ogrTemp_opt0']"
			[+] WPFRadioButton rdlOverallRange
				[ ] // locator "//WPFRadioButton[@automationId='ogrTemp_opt1']"
				[ ] locator "//WPFRadioButton[(@automationId='PART_RadioButton' and @caption='Overall range')]"
			[+] wcAPWPFTextBox txtLowerLimit
				[ ] //locator "//WPFControl[@automationId='PART_editControl'][5]"
				[ ] locator "//WPFControl[@automationId='MMFortranLine_1' or @automationId='MMVariableEdit_1']"
			[+] wcAPWPFTextBox txtUpperLimit
				[ ] //locator "//WPFControl[@automationId='PART_editControl'][6]"
				[ ] locator "//WPFControl[@automationId='MMFortranLine_2' or @automationId='MMVariableEdit_2']"
			[+] wcAPWPFTextBox  txtNoPoints
				[ ] locator "//WPFControl[@automationId='PART_editControl'][7]"
			[+] wcAPWPFTextBox	txtNumberOfPoints
				[ ] //locator "//WPFControl[@automationId='PART_editControl'][8]"
				[ ] locator "//WPFControl[@automationId='MMFortranLine_4']"
			[ ] 
			[ ] //Binary Analysis
			[+] wcAPWPFComboBox txtAnalisisType
				[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
			[ ] 
			[ ] //Utilities-->Utility-->
			[ ] //Input
			[+] wcAPWPFComboBox cboUtilityType
				[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
			[+] WPFGroupBox grpUtilityCost
				[ ] locator "//WPFGroupBox[@caption='Utility cost']"
				[+] WPFRadioButton rdPurchasePrice
					[ ] locator "//WPFRadioButton[(@automationId='PART_RadioButton' and @caption='Purchase price:')]"
				[+] WPFRadioButton rdEnergyPrice
					[ ] locator "//WPFRadioButton[(@automationId='PART_RadioButton' and @caption='Energy price*')]"
				[+] wcAPWPFTextBox tbPurchasePrice
					[ ] locator "//WPFControl[@automationId='textBox'][1]"
				[+] wcAPWPFComboBox cboPriceUnit
					[ ] locator "//WPFControl[@automationId='PART_UnitEdit'][1]"
				[+] wcAPWPFTextBox txtEnergyPrice
					[ ] locator "//WPFControl[@automationId='textBox'][2]"
				[+] wcAPWPFComboBox cboEnergyPrice
					[ ] locator "//WPFControl[@automationId='PART_UnitEdit'][2]"
				[ ] 
			[+] WPFGroupBox grpHeatingCoolingValue
				[ ] locator "//WPFGroupBox[@caption='Heating/Cooling value']"
				[+] wcAPWPFTextBox tbHeatingCoolingValue
					[ ] locator "//WPFControl[@automationId='textBox'][1]"
				[+] wcAPWPFComboBox cboHeatingCooling
					[ ] locator "//WPFControl[@automationId='PART_UnitEdit'][1]"
				[ ] 
				[+] WPFRadioButton rdHeatingCooling
					[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_1']"
				[+] WPFRadioButton rdInletOutlet
					[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_2']"
				[ ] 
			[+] WPFGroupBox grpConsistency
				[ ] locator "//WPFGroupBox[@caption='Consistency check specifications']"
				[+] wcAPWPFTextBox txbMinimumApproachTemp
					[ ] locator "//WPFControl[@automationId='textBox'][1]"
			[+] WPFGroupBox grpUtilitySideFilmCoefficient
				[ ] locator "//WPFGroupBox[@caption='Utility side film coefficient*']"
				[+] WPFRadioButton rdSpecify
					[ ] locator "//WPFRadioButton[@name='optHTCEnergyAnalysis_opt0']"
				[+] WPFRadioButton rdCalculateFromProperties
					[ ] locator "//WPFRadioButton[@name='optHTCEnergyAnalysis_opt1']"
				[+] wcAPWPFTextBox txbViscosity
					[ ] locator "//WPFControl[@automationId='textBox'][2]"
				[+] wcAPWPFTextBox txbConductivity
					[ ] locator "//WPFControl[@automationId='textBox'][3]"
				[+] wcAPWPFTextBox txbDensity
					[ ] locator "//WPFControl[@automationId='textBox'][4]"
				[ ] 
			[+] WPFGroupBox grpCarbonTracking
				[ ] locator "//WPFGroupBox[@caption='Carbon tracking']"
				[+] WPFCheckBox chkCalculateCO2Emissions
					[ ] locator "//WPFCheckBox[@automationId='PART_CheckBox']"
				[+] wcAPWPFComboBox cboFactorSource
					[ ] locator "//WPFControl[@automationId='MMComboEdit_1']"
				[+] wcAPWPFComboBox cboFuelSource
					[ ] locator "//WPFControl[@automationId='MMComboEdit_2']"
				[+] wcAPWPFTextBox txbEfficiencyFactor
					[ ] locator "//WPFControl[@automationId='MMVariableEdit_2']"
			[+] WPFGroupBox grpInletStateVariables
				[ ] locator "//WPFGroupBox[@caption='Inlet state variables']"
				[+] wcAPWPFTextBox tbTemperatureValue
					[ ] locator "//WPFControl[@automationId='textBox'][1]"
				[+] wcAPWPFComboBox cboTemperatureUnit
					[ ] locator "//WPFControl[@automationId='PART_UnitEdit'][1]"
				[+] wcAPWPFTextBox tbPressureValue
					[ ] locator "//WPFControl[@automationId='textBox'][2]"
				[+] wcAPWPFComboBox cboPressureUnit
					[ ] locator "//WPFControl[@automationId='PART_UnitEdit'][2]"
				[ ] 
			[+] WPFGroupBox grpOutletStateVariables
				[ ] locator "//WPFGroupBox[@caption='Outlet state variables']"
				[+] wcAPWPFTextBox tbTemperatureValue
					[ ] locator "//WPFControl[@automationId='textBox'][1]"
				[+] wcAPWPFComboBox cboTemperatureUnit
					[ ] locator "//WPFControl[@automationId='PART_UnitEdit'][1]"
				[+] wcAPWPFTextBox tbPressureValue
					[ ] locator "//WPFControl[@automationId='textBox'][2]"
				[+] wcAPWPFComboBox cboPressureUnit
					[ ] locator "//WPFControl[@automationId='PART_UnitEdit'][2]"
				[ ] 
			[ ] //Result
			[+] WPFGroupBox grpUtilityResult
				[+] wcAPWPFComboBox cboDuty
					[ ] locator "//WPFControl[@className='MMUnitsEdit'][1]"
				[+] wcAPWPFComboBox cboUsageUnit
					[ ] locator "//WPFControl[@className='MMUnitsEdit'][2]"
				[+] wcAPWPFComboBox cboCostUnit
					[ ] locator "//WPFControl[@className='MMUnitsEdit'][3]"
				[+] wcAPDataGrid dgResult
					[ ] locator "//WPFControl[@automationId='PART_DataGrid']"
			[+] boolean CheckUtilities(string sUtilityName)
				[ ] list of STRING lsBlockId,lsTableData,lsBlockData,lsTemp,lsTemp1
				[ ] int iNumber
				[ ] string sBlockId,sEntry
				[ ] CollapseAll(APlus.trvPartTree)
				[ ] APlus.trvPartTree.Select("Utilities/{sUtilityName}/Results")
				[ ] sleep(0.8)
				[ ] APlus.SetTab("Results")
				[ ] sleep(0.8)
				[ ] iNumber=ListCount(tableReturnRange("all","none"))
				[ ] lsBlockId=tableReturnRange("A3:A{iNumber}","none")
				[ ] lsTableData=tableReturnRange("C3:E{iNumber}","none")
				[+] //clear lsBlockData
					[+] while ListCount(lsBlockData)!=0
						[ ] ListDelete(lsBlockData,1)
				[ ] 
				[ ] //read data from each block and constrcut lsBlockData
				[+] for each sBlockId in lsBlockId
					[+] //Clear lsBlockData
						[+] while ListCount(lsTemp1)!=0
							[ ] ListDelete(lsTemp1,1)
						[+] while ListCount(lsTemp)!=0
							[ ] ListDelete(lsTemp,1)
						[ ] 
					[ ] 
					[ ] CollapseAll(APlus.trvPartTree)
					[ ] APlus.trvPartTree.Select("Blocks/{sBlockId}/Results")
					[ ] sleep(0.8)
					[ ] print(sBlockId)
					[+] if FindWPFTabItem("//WPFTabItem[@caption='*Utilities*']").Exists()
						[ ] FindWPFTabItem("//WPFTabItem[@caption='*Utilities*']").Select()
						[+] if APlus.InputDataToWPFObj("ComboBox","Utility","{sUtilityName}","Compressor")
							[ ] iNumber=ListCount(tableReturnRange("all","Compressor"))
							[ ] lsTemp1=tableReturnRange("sum(b3:b{iNumber}),sum(c3:c{iNumber}),sum(d3:d{iNumber})","Compressor")
							[ ] sEntry=lsTemp1[1]+"	"+lsTemp1[2]+"	"+lsTemp1[3]
							[ ] ListAppend(lsTemp,sEntry)
						[+] if APlus.InputDataToWPFObj("ComboBox","Utility","{sUtilityName}","Cooler")
							[ ] iNumber=ListCount(tableReturnRange("all","Cooler"))
							[ ] lsTemp1=tableReturnRange("sum(b3:b{iNumber}),sum(c3:c{iNumber}),sum(d3:d{iNumber})","Cooler")
							[ ] sEntry=lsTemp1[1]+"	"+lsTemp1[2]+"	"+lsTemp1[3]
							[ ] ListAppend(lsTemp,sEntry)
						[ ] iNumber=ListCount(lsTemp)
						[ ] lsTemp=tableReturnRange("sum(A1:A{iNumber}),sum(B1:B{iNumber}),sum(C1:C{iNumber})",null,null,null,lsTemp)
						[ ] sEntry=lsTemp[1]+"	"+lsTemp[2]+"	"+lsTemp[3]
						[ ] sEntry=strtran(sEntry,"-","")
						[ ] ListAppend(lsBlockData,sEntry)
					[+] else
						[ ] APlus.SetTab("Utility Usage")
						[ ] sleep(0.8)
						[ ] sEntry=APlus.GetValueFromWPFObj("none","Utility duty",1)+"	"+APlus.GetValueFromWPFObj("none","Utility usage",1)+"	"+APlus.GetValueFromWPFObj("none","Utility cost",1)
						[ ] sEntry=strtran(sEntry,"-","")
						[ ] ListAppend(lsBlockData,sEntry)
				[ ] print("lsBlockData")
				[ ] ListPrint(lsBlockData)
				[ ] print("lsTableData")
				[ ] ListPrint(lsTableData)
				[ ] 
				[+] if APlus.CompareTables(lsBlockData,lsTableData)
					[ ] Log.Pass("{sUtilityName} is verified")
					[ ] return true
				[+] else
					[ ] print("BlockData-BaseValue")
					[ ] ListPrint(lsBlockData)
					[ ] print("lsTableData-Compare Against with")
					[ ] ListPrint(lsTableData)
					[ ] Log.ManualCheck("Check {sUtilityName} the value is not correct")
					[ ] return false
			[ ]  //Utility Usage
			[+] wcMMVariableEdit ctUtilityCost
				[ ] locator "//WPFControl[@automationId='MMVariableEdit_3']"
		[ ] 
		[ ] 
		[+] //DialogBox
			[+] wcOpenDialogBox dlgOpenFile
				[ ] locator "Open"
			[ ] 
			[+] wcOpenDialogBox dlgSelectEDRInputFile
				[ ] locator "Select EDR Input File"
			[ ] 
			[+] wcOpenDialogBox dlgPrintPreview
				[ ] locator "//DialogBox[@caption='Print Preview']"
			[ ] 
			[+] WPFUserControl dlgStartUsing
				[ ] locator "//WPFUserControl[@automationId='startUsingControl']"
				[+] WPFButton btnClose
					[ ] locator "//WPFButton[@automationId='CloseButton']"
		[ ] 
		[+] //Status Bar
			[+] WPFStatusBar stbStatus
				[ ] locator "//WPFStatusBar"
				[+] WPFStatusBarItem stbiResultsAvailable
					[ ] locator "//WPFStatusBarItem[2]"
			[ ] 
			[ ] //---------------------------------------Statusbar related--------------
			[+] WPFStatusBarItem	stsbRunDone
				[ ] locator "//WPFStatusBarItem[@caption='Results Available']"
			[+] WPFStatusBarItem	stsbRunNotDone
				[ ] locator "//WPFStatusBarItem[@caption='Results Available (problem not yet run)']"
			[+] WPFStatusBarItem	stsbEORunDone
				[ ] locator "//WPFStatusBarItem[@caption='EO Solution Converged']"
				[ ] 
			[+] WPFStatusBarItem	stsbSMRunDone
				[ ] locator "//WPFStatusBarItem[@caption='SM Results Available']"
				[ ] 
			[+] WPFStatusBarItem	stsbRunDoneWithError
				[ ] locator "//WPFStatusBarItem[@caption='Results Available with Errors']"
				[ ] 
			[+] WPFStatusBarItem	stsbRunDoneWithWarnings
				[ ] locator "//WPFStatusBarItem[@caption='Results Available with Warnings']"
			[+] WPFStatusBarItem      stsbRunNotDoneWithWarnings
				[ ] locator "//WPFStatusBarItem[@caption='Results Available with Warnings (problem not yet run)']"
			[+] WPFStatusBarItem	stsbEORunDoneWithWarnings
				[ ] locator "//WPFStatusBarItem[@caption='EO Solution Converged With Warnings']"
			[+] WPFStatusBarItem	stsbEOSolutionConvergedWithErrors
				[ ] locator "//WPFStatusBarItem[@caption='EO Solution Converged With Errors']"
			[+] WPFStatusBarItem	stsbEOSolutionFailed
				[ ] locator "//WPFStatusBarItem[@caption='EO Solution Failed']"
				[ ] 
			[+] WPFStatusBarItem stsbRequiredInputComplete
				[ ] locator"//WPFStatusBarItem[@caption='Required Input Complete']"
			[ ] 
			[ ] 
			[+] WPFStatusBarItem stsbRequiredInputIncomplete
				[ ] locator"//WPFStatusBarItem[@caption='Required Input Incomplete']"
			[+] WPFControl grpZoomControl
				[ ] locator "//WPFControl[@automationId='PART_ZoomControl']"
				[+] WPFButton btnZoomToFit
					[ ] locator "//WPFButton[@automationId='PART_ZoomToFitButton']"
			[ ] 
			[ ] 
		[ ] 
		[+] //Common controls
			[+] WPFDataGridCell gridcellFirst
				[ ] locator "//WPFDataGridCell[@className='GridControlCell'][1]"
			[+] WPFControl ctrlGridControl
				[ ] locator "//WPFControl[@className='GridControl']"
				[+] WPFScrollBar vScrollBar
					[ ] locator "//WPFScrollBar[@automationId='PART_VerticalScrollBar']"
				[+] WPFScrollBar hScrollBar
					[ ] locator "//WPFScrollBar[@automationId='PART_HorizontalScrollBar']"
					[ ] 
			[ ] 
			[+] wcAPWPFTextBox tbCommonTextBox
				[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
			[ ] 
			[+] WPFControl editComponentIDRow1
				[ ] locator "//WPFControl[@className='AesXamValueEdit'][1]"
			[+] WPFControl editComponentIDRow2
				[ ] locator "//WPFControl[@className='AesXamValueEdit'][4]"
			[+] WPFControl editComponentIDRow3
				[ ] locator "//WPFControl[@className='AesXamValueEdit'][7]"
			[+] WPFControl editComponentIDRow4
				[ ] locator "//WPFControl[@className='AesXamValueEdit'][10]"
			[+] WPFControl editComponentIDRow5
				[ ] locator "//WPFControl[@className='AesXamValueEdit'][13]"
			[+] WPFControl editComponentIDRow6
				[ ] locator "//WPFControl[@className='AesXamValueEdit'][16]"
				[ ] 
			[ ] 
			[+] WPFButton btnSelectAll
				[ ] locator "//WPFButton[@automationId='SelectAll']"
			[+] WPFButton btnRename
				[ ] locator "//WPFButton[@caption='Rename']"
			[ ] 
			[+] WPFHeaderedContentControl hccAnonymousScreen
				[ ] locator "//WPFHeaderedContentControl[@automationId='_AnonymousScreen*']/WPFContentControl[@caption='Analysis']"
			[+] property  StatusText 
					[+] string Get()
						[ ] return this.Find("//WPFStatusBarItem[2]").sCaption
			[ ] 
		[ ] 
		[+] //Aspen Properties Menu and Ribbon
			[+] WPFTabItem tbPropertiesHome
				[ ] locator "//WPFTabItem[@automationId='Properties']"
			[+] WPFTabItem tiPropertiesHome
				[ ] locator "//WPFTabItem[@automationId='Properties']"
			[+] WPFButtonBase	btnNIST
				[ ] locator "//WPFButtonBase[@caption='NIST']"
			[+] WPFButtonBase btnCopyProp
				[ ] locator "//WPFButtonBase[@automationId='*btnCopyProp']"
				[ ] 
			[ ] 
		[ ] 
		[+] //Activated Analysis Dashboard  <--Old 8.6 UI no longer usable
			[+] // WPFContentControl grpDashboard
				[ ] // locator "//WPFContentControl[@className='DashboardScreen']"
				[+] // WPFButton btnClose
					[ ] // locator "//WPFButton[@automationId='closeBtn'][1]"
				[+] // WPFButton btnEnergyAnalysis
					[ ] // locator "//WPFButton[@className='FlatButton'][1]"
				[+] // WPFButton btnEconomicAnalysis
					[ ] // locator "//WPFButton[@className='FlatButton'][2]"
			[+] // WPFContentControl grpEnergy
				[ ] // locator "//WPFContentControl[@className='DashboardScreen']//WPFContentControl[@name='dashboardContent' ][1]"
				[+] // close()
					[ ] // APlus.grpDashboard.grpEnergy.find("//WPFTextBlock[@caption='Energy']").Click(1,290,5) //Button Not Recognizeable
				[+] // minimize()
					[ ] // APlus.grpDashboard.grpEnergy.find("//WPFTextBlock[@caption='Energy']").Click(1,275,5) // Button Not Recognizable
				[+] // expand()
					[ ] // APlus.grpDashboard.grpEnergy.Click(1,5,5) // Button Not Recognizable
				[+] // boolean isCostMode()
					[ ] // print( this.txtGHGCost.Text )
					[+] // if( this.find("//WPFTextBlock[10]").text == "GHG Cost")
						[ ] // return TRUE
					[+] // else
						[ ] // return FALSE
					[ ] // 
				[ ] // //When in Cost View
				[+] // WPFTextBlock txtUtilityCost
					[ ] // locator "//WPFTextBlock[1]"
				[+] // WPFTextBlock txtUtilityCostTarget
					[ ] // locator "//WPFTextBlock[2]"
				[+] // WPFTextBlock txtUtilityCostUnit
					[ ] // locator "//WPFTextBlock[3]"
				[+] // WPFTextBlock txtUtilityCostPercent
					[ ] // locator "//WPFTextBlock[4]"
				[+] // WPFTextBlock txtGHGCost
					[ ] // locator "//WPFTextBlock[5]"
				[+] // WPFTextBlock txtGHGCostTarget
					[ ] // locator "//WPFTextBlock[6]"
				[+] // WPFTextBlock txtGHGCostUnit
					[ ] // locator "//WPFTextBlock[7]"
				[+] // WPFTextBlock txtGHGUtilityCostPercent
					[ ] // locator "//WPFTextBlock[8]"
				[+] // WPFToggleButton btnArrow
					[ ] // locator "//WPFToggleButton[@automationId='arrow']"
				[ ] // //When in Emissions View
				[+] // WPFTextBlock txtHeatingPower
					[ ] // locator "//WPFTextBlock[1]"
				[+] // WPFTextBlock txtHeatingPowerTarget
					[ ] // locator "//WPFTextBlock[2]"
				[+] // WPFTextBlock txtHeatingPowerUnit
					[ ] // locator "//WPFTextBlock[3]"
				[+] // WPFTextBlock txtCoolingPower
					[ ] // locator "//WPFTextBlock[4]"
				[+] // WPFTextBlock txtCoolingPowerTarget
					[ ] // locator "//WPFTextBlock[5]"
				[+] // WPFTextBlock txtCoolingPowerUnit
					[ ] // locator "//WPFTextBlock[6]"
				[+] // WPFTextBlock txtGHGPower
					[ ] // locator "//WPFTextBlock[7]"
				[+] // WPFTextBlock txtGHGPowerTarget
					[ ] // locator "//WPFTextBlock[8]"
				[+] // WPFTextBlock txtGHGPowerUnit
					[ ] // locator "//WPFTextBlock[9]"
					[ ] // 
					[ ] // 
				[+] // WPFImage btnSwitchToEmissions
					[ ] // locator "//WPFImage[1]"
				[+] // WPFImage btnEditOptions
					[ ] // locator "//WPFImage[2]"
				[+] // WPFImage btnViewUtilityDetails
					[ ] // locator "//WPFImage[3]"
				[ ] // 
				[ ] // 
			[+] // WPFContentControl grpEconomics
				[ ] // locator "//WPFContentControl[@className='DashboardScreen']//WPFContentControl[@name='dashboardContent' ][2]"
				[+] // close()
					[ ] // this.Click(1,190,7) //Button Not Recognizeable
				[+] // minimize()
					[ ] // this.Click(1,172,7) // Button Not Recognizable
				[+] // expand()
					[ ] // this.Click(1,5,7) // Button Not Recognizable
				[+] // WPFButton btnCapitalViewSheet
					[ ] // locator "//WPFButton[1]"
					[+] // ClickButton()
						[ ] // this.Click(1,73,15)
				[+] // WPFButton btnUtilityViewSheet
					[ ] // locator "//WPFButton[2]"
					[+] // ClickButton()
						[ ] // this.Click(1,73,15)
					[ ] // 
				[+] // WPFTextBlock txbCapitalCost
					[ ] // locator "//WPFTextBlock[1]"
				[+] // WPFTextBlock txbCapitalCostUnit
					[ ] // locator "//WPFTextBlock[2]"
				[+] // WPFTextBlock txbUtilityCost
					[ ] // locator "//WPFTextBlock[3]"
				[+] // WPFTextBlock txvUtilityCostUnit
					[ ] // locator "//WPFTextBlock[4]"
				[ ] // 
				[ ] // 
			[+] // WPFControl grpPotentialDesignChanges
				[ ] // locator "//WPFControl[@className='EnergySlider']"
				[+] // WPFButton btnGenerate
					[ ] // locator "/WPFButton[@automationId='generateBtn']"
				[+] // WPFButton btnStop
					[ ] // locator "//WPFButton[@automationId='stopBtn']"
				[+] // WPFToggleButton btnExpandGrid
					[ ] // locator "//WPFToggleButton[@automationId='gridToggleButton']"
				[+] // WPFProgressBar pbProgressBar
					[ ] // locator "//WPFProgressBar[@automationId='progressBar']"
				[+] // WPFDataGrid dgDesignChanges
					[ ] // locator "//WPFDataGrid[@automationId='dataGrid']"
			[ ] // 
			[ ] 
		[+] //Energy Environment
			[+] WPFButtonBase btnSetupEA
				[ ] locator "//WPFButtonBase[@automationId='EnergyAnalysisSetupButton']"
			[+] WPFButtonBase btnAnalyzeEA
				[ ] locator "//WPFButtonBase[@automationId='EnergyAnalysisAnalyzeButton']"
			[+] WPFButtonBase btnSavingsPotential
				[ ] locator "//WPFButtonBase[@caption='Saving']"
			[+] WPFButtonBase btnAddScenario
				[ ] locator "//WPFButtonBase[@automationId='EnergyAnalysisAddScenarioButton']"
			[+] WPFButtonBase btnRemoveScenario
				[ ] locator "//WPFButtonBase[@caption='Remove']"
			[+] WPFButtonBase btnCompareScenario
				[ ] locator "//WPFButtonBase[@automationId='EnergyAnalysisCompareScenariosButton']"
			[+] WPFButtonBase btnModifyExchanger
				[ ] locator "//WPFButtonBase[@automationId='EnergyAnalysisModifyHXButton']"
			[+] WPFButtonBase btnRelocateExchanger
				[ ] locator "//WPFButtonBase[@automationId='EnergyAnalysisRelocateHXButton']"
			[+] WPFButtonBase btnAddExchanger
				[ ] locator "//WPFButtonBase[@automationId='EnergyAnalysisAddHXButton']"
			[+] WPFControl dgSummaryEA3
				[ ] locator "//WPFControl[@automationId='xdgSummary']"
			[ ] //Energy Analysis Constraints
			[+] WPFTextBox txbExchangerMinApproachTemp
				[ ] locator "//WPFTextBox[@className='MMTextBox'][3]"
			[ ] //Flowsheet Options
			[+] WPFComboBox cboProcessType
				[ ] locator "//WPFComboBox[@automationId='ProcessTypeCombox']"
			[ ] 
			[ ] 
			[ ] 
		[+] //Activated Energy Analysis
			[+] WPFControl grpActivatedEnergyAnalysis
				[ ] locator "//WPFControl[@automationId='EADashboardItem']"
				[+] WPFControl btnActivatedAnalysisOnOff
						[ ] locator "//WPFControl[@automationId='expandedOnOffButton']" 
				[+] WPFTextBlock txtActivatedEnergyAnalysisOn 
					[ ] locator "//WPFTextBlock[@automationId='onText']"
				[+] WPFTextBlock txtActivatedEnergyAnalysisOff
					[ ] locator "//WPFTextBlock[@automationId='offText']"
				[+] WPFTextBox txtActivatedEnergyAnalysisPercentChange
					[ ] locator "//WPFControl[@automationId='expandedPercent']/WPFControl[@automationId='verticalDisplayText']/WPFTextBox"
				[+] WPFTextBox txtActivatedEnergyAnalysisMWUsed
					[ ] locator "//WPFControl[@automationId='expandedValue']/WPFControl[@automationId='verticalDisplayText']/WPFTextBox"
		[+] //Safety Environment
			[+] WPFToggleButton btnAddPSV
				[ ] locator "//WPFToggleButton[@automationId='tbt_AddPSV']"
			[+] wcAPWPFComboBox cboUnitSetPSV
				[ ] locator "WPFControl[@automationId='comboUnitSetPSV']"
			[+] WPFTextBlock txtPSVStatus
				[ ] locator "//WPFTextBlock[@automationId='TextBlock_5']"
			[ ] //Equipment form
			[+] wcPSVEditBox grpPSVOperatingTemperature
				[ ] locator "@automationId='src_PSVEditBox_1'"
				[ ] 
			[+] wcAPWPFComboBox cboPSVOperatingTemperature
				[ ] locator "@automationId='cmbOT'"
			[+] wcPSVEditBox grpPSVDesignTemperature
				[ ] locator "@automationId='src_PSVEditBox_2'"
				[ ] 
			[+] wcAPWPFComboBox cboPSVDesignTemperature
				[ ] locator "@automationId='cmbDT'"
			[+] wcPSVEditBox grpPSVOperatingPressure
				[ ] locator "@automationId='src_PSVEditBox_3'"
				[ ] 
			[+] wcAPWPFComboBox cboPSVOperatingPressure
				[ ] locator "@automationId='cmbOP'"
			[+] wcPSVEditBox grpPSVDesignPressure
				[ ] locator "@automationId='src_PSVEditBox_4'"
				[ ] 
			[+] wcAPWPFComboBox cboPSVDesignPressure
				[ ] locator "@automationId='cmbDP'"
			[ ] //scenario form
			[+] WPFButton btnPSVSenarioCreates
				[ ] locator "@automationId='create'"
			[+] WPFButton btnPSVSenarioDuplicateRename
				[ ] locator "@automationId='duplicate'"
			[+] WPFButton btnPSVSenarioOpen
				[ ] locator "@automationId='open'"
			[+] WPFButton btnPSVSenarioDelete
				[ ] locator "@automationId='delete'"
			[+] WPFControl dgPSVSenario
				[ ] locator "@automationId='prdsummary_grid'"
				[+] wcAPWPFComboBox dgcType
					[ ] locator "//WPFContentControl[@className='CellValuePresenter'][1]"
					[+] WPFToggleButton tgbTog1
						[ ] locator "@automationId='tog1'"
					[+] void Select(string sType)
						[ ] this.tgbTog1.Click()
						[ ] this.Find("//WPFLabel[@caption='{sType}']").Click()
						[ ] glWaitForMouseIdle(120)
			[ ] 
			[ ] //scenario Setup form
			[+] WPFButton btnPSVSceSetupEditFlashTable
				[ ] locator "//WPFButton[@automationId='btViewDetails']"
			[+] WPFUserControl ucPSVScenarioType
				[ ] locator "@automationId='SceSelecter'"
				[+] WPFToggleButton tgbTog1
					[ ] locator "@automationId='tog1'"
				[+] void Select(string sType)
					[ ] this.tgbTog1.Click()
					[ ] this.Find("//WPFLabel[@caption='{sType}']").Click()
					[ ] glWaitForMouseIdle(120)
			[+] WPFCheckBox chkPSVSceSetupOverride
				[ ] locator "//WPFGroupBox[@automationId='groupBox1']//WPFCheckBox[@automationId='CheckBox_2']"
			[+] wcAPWPFTextBox txtPSVSceRelievingTemperature 
				[ ] locator "//WPFUserControl[@automationId='psvboxtemp']/WPFControl[@automationId='displayBox']"
			[+] wcAPWPFComboBox cboPSVSceSetupCalMethod
				[ ] locator "//WPFControl[@automationId='ComFireCalType']"
				[+] property Text
					[+] String Get()
						[ ] return this.Find("//WPFTextBlock").Text
			[+] WPFControl dgPSVSceSetupSizingCase
				[ ] locator "//WPFControl[@automationId='ValveResult_Grid']"
				[+] WPFContentControl Cell1
					[ ] locator "//WPFContentControl[@className='CellValuePresenter'][1]"
					[+] WPFControl EditValue
						[ ] locator "//WPFControl[@className='XamTextEditor'][1]"
				[+] WPFContentControl Cell2
					[ ] locator "//WPFContentControl[@className='CellValuePresenter'][2]"
					[+] WPFControl EditValue
						[ ] locator "//WPFControl[@className='XamTextEditor'][1]"
				[+] WPFContentControl Cell3
					[ ] locator "//WPFContentControl[@className='CellValuePresenter'][3]"
					[+] WPFControl EditValue
						[ ] locator "//WPFControl[@className='AesXamValueEdit'][1]"
				[+] WPFDataGridCell Cell4
					[ ] locator "//WPFDataGridCell[@className='GridControlCell'][4]"
				[+] WPFDataGridCell Cell5
					[ ] locator "//WPFDataGridCell[@className='GridControlCell'][5]"
				[+] WPFDataGridCell Cell6
					[ ] locator "//WPFDataGridCell[@className='GridControlCell'][6]"
				[+] WPFDataGridCell Cell7
					[ ] locator "//WPFDataGridCell[@className='GridControlCell'][7]"
				[+] WPFDataGridCell Cell17
					[ ] locator "//WPFDataGridCell[@className='GridControlCell'][17]"
				[+] WPFDataGridCell Cell165
					[ ] locator "//WPFDataGridCell[@className='GridControlCell'][165]"
				[+] WPFDataGridCell Cell43
					[ ] locator "//WPFDataGridCell[@className='GridControlCell'][43]"
				[ ] 
				[+] SetCellData(INT Column, INT Row,STRING str, BOOLEAN bVerify optional)
					[+] //Description
						[ ] // SetCellData(0,2,"45"):  set data for position which is  the first column, the third row 
						[ ] // SetCellData(2,0,"45"):  set data for position which is the third column, the first row.
					[ ] 
					[ ] this.TypeKeys("<Ctrl-End>")
					[ ] this.TypeKeys("<Ctrl-Home>")
					[ ] sleep(1)
					[+] if(Column!=0)
						[ ] this.TypeKeys("<Right {Column}>")
					[+] else
						[ ] 
					[+] if(Row!=0)
						[ ] this.TypeKeys("<Down {Row}>")
					[+] else 
						[ ] 
					[+] if(str != null)
						[ ] //this.TypeKeys("{str}<Enter>")
						[+] list of STRING lststr = {...}
							[ ] str
						[ ] Clipboard.SetText(lststr)
						[ ] this.TypeKeys("<Ctrl-V>")
						[ ] this.TypeKeys("<Enter>")
						[ ] sleep(2)
						[ ] this.Setfocus()
						[+] if (bVerify!=null && bVerify==true)
							[ ] string sValue =this.GetCellValue(Column,Row)
							[+] if(Lower(str) == Lower(sValue))
								[ ] Log.Pass("Value modifies to {str} Pass.")
							[+] else
								[ ] Log.Error("Value modifies to {str} Fail, actually to {sValue}.")
					[ ] 
				[+] string GetCellValue(INT Column, INT Row)
					[+] //Description
						[ ] // GetCellValue(0,2,"45"):  get data for position which is  the first column, the third row 
						[ ] // GetCellValue(2,0,"45"):  get data for position which is the third column, the first row.
					[ ] this.TypeKeys("<Ctrl-End>")
					[ ] this.TypeKeys("<Ctrl-Home>")
					[ ] sleep(1)
					[ ] 
					[ ] // int i
					[+] // for i=1 to row-1 step 1
						[ ] // this.TypeKeys("<Down>")
						[ ] // sleep(0.5)
					[+] // for i=1 to coloumn-1 step 1
						[ ] // this.TypeKeys("<Right>")
						[ ] // sleep(0.5)
						[+] if(Column!=0)
							[ ] this.TypeKeys("<Right {Column}>")
						[+] else
							[ ] 
						[+] if(Row!=0)
							[ ] this.TypeKeys("<Down {Row}>")
						[+] else 
							[ ] 
						[ ] 
					[ ] Clipboard.SetText()
					[ ] this.TypeKeys("<Ctrl-C> 5")
					[ ] list lstStr = Clipboard.GetText()
					[ ] return lstStr[1]
				[+] SetCellValue(int Record,int Cell,string sValue)
					[ ] //Created by Weiwei Wu
					[ ] //Created it because setcelldata wont' work with the tables in properties->trvtreeview/Regression/Input
					[ ] list of WINDOW lwTable
					[ ] window wTable
					[ ] wTable=this.FindWPFItemsControl("//WPFItemsControl[@className='RecordListControl']")
					[+] do
						[ ] wTable.FindWPFContentControl("//WPFControl[@className='DataRecordPresenter'][{Record}]//WPFContentControl[@className='CellValuePresenter'][{Cell}]").TypeKeys("{sValue}<Enter>",0.1)
					[+] except
						[ ] Log.Fail("Fail to enter data into datagrid")
				[+] int GetRowCount()
					[ ] Clipboard.SetText()
					[ ] this.TypeKeys("<Ctrl-A 2> 2")
					[ ] this.TypeKeys("<Ctrl-C 2>")
					[ ] list lstStr = Clipboard.GetText()
					[ ] int rowCount = ListCount(lstStr) - 1
					[ ] return rowCount
				[+] string GetEndCellValue()
					[ ] this.TypeKeys("<Ctrl-End 2>")
					[ ] Clipboard.SetText()
					[ ] glWaitForMouseIdle()
					[ ] this.TypeKeys("<Ctrl-C> 2")
					[ ] list lstStr = Clipboard.GetText()
					[ ] return lstStr[1]
				[ ] 
			[+] WPFControl dgPSVSceSetupVesselParameters
				[ ] locator "//WPFControl[@automationId='ScenarioFire_Grid']"
				[+] WPFContentControl Cell1
					[ ] locator "//WPFContentControl[@className='CellValuePresenter'][1]"
					[+] WPFControl EditValue
						[ ] locator "//WPFControl[@className='XamTextEditor'][1]"
				[+] WPFContentControl Cell2
					[ ] locator "//WPFContentControl[@className='CellValuePresenter'][2]"
					[+] WPFControl EditValue
						[ ] locator "//WPFControl[@className='XamTextEditor'][1]"
				[+] WPFContentControl Cell3
					[ ] locator "//WPFContentControl[@className='CellValuePresenter'][3]"
					[+] WPFControl EditValue
						[ ] locator "//WPFControl[@className='AesXamValueEdit'][1]"
				[+] WPFContentControl Cell4
					[ ] locator "//WPFContentControl[@className='CellValuePresenter'][4]"
				[+] wcAPWPFComboBox dgcVesselTypeValue
					[ ] locator "//WPFContentControl[@className='CellValuePresenter'][5]"
					[+] wcAPWPFComboBox EditValue
						[ ] locator "//WPFControl[@className='XamComboEditor'][1]"
				[+] WPFContentControl dgcVesselType
					[ ] locator "//WPFContentControl[@className='CellValuePresenter'][6]"
				[+] wcAPWPFTextBox dgcDiameterValue
					[ ] locator "//WPFContentControl[@className='CellValuePresenter'][7]"
				[+] WPFContentControl dgcDiameter
					[ ] locator "//WPFContentControl[@className='CellValuePresenter'][8]"
				[+] wcAPWPFTextBox dgcVessleTanValue
					[ ] locator "//WPFContentControl[@className='CellValuePresenter'][9]"
				[+] WPFContentControl dgcVessleTan
					[ ] locator "//WPFContentControl[@className='CellValuePresenter'][10]"
				[+] wcAPWPFTextBox dgcEnvironmentFactorValue
					[ ] locator "//WPFContentControl[@className='CellValuePresenter'][23]"
				[+] WPFContentControl dgcEnvironmentFactor
					[ ] locator "//WPFContentControl[@className='CellValuePresenter'][24]"
				[+] wcAPWPFTextBox dgcRelievingFlowValue
					[ ] locator "//WPFContentControl[@className='CellValuePresenter'][31]"
				[+] WPFContentControl dgcRelievingFlow
					[ ] locator "//WPFContentControl[@className='CellValuePresenter'][32]"
				[ ] 
				[+] SetCellData(INT Column, INT Row,STRING str, BOOLEAN bVerify optional)
					[+] //Description
						[ ] // SetCellData(0,2,"45"):  set data for position which is  the first column, the third row 
						[ ] // SetCellData(2,0,"45"):  set data for position which is the third column, the first row.
					[ ] 
					[ ] this.TypeKeys("<Ctrl-End>")
					[ ] this.TypeKeys("<Ctrl-Home>")
					[ ] sleep(1)
					[+] if(Column!=0)
						[ ] this.TypeKeys("<Right {Column}>")
					[+] else
						[ ] 
					[+] if(Row!=0)
						[ ] this.TypeKeys("<Down {Row}>")
					[+] else 
						[ ] 
					[+] if(str != null)
						[ ] //this.TypeKeys("{str}<Enter>")
						[+] list of STRING lststr = {...}
							[ ] str
						[ ] Clipboard.SetText(lststr)
						[ ] this.TypeKeys("<Ctrl-V>")
						[ ] this.TypeKeys("<Enter>")
						[ ] sleep(2)
						[ ] this.Setfocus()
						[+] if (bVerify!=null && bVerify==true)
							[ ] string sValue =this.GetCellValue(Column,Row)
							[+] if(Lower(str) == Lower(sValue))
								[ ] Log.Pass("Value modifies to {str} Pass.")
							[+] else
								[ ] Log.Error("Value modifies to {str} Fail, actually to {sValue}.")
					[ ] 
				[+] string GetCellValue(INT Column, INT Row)
					[+] //Description
						[ ] // GetCellValue(0,2,"45"):  get data for position which is  the first column, the third row 
						[ ] // GetCellValue(2,0,"45"):  get data for position which is the third column, the first row.
					[ ] this.TypeKeys("<Ctrl-End>")
					[ ] this.TypeKeys("<Ctrl-Home>")
					[ ] sleep(1)
					[ ] 
					[ ] // int i
					[+] // for i=1 to row-1 step 1
						[ ] // this.TypeKeys("<Down>")
						[ ] // sleep(0.5)
					[+] // for i=1 to coloumn-1 step 1
						[ ] // this.TypeKeys("<Right>")
						[ ] // sleep(0.5)
						[+] if(Column!=0)
							[ ] this.TypeKeys("<Right {Column}>")
						[+] else
							[ ] 
						[+] if(Row!=0)
							[ ] this.TypeKeys("<Down {Row}>")
						[+] else 
							[ ] 
						[ ] 
					[ ] Clipboard.SetText()
					[ ] this.TypeKeys("<Ctrl-C> 5")
					[ ] list lstStr = Clipboard.GetText()
					[ ] return lstStr[1]
				[+] SetCellValue(int Record,int Cell,string sValue)
					[ ] //Created by Weiwei Wu
					[ ] //Created it because setcelldata wont' work with the tables in properties->trvtreeview/Regression/Input
					[ ] list of WINDOW lwTable
					[ ] window wTable
					[ ] wTable=this.FindWPFItemsControl("//WPFItemsControl[@className='RecordListControl']")
					[+] do
						[ ] wTable.FindWPFContentControl("//WPFControl[@className='DataRecordPresenter'][{Record}]//WPFContentControl[@className='CellValuePresenter'][{Cell}]").TypeKeys("{sValue}<Enter>",0.1)
					[+] except
						[ ] Log.Fail("Fail to enter data into datagrid")
				[+] int GetRowCount()
					[ ] Clipboard.SetText()
					[ ] this.TypeKeys("<Ctrl-A 2> 2")
					[ ] this.TypeKeys("<Ctrl-C 2>")
					[ ] list lstStr = Clipboard.GetText()
					[ ] int rowCount = ListCount(lstStr) - 1
					[ ] return rowCount
				[+] string GetEndCellValue()
					[ ] this.TypeKeys("<Ctrl-End 2>")
					[ ] Clipboard.SetText()
					[ ] glWaitForMouseIdle()
					[ ] this.TypeKeys("<Ctrl-C> 2")
					[ ] list lstStr = Clipboard.GetText()
					[ ] return lstStr[1]
				[ ] 
		[+] //Economics Analysis
			[+] WPFItemsControl grpPrepareEconomics
				[ ] locator "//WPFItemsControl[@automationId='igRibbon_RibbonGroup_15']"
				[+] WPFButtonBase btnStreamPrice
					[ ] locator "//WPFButtonBase[1]"
				[+] WPFButtonBase btnProcessUtilities
					[ ] locator "//WPFButtonBase[2]"
				[+] WPFButtonBase btnCostOptions
					[ ] locator "//WPFButtonBase[3]"
			[+] WPFItemsControl grpEconomicsSolver
				[ ] locator "//WPFItemsControl[@automationId='igRibbon_RibbonGroup_38']"
				[+] WPFToggleButton chkEconomicsActive
					[ ] locator "//WPFToggleButton[1]"
				[+] WPFToggleButton chkAutoEvaluate
					[ ] locator "//WPFToggleButton[2]"
				[+] WPFButtonBase btnDeleteScenario
					[ ] locator "//WPFButtonBase[1]"
			[+] WPFItemsControl grpStatus
				[ ] locator "//WPFItemsControl[@automationId='igRibbon_RibbonGroup_16']"
				[+] WPFImage imgMapping
					[ ] locator "//WPFImage[1]"
				[+] WPFImage imgSizing
					[ ] locator "//WPFImage[2]"
				[+] WPFImage imgEvaluation
					[ ] locator "//WPFImage[3]"
			[+] WPFItemsControl grpIntegratedEconomics
				[ ] locator "//WPFItemsControl[@automationId='igRibbon_RibbonGroup_17']"
				[+] WPFButtonBase btnMap
					[ ] locator "//WPFButtonBase[1]"
				[+] WPFButtonBase btnSize
					[ ] locator "//WPFButtonBase[2]"
				[+] WPFButtonBase btnViewEquipment
					[ ] locator "//WPFButtonBase[3]"
				[+] WPFButtonBase btnEvaluate
					[ ] locator "//WPFButtonBase[4]"
				[+] WPFButtonBase btnInvestmentAnalysis
					[ ] locator "//WPFButtonBase[5]"
			[+] WPFButtonBase btnSendToEconomics
				[ ] locator "//WPFButtonBase[@caption='Send to Economics']"
			[+] WPFButton btnAddFeedStreams
				[ ] locator "//WPFButton[@caption='Add Feed Streams']"
			[+] WPFButton btnAddProductStreams
				[ ] locator "//WPFButton[@caption='Add Product Streams']"
			[ ] 
			[ ] //Costing Options
			[+] WPFGroupBox grpInvestmentOptions
				[ ] locator "//WPFGroupBox[@caption='Investment options']"
				[+] wcAPWPFTextBox txbOperatingLife
					[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
				[+] wcAPWPFTextBox txbPlantStartup
					[ ] locator "//WPFControl[@automationId='PART_editControl'][3]"
				[+] wcAPWPFComboBox cboOperatingLifeUnit
					[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
				[+] wcAPWPFComboBox cboPlantStartupUnit
					[ ] locator "//WPFControl[@automationId='PART_editControl'][4]"
				[+] wcAPWPFComboBox cboStartDay
					[ ] locator "//WPFControl[@automationId='PART_editControl'][5]"
				[+] wcAPWPFComboBox cboStartMonth
					[ ] locator "//WPFControl[@automationId='PART_editControl'][6]"
				[+] wcAPWPFComboBox cboStartYear
					[ ] locator "//WPFControl[@automationId='PART_editControl'][7]"
				[ ] 
				[ ] 
			[ ] 
		[-] //Activated Economic Analysis
			[-] WPFControl grpActivatedEconomicAnalysis
				[ ] locator "//WPFControl[@caption='Show the Economics Summary form.']"
				[-] WPFControl btnActivatedEconomicAnalysisOnOff
						[ ] locator "//WPFControl[@name='_expandedOnOffButton']"
				[+] WPFTextBlock txtActivatedEconomicAnalysisOn 
					[ ] locator "//WPFTextBlock[@automationId='onText']"
					[ ] //WPFTextBlock[@automationId='onText']
				[+] WPFTextBlock txtActivatedEconomicAnalysisOff
					[ ] locator "//WPFTextBlock[@automationId='offText']"
				[+] WPFImage imgCheckmark
					[ ] locator "//WPFControl[@automationId='ExpandedStatusTextTextImageStatusControl']/WPFImage[@automationId='doneImage']"
				[+] WPFTextBox txtActivatedEconomicAnalysisCapitalCost
					[ ] locator "//WPFControl[@automationId='ExpandedCapitalCostKpiControl']/WPFControl[@automationId='verticalDisplayText']/WPFTextBox"
				[+] WPFTextBox txtActivatedEconomicAnalysisUtilityCost
					[ ] locator "//WPFControl[@automationId='ExpandedUtilityCostKpiControl']/WPFControl[@automationId='verticalDisplayText']/WPFTextBox"
				[+] WPFControl txtActivatedEconomicAnalysisUtilityCostUnit
					[ ] locator "//WPFControl[@automationId='ExpandedUtilityCostKpiControl']/WPFControl[@automationId='verticalUnits']/WPFTextBox"
				[+] void OpenActivationBar()
					[+] if(this.txtActivatedEconomicAnalysisUtilityCostUnit.Exists()==false)
						[ ] APlus.Dashboard.Click()
				[+] boolean RunEconomics()
					[ ] int iTimeout=300
					[ ] int iTime=0
					[ ] this.OpenActivationBar()
					[ ] APlus.grpActivatedEconomicAnalysis.btnActivatedEconomicAnalysisOnOff.Exists(60)
					[ ] sleep(1)
					[ ] APlus.grpActivatedEconomicAnalysis.btnActivatedEconomicAnalysisOnOff.Click()
					[+] while (this.imgCheckmark.Exists()==false&&iTime<=iTimeout)
						[+] if wSimulationWarnings.Exists()
							[ ] sleep(1)
							[ ] wSimulationWarnings.btnOK.Click()
						[ ] iTime++
						[ ] sleep(1)
					[+] if(iTime>iTimeout)
						[ ] return false
					[+] else
						[ ] return true
				[ ] 
				[ ] 
			[+] DialogBox boxEconomicInfo
				[ ] locator "//DialogBox[@caption='INFO']"
				[+] PushButton btnOK
					[ ] locator "//PushButton[@caption='OK']"
		[+] //Summary Grid
			[+] Control grdSummaryGridTabControl
				[ ] locator "//FormsHost[@priorlabel='Template:']//Control[@automationId='_tabControl']"
			[+] Control grdSummaryGrid
				[ ] locator "//FormsHost[@priorlabel='Template:']//Control[@automationId='_summaryGrid']"
			[+] WPFButton btnSendToExcel
				[ ] locator "//WPFButton[@automationId='btnSendToExcel']"
		[+]  //TQ Curves
			[+] WPFCheckBox chkTQCurvesCalculateTQCurves
				[ ] locator "@automationId='PART_CheckBox'"
			[+] wcAPWPFTextBox txtTQCurvesNumberOfPoints
				[ ] locator "//WPFTextBlock[@automationId='TextBlock']"
			[+] WPFRadioButton rbTQCurvesConstantAtInletPressures
				[ ] locator "WPFRadioButton[@automationId='MMOptionButton_1']"
			[+] WPFRadioButton rbTQCurvesConstantAtOutletPressures
				[ ] locator "WPFRadioButton[@automationId='MMOptionButton_2']"
			[+] WPFRadioButton rbTQCurvesInletAndOutletPressures
				[ ] locator "@automationId='MMOptionButton_3'"
			[+] WPFRadioButton rbTQCurvesSpecifyPressures
				[ ] locator "@automationId='MMOptionButton_4'"
			[+] wcAPDataGrid dgTQCurvesID
				[ ] locator "//WPFControl[@automationId='PART_DataGrid']"
				[+] list of string GetAllData()
					[ ] Clipboard.SetText()
					[ ] this.DynamicInvoke("SelectAll")
					[ ] this.TypeKeys("<Ctrl-c 3>",0.5)
					[ ] return (Clipboard.GetText())
				[+] list of string GetColumnData(string sColumn)
					[ ] Clipboard.SetText()
					[ ] this.TextClick(sColumn)
					[ ] sleep(3)
					[ ] this.TypeKeys("<Ctrl-c 3>",0.5)
					[ ] return (Clipboard.GetText())
			[+] wcAPWPFComboBox cboTQCurvesProfileCurveID
				[ ] locator "//WPFControl[@automationId='MMComboEdit_1']"
			[+] wcAPDataGrid dgTQCurvesProfileResults
				[ ] locator "//WPFControl[@automationId='PART_DataGrid']"
				[+] list of string GetAllData()
					[ ] Clipboard.SetText()
					[ ] this.DynamicInvoke("SelectAll")
					[ ] this.TypeKeys("<Ctrl-c 3>",0.5)
					[ ] return (Clipboard.GetText())
				[+] list of string GetColumnData(string sColumn)
					[ ] Clipboard.SetText()
					[ ] this.TextClick(sColumn)
					[ ] sleep(3)
					[ ] this.TypeKeys("<Ctrl-c 3>",0.5)
					[ ] return (Clipboard.GetText())
		[+] //Thermal Results
			[+] WPFControl ctThermalResInletHotStreamPressure
				[ ] locator "//WPFControl[@automationId='MMVariableEdit_3']"
			[+] WPFControl ctThermalResOutletHotStreamPressure
				[ ] locator "//WPFControl[@automationId='MMVariableEdit_4']"
			[+] WPFControl ctThermalResInletColdStreamPressure
				[ ] locator "//WPFControl[@automationId='MMVariableEdit_9']"
			[+] WPFControl ctThermalResOutletColdStreamPressure
				[ ] locator "//WPFControl[@automationId='MMVariableEdit_10']"
			[ ] 
		[ ] 
		[+] //TDEPure&Binary Result
			[+] WPFTabItem tbTDEPureResults
				[ ] locator "//WPFTabItem[@caption='TDE*Results*']"
			[+] WPFButton btnSavePara
				[ ] locator "//WPFButton[@automationId='btnSavePure']"
			[+] WPFTabItem tbParameters
				[ ] locator "//WPFTabItem[@automationId='PureTabPara']"
			[+] WPFTabItem tbExperimental
				[ ] locator "//WPFTabItem[@automationId='MixtureTab' or @automationId='PureTabData']"
			[+] WPFTabItem tbPredictedValues
				[ ] locator "//WPFTabItem[@automationId='PureTabValue']"
			[+] WPFTabItem tbEvaluatedResults
				[ ] locator "//WPFTabItem[@automationId='PureTabResult']"
			[+] WPFTabItem tbConsistencyTest
				[ ] locator "//WPFTabItem[@automationId='TestTab']"
			[+] WPFTreeView trvData
				[ ] locator "//WPFTreeView[@automationId='treeData']"
			[+] WPFGroupBox grpPurePropList
				[ ] locator "//WPFGroupBox[@automationId='GBPurePropList']"
				[+] WPFListBox lbPureProp
					[ ] locator "//WPFListBox[@automationId='PurePropList']"
			[+] WPFButton btnSaveBinaryData//Binary
				[ ] locator "//WPFButton[@automationId='btnSaveBinary']"
			[+] WPFButton btnSavePureData
				[ ] locator "//WPFButton[@automationId='btnSavePure']"
			[+] WPFButton btnDataRegression
				[ ] locator "//WPFButton[@automationId='btnRegressBinary']"
			[+] WPFButton btnRunConsistencyTest
				[ ] locator "//WPFButton[@automationId='btnRunTest']"
			[+] WPFTextBox tbCitationExpData
				[ ] locator "//WPFTextBox[@automationId='textboxCitationExpData']"
		[ ] 
		[+] //Reactions
			[ ] //Reactions Tab
			[+] WPFButton btnGenerateReactions
				[ ] locator "//WPFButton[@caption='Generate Reactions']"
			[+] WPFButton btnRateConstants
				[ ] locator "//WPFButton[@caption='Rate Constants*']"
			[ ] //Rate Constants Tab
			[+] WPFButton btnGetRateConstants
				[ ] locator "//WPFButton[@caption='Get Rate Constants']"
		[ ] 
		[ ] //BatchSep form
		[+] Control ctlBatchSep
			[ ] locator "//Control[@automationId='ctlBatchSep']"
			[+] TreeView tvwNodeTree
				[ ] locator "//Tree[@automationId='tvwNodeTree']"
		[ ] 
		[+] WPFComboBox	cboCommonCbo
			[ ] locator "//WPFComboBox[@automationId='PART_FocusSite']"
		[ ] 
		[ ] //==============Appended By Susan Shi===========
		[ ] //Exchanger Analysis
		[+] WPFToggleButton	btnActivatedAnalysis
			[ ] locator "//WPFToggleButton[@automationId='igRibbon_btnActivatedAnalysis']"
		[+] WPFImage	imgActivatedExchangerAnalysis
			[ ] locator "//WPFImage[@caption='Activated Exchanger Analysis']"
		[+] WPFUserControl grpModelStatus
			[ ] locator "//WPFUserControl[@caption='Model Status']"
		[+] WPFUserControl grpOperationalRisk
			[ ] locator "//WPFUserControl[@caption='Operational Risk']"
		[+] WPFButton	btnMinimizeEAPane
			[ ] locator "//WPFButton[@caption='Minimize the Exchanger Analysis pane. Aspen Process Exchanger Analysis remains active.']"
		[+] WPFButton	btnMaximizeEAPane
			[ ] locator "//WPFButton[@caption='Click here to expand the Exchanger Analysis pane.']"
		[+] WPFButton	btnDeactivateEAPane
			[ ] locator "//WPFButton[@caption='Deactivate Exchanger Analysis. Aspen Process Exchanger Analysis license key will be released.']"
		[+] WPFButton	btnShoworHideSummary
			[ ] locator "//WPFControl[@className='EdrActivationDashboardItem']//WPFButton[3]" 
		[+] DialogBox dlgNoHeatExchangerModels
			[ ] locator "/Dialog[@caption='No Heat Exchanger Models']"
			[+] PushButton btnOK
				[ ] locator "//PushButton[@caption='OK']"
		[+] WPFButton	btnCloseDocument
			[ ] locator "//WPFButtonBase[@automationId='PART_CloseDocumentButton']"
		[+] WPFButtonBase	btnDistillationSynthesis
			[ ] locator "//WPFButtonBase[@automationId='igRibbon_btnDistilSynthesis']"
		[+] WPFGroupBox	grpComponents
			[ ] locator "//WPFGroupBox[@automationId='grpComponents']"
		[+] WPFCheckBox	chkVLLE
			[ ] locator "//WPFCheckBox[@automationId='chkVLLEnvelope']"
		[+] WPFCheckBox	chkLLE
			[ ] locator "//WPFCheckBox[@automationId='chkLLEnvelope']"
		[+] WPFToggleButton	btnAddCurve
			[ ] locator "//WPFToggleButton[@automationId='tbBtnCurve']"
		[+] WPFButtonBase	btnAzeotropeSearch
			[ ] locator "//WPFButtonBase[@automationId='igRibbon_btnAzeoSearch']"
		[+] WPFListView		lstComponent
			[ ] locator "//WPFListView[@automationId='lvComponents']"
		[+] WPFComboBox	cboPhases
			[ ] locator "//WPFComboBox[@automationId='cboPhases']"
		[+] WPFComboBox	cboModel
			[ ] locator "//WPFComboBox[@automationId='cboLLEModel']"
		[+] WPFTextBox		txtPressure
			[ ] locator "//WPFTextBox[@automationId='txtPressure']"
		[+] WPFComboBox	cboPressureUnit
			[ ] locator "//WPFComboBox[@automationId='cboPresUnit' or @name='cboPressureUnit']"
		[+] WPFTextBox		txtTempature
			[ ] locator "//WPFTextBox[@automationId='txtLLE']"
		[+] BrowserWindow	bwReport
			[ ] locator "//BrowserWindow[@automationId='webBrowser1']"
		[+] WPFButton	btnSaveReport
			[ ] locator "//WPFButton[@automationId='btnSave']"
		[+] DialogBox	dlgSaveHTMLDocument
			[ ] locator "//Dialog[@caption='Save HTML Document']"
			[+] ComboBox	cboSaveAsType
				[ ] locator "//ComboBox[@caption='Save as type:']"
			[+] PushButton	btnSave
				[ ] locator "//PushButton[@caption='Save']"
			[+] ComboBox	cboFileName
				[ ] locator "//ComboBox[@caption='File name:']"
		[+] WPFTreeView	trvAzeotropeSearch
			[ ] locator "//WPFTreeView[@automationId='explorerTree']"
		[+] WPFButtonBase	btnControlPanel
			[ ] locator "//WPFButtonBase[@caption='Control Panel']"
		[+] WPFButtonBase	btnFlowsheet
			[ ] locator "//WPFButtonBase[@caption='Flowsheet']"
		[+] AnyWin tpgVary
			[+] wcAPWPFComboBox	cboVariable
				[ ] locator "//WPFControl[@automationId='PART_editControl']"
			[+] wcAPWPFComboBox	cboType
				[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
			[+] wcAPWPFComboBox	cboBlock
				[ ] locator "//WPFControl[@automationId='PART_editControl'][3]"
			[+] wcAPWPFComboBox	cboVariable2
				[ ] locator "//WPFControl[@automationId='PART_editControl'][4]"
			[+] WPFTextBox		txtLower
				[ ] locator "//WPFTextBox[@automationId='PART_TextBoxControl']"
			[+] WPFTextBox		txtUpper
				[ ] locator "//WPFTextBox[@automationId='PART_TextBoxControl'][2]"
			[+] WPFRadioButton	rdbIncrement
				[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_3']/WPFRadioButton[@automationId='PART_RadioButton']"
			[+] WPFTextBox		txtIncrement
				[ ] locator "//WPFTextBox[@automationId='PART_TextBoxControl'][3]"
		[+] AnyWin tpgDefine
			[+] WPFRadioButton	rdbBlocks
				[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_2']/WPFRadioButton[@automationId='PART_RadioButton']"
			[+] wcAPWPFComboBox	cboType
				[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
			[+] wcAPWPFComboBox	cboBlock
				[ ] locator "//WPFControl[@automationId='PART_editControl'][3]"
			[+] wcAPWPFComboBox	cboVariable
				[ ] locator "//WPFControl[@automationId='PART_editControl'][4]"
		[+] AnyWin tpgTabulate
			[+] WPFButton	btnFillVariables
				[ ] locator "//WPFButton[@caption='Fill Variables']"
			[+] WPFButton	btnTableFormat
				[ ] locator "//WPFButton[@caption='Table Format']"
		[+] wcAPDataGrid	dgGrid
			[ ] locator "//WPFControl[@automationId='PART_DataGrid']"
		[+] wcAPWPFComboBox	cboFlowBasis
			[ ] locator "//WPFControl[@automationId='PART_editControl'][5]"
		[+] AnyWin tpgSpecifications
			[+] WPFComboBox	cboCombox
				[ ] locator "//WPFComboBox[@automationId='PART_FocusSite']"
			[+] WPFTextBox	txtPressure
				[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
			[+] WPFControl	ctrlPressureUnit
				[ ] locator "//WPFControl[@automationId='PART_editControl'][3]"
			[+] WPFTextBox	txtTempature
				[ ] locator "//WPFControl[@automationId='PART_editControl'][4]"
			[+] WPFControl	ctrlTempatureUnit
				[ ] locator "//WPFControl[@automationId='PART_editControl'][5]"
			[+] WPFRadioButton	rdbHeatDuty
				[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_2']/WPFRadioButton[@automationId='PART_RadioButton']"
			[+] WPFRadioButton	rdbTempature
				[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_1']/WPFRadioButton[@automationId='PART_RadioButton']"
			[+] WPFTextBox	txtHeatDuty
				[ ] locator "//WPFControl[@automationId='PART_editControl'][6]"
			[+] WPFControl	ctrlHeatDutyUnit
				[ ] locator "//WPFControl[@automationId='PART_editControl'][7]"
			[+] WPFGroupBox	grpOperationConditions
				[ ] locator "//WPFGroupBox[@caption='Operating conditions']"
			[+] WPFTextBox		txtFluidPhase
				[ ] locator "//WPFControl[@automationId='PART_editControl'][8]"
			[+] WPFTextBox		txtSolutionPhase
				[ ] locator "//WPFControl[@automationId='PART_editControl'][9]"
			[+] WPFCheckBox	chkIncludeVaporPhase
				[ ] locator "//WPFCheckBox[@automationId='PART_CheckBox']"
			[+] WPFCheckBox	chkMergeAll
				[ ] locator "//WPFCheckBox[@automationId='PART_CheckBox'][2]"
			[+] WPFControl	ctrlType
				[ ] locator "//WPFControl[@automationId='PART_editControl'][5]"
			[+] WPFControl	ctrlSpecification
				[ ] locator "//WPFControl[@automationId='PART_editControl'][7]"
			[+] WPFTextBox	txtValue
				[ ] locator "//WPFControl[@automationId='PART_editControl'][8]"
			[+] WPFControl	ctrlValueUnit
				[ ] locator "//WPFControl[@automationId='PART_editControl'][9]"
			[+] WPFTextBox	txtConstantUA
				[ ] locator "//WPFControl[@automationId='PART_editControl'][12]"
			[+] WPFControl	ctrlConstantUAUnit
				[ ] locator "//WPFControl[@automationId='PART_editControl'][13]"
			[+] WPFTextBox	txtExchangerArea
				[ ] locator "//WPFControl[@automationId='PART_editControl'][10]"
			[+] WPFControl	ctrlExchangerAreaUnit
				[ ] locator "//WPFControl[@automationId='PART_editControl'][11]"
			[+] WPFControl	ctrlHotFluid
				[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
			[ ] 
		[ ] // Blocks-->EDR Browser
		[+] Control areaGreyForm
			[ ] locator "//FormsHost[2]"
			[+] TextField	txtSubPages
				[ ] locator "//TextField[@className='AxATVDataBrowser.AxDataBrowser']"
		[+] AnyWin	tpgEDROptions
			[+] WPFComboBox	cboCombox
				[ ] locator "//WPFComboBox[@automationId='PART_FocusSite']"
			[+] WPFButton	btnBrowserInputFile
				[ ] locator "//WPFButton[@automationId='PART_BUTTON'][6]"
				[ ] //locator "//WPFButton[@automationId='PART_BUTTON']"
			[+] WPFButton	btnBrowserTemplateFile
				[ ] locator "//WPFButton[@automationId='PART_BUTTON'][8]"
			[+] WPFControl	ctrlSaveAll
				[ ] locator "//WPFControl[@className='AesXamComboEdit']"
		[ ] // Properties Mode
		[+] WPFItemsControl	btnAnalysis
			[ ] locator "//WPFItemsControl[@automationId='igRibbon_grpPropertiesAnalysis']"
		[+] WPFButtonBase	btnTernaryDiag
			[ ] locator "//WPFButtonBase[@automationId='igRibbon_btnPropAnalysis_Ternary']"
		[+] WPFGroupBox	grpTernarySystem
			[ ] locator "//WPFGroupBox[@caption='Ternary system']"
		[+] AnyWin	tpgOverall
			[+] WPFTextBox		txtUA
				[ ] locator "//WPFControl[@automationId='PART_editControl'][10]"
			[+] WPFControl		ctrlUAUnit
				[ ] locator "//WPFControl[@automationId='PART_editControl'][11]"
		[+] WPFToggleButton	btnMaxMinNaviPan
			[ ] locator "//WPFToggleButton[@automationId='MinimizeButton']"
		[ ] 
		[+] AnyWin	tpgUtilityInput
			[+] WPFGroupBox	grpHeatOrCoolVal
				[ ] locator "//WPFGroupBox[@caption='Heating/Cooling value']"
				[ ] 
		[+] AnyWin	tpgPSD
			[+] WPFControl	ctrlLowerLimit
				[ ] locator "//WPFControl[@automationId='PART_editControl'][4]"
			[+] WPFControl	ctrlUpperLimit
				[ ] locator "//WPFControl[@automationId='PART_editControl'][5]"
			[+] WPFControl	btnCreatePSDMesh
				[ ] locator "//WPFButton[@caption='Create PSD Mesh']"
			[+] WPFControl	ctrlNumOfIntervals
				[ ] locator "//WPFControl[@automationId='MMSpinBox_1']"
			[+] wcAPWPFComboBox	cboUnit
				[ ] locator "//WPFControl[@automationId='PART_UnitEdit']"
			[+] WPFControl	ctrlSizeUnit
				[ ] locator "//WPFControl[@automationId='PART_editControl'][6]"
		[+] AnyWin	tpgSimuStreamsInput
			[+] WPFButton	btnEditPSDMesh
				[ ] locator "//WPFButton[@caption='Edit PSD Mesh']"
			[+] WPFRadioButton	rdbADistributionFunction
				[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_2']"
			[+] WPFRadioButton	rdbUserSpecifiedValues
				[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_1']"
			[+] WPFControl	txtStandardDeviation
				[ ] locator "//WPFControl[@automationId='textBox'][4]"
			[+] wcAPWPFComboBox	cboStandardDeviationUnit
				[ ] locator "//WPFControl[@automationId='PART_UnitEdit'][5]"
			[+] WPFControl	txtD50
				[ ] locator "//WPFControl[@automationId='textBox'][5]"
			[+] wcAPWPFComboBox	cboD50Unit
				[ ] locator "//WPFControl[@automationId='PART_UnitEdit'][6]"
			[+] WPFButton	btnCalculate
				[ ] locator "//WPFButton[@caption='Calculate']"
		[+] WPFButtonBase	btnExportPlot
			[ ] locator "//WPFButtonBase[@automationId='ExportPlotInfoButtonTool']"
		[ ] 
		[+] WPFCheckBox	chkCommonChk
			[ ] locator "//WPFCheckBox[@automationId='PART_FocusSite']"
		[+] WPFMenuItem	muiAddNew
			[ ] locator "//WPFMenuItem[@caption='Add _New']"
		[+] WPFMenuItem	muiEnterQuery
			[ ] locator "//WPFMenuItem[@caption='Enter _Query...']"
		[+] WPFMenuItem	muiCloseOtherTabs
			[ ] locator "//WPFMenuItem[@caption='Close Other Tabs']"
		[+] WPFMenuItem	muiActivate
			[ ] locator "//WPFMenuItem[@caption='_Activate']"
		[+] WPFMenuItem	muiHide
			[ ] locator "//WPFMenuItem[@caption='_Hide']"
		[+] WPFMenuItem	muiDeactivate
			[ ] locator "//WPFMenuItem[@caption='De_activate']"
		[+] WPFMenuItem	muiPaste
			[ ] locator "//WPFMenuItem[@caption='_Paste']"
		[ ] 
		[+] AnyWin		tpgTransfer
			[+] WPFRadioButton	rdbBlockOrStreamVariable
				[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_2']"
			[+] wcAPWPFComboBox	cboType
				[ ] locator "//WPFControl[@automationId='MMComboEdit_5']"
			[+] wcAPWPFComboBox	cboBlock
				[ ] locator "//WPFControl[@automationId='MMComboEdit_6']"
			[+] wcAPWPFComboBox	cboVariable
				[ ] locator "//WPFControl[@automationId='MMComboEdit_7']"
			[+] wcAPWPFComboBox	cboVariableNumber
				[ ] locator "//WPFControl[@automationId='MMAdvancedComboEdit_1']"
			[+] wcAPWPFComboBox	cboBlockonToPage
				[ ] locator "//WPFControl[@automationId='MMComboEdit_3']"
		[+] AnyWin		tpgSolidsConveying
			[+] WPFRadioButton		rdbDilutePhase
				[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_1']"
			[+] WPFRadioButton		rdbDensePhase
				[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_2']"
			[+] WPFRadioButton		rdbMuschelknautz
				[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_3']"
			[+] WPFRadioButton		rdbSiegel
				[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_4']"
			[+] WPFCheckBox	chkConsiderInitialAcceleration
				[ ] locator "//WPFCheckBox[@automationId='PART_CheckBox']"
			[+] wcAPWPFComboBox	cboSaltationVelocityMethod
				[ ] locator "//WPFControl[@name='cboSaltv']"
			[ ] 
		[+] AnyWin		tpgCalculator
			[+] wcAPWPFComboBox	cboVariable
				[ ] locator "//WPFControl[@automationId='MMAdvancedComboEdit_1']"
			[+] WPFRadioButton		rdbImportVariable
				[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_7']"
			[+] WPFRadioButton		rdbExportVariable
				[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_8']"
			[+] WPFRadioButton		rdbTearVariable
				[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_8']"
			[+] WPFControl		txtInitialValue
				[ ] locator "//WPFControl[@automationId='MMTextEdit_3']"
			[+] WPFRadioButton		rdbFortran
				[ ] locator "//WPFRadioButton[@caption='Fortran']"
			[+] WPFRadioButton		rdbExcel
				[ ] locator "//WPFRadioButton[@caption='Excel']"
			[+] WPFTextBox		txtStatements
				[ ] locator "//WPFTextBox[@automationId='PART_TextBoxControl']"
			[+] WPFControl		txtParameterNo
				[ ] locator "//WPFControl[@automationId='MMTextEdit_1']"
			[+] WPFControl	txtLowerLimit
				[ ] locator "//WPFControl[@automationId='MMFortranLine_1']"
			[+] WPFControl	txtUpperLimit
				[ ] locator "//WPFControl[@automationId='MMFortranLine_2']"
		[+] WPFControl	txtIncrement
			[ ] locator "//WPFControl[@automationId='MMFortranLine_3']"
		[+] wcAPWPFComboBox	cboZero
			[ ] locator "//WPFControl[@automationId='MMComboEdit']"
		[+] wcAPWPFComboBox	cboFirst
			[ ] locator "//WPFControl[@automationId='MMComboEdit_1']"
		[+] wcAPWPFComboBox	cboSecond
			[ ] locator "//WPFControl[@automationId='MMComboEdit_2']"
		[+] wcAPWPFComboBox	cboThird
			[ ] locator "//WPFControl[@automationId='MMComboEdit_3']"
		[+] wcAPWPFComboBox	cboForth
			[ ] locator "//WPFControl[@automationId='MMComboEdit_4']"
		[+] wcAPWPFComboBox	cboFifth
			[ ] locator "//WPFControl[@automationId='MMComboEdit_5']"
		[+] wcAPWPFComboBox	cboSeventh
			[ ] locator "//WPFControl[@automationId='MMComboEdit_7']"
		[+] WPFListBox	lstAvailable
			[ ] locator "//WPFListBox[@automationId='Part_OptionsBox']"
		[+] WPFListBox	lstSelected
			[ ] locator "//WPFListBox[@automationId='Part_SelectionBox']"
		[+] WPFRadioButton	rdbFirst
			[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_1']"
		[+] WPFRadioButton	rdbSecond
			[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_2']"
		[+] WPFCheckBox	chkCommon
			[ ] locator "//WPFCheckBox[@automationId='PART_CheckBox']"
		[+] WPFScrollBar	vScrollBar
			[ ] locator "//WPFScrollBar[@automationId='PART_VerticalScrollBar']"
		[+] WPFButton	btnDefineNew
			[ ] locator "//WPFButton[@automationId='Define New']"
		[+] WPFButton	btnSolids
			[ ] locator "//WPFButton[@caption='Solids']"
		[+] WPFButton	btnSearch
			[ ] locator "//WPFButton[@caption='Search']"
		[+] wcAPDataGrid	dgGridSecond
			[ ] locator "//WPFControl[@automationId='PART_DataGrid'][2]"
		[+] DialogBox	dlgWindowsSecurity
			[ ] locator "//DialogBox[@caption='Windows Security']"
			[+] TextField	txtUserName
				[ ] locator "//TextField"
			[+] TextField	txtPassword
				[ ] locator "//TextField[2]"
			[+] PushButton	btnOK
				[ ] locator "//PushButton[@caption='OK']"
		[+] WPFButton	btnViewVariables
			[ ] locator "//WPFButton[@caption='View Variables']"
		[ ] 
		[ ] // EDR related
		[-] WPFControl		ctrlEDRDashboard
			[ ] locator "//WPFControl[@automationId='edrDashboardItem']"
			[-] WPFControl ctrlUnKnown
				[ ] locator "//WPFControl[@automationId='expandedSimpleCount' or @automationId='simpleCount']"
			[-] WPFControl		ctrlOK
				[ ] locator "//WPFControl[@automationId='expandedOKCount' or @automationId='okCount']"
			[-] WPFControl		ctrlAtRisk
				[ ] locator "//WPFControl[@automationId='expandedRiskCount' or @automationId='riskCount']"
			[ ] 
			[ ] 
		[ ] 
		[-] WPFToggleButton	btnActivateEDR
			[ ] locator "//WPFToggleButton[@automationId='btnEdr*Setting']"
		[+] WPFTextBlock		txtCaption
			[ ] locator "//WPFControl[@automationId='edrDashboardItem']/WPFTextBlock[@caption='EDR Exchanger Feasibility']"
		[-] WPFCheckBox		chkShowRiskStatus
			[ ] locator "//WPFCheckBox[@automationId='chkShowRiskStatus']"
		[+] WPFCheckBox		chkShowModelStatus
			[ ] locator "//WPFCheckBox[@automationId='chkShowModelStatus']"
		[+] WPFCheckBox		chkShowLegend
			[ ] locator "//WPFCheckBox[@automationId='chkShowLegend']"
			[ ] 
			[ ] 
		[+] WPFTabItem	tbiExchangerSummary
			[ ] locator "//WPFTabItem[@caption='Exchanger Summary Table Exchanger Summary Table']"
		[+] WPFDataGrid	dgGeneralTable
			[ ] locator "//WPFDataGrid[@automationId='datagrid']"
		[+] WPFRadioButton	rdbShortcut
			[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_1']"
		[+] WPFRadioButton	rdbDetailed
			[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_2']"
		[+] WPFRadioButton	rdbShellTube
			[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_31']"
		[+] WPFRadioButton	rdbKettleReboiler
			[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_32']"
		[+] WPFRadioButton	rdbThermosyphon
			[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_33']"
		[+] WPFRadioButton	rdbAirCooled
			[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_34']"
		[+] WPFRadioButton	rdbPlate
			[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_35']"
		[+] WPFButtonBase	btnExpandOrCollapse
			[ ] locator "//WPFButtonBase[@automationId='buttonExpandOrCollapse']"
		[-] WPFButtonBase	btnRightScroll
			[ ] locator "//WPFButtonBase[@automationId='rightScrollButton']"
		[+] WPFButtonBase	btnLeftScroll
			[ ] locator "//WPFButtonBase[@automationId='leftScrollButton']"
		[+] AnyWin		tpgEDRBrowser
			[+] WPFComboBox	cboTEMAType1
				[ ] locator "//WPFComboBox[@automationId='cbList'][2]"
			[+] WPFComboBox	cboTEMAType2
				[ ] locator "//WPFComboBox[@automationId='cbList'][3]"
			[+] WPFComboBox	cboTEMAType3
				[ ] locator "//WPFComboBox[@automationId='cbList'][4]"
			[+] WPFComboBox	cboTubePatten
				[ ] locator "//WPFComboBox[@automationId='cbList'][7]"
			[+] WPFTextBox	txbEstimatedPressureDrop1
				[ ] locator "//WPFUserControl[@automationId='EstimatedPressureDrop1']/WPFTextBox[@automationId='tbEdit']"
			[+] WPFTextBox	txbEstimatedPressureDrop2
				[ ] locator "//WPFUserControl[@automationId='EstimatedPressureDrop2']/WPFTextBox[@automationId='tbEdit']"
			[+] WPFTextBox	txbTotalNumOfChannels1
				[ ] locator "//WPFUserControl[@automationId='TotalNumberChannels1']/WPFTextBox[@automationId='tbEdit']"
			[+] WPFTextBox	txbTotalNumOfChannels2
				[ ] locator "//WPFUserControl[@automationId='TotalNumberChannels2']/WPFTextBox[@automationId='tbEdit']"
			[+] WPFTextBox	txbChevronAngle
				[ ] locator "//WPFUserControl[@automationId='ChevronAngleToHorizontal']/WPFTextBox[@automationId='editBox']"
			[+] WPFTextBox	txbHorizontalPort
				[ ] locator "//WPFUserControl[@automationId='HorizontalPortCentreDistance']/WPFTextBox[@automationId='editBox']"
			[+] WPFTextBox	txbVerticalPort
				[ ] locator "//WPFUserControl[@automationId='VerticalPortCentreDistance']/WPFTextBox[@automationId='editBox']"
			[+] WPFListView	lsvStatusView
				[ ] locator "//WPFListView[@automationId='listView']"
			[ ] 
			[ ] 
		[+] WPFTextBox	txtThird
			[ ] locator "//WPFControl[@automationId='textBox'][3]"
		[+] WPFTextBox	txtFirst
			[ ] locator "//WPFControl[@automationId='textBox']"
		[-] WPFButton		btnReconcileEDR
			[ ] locator "//WPFButton[@caption='Copy calculated UA to input']"
		[+] WPFControl		ctrlTabNavigation
			[ ] locator "//WPFControl[@automationId='_navigation']"	
			[+] WPFTreeView	trvParttree
				[ ] locator "//WPFTreeView[@automationId='Part_Tree']"
		[+] WPFToggleButton	btnFilterHierarchy
			[ ] locator "//WPFToggleButton[@automationId='filterContainer']"
		[+] WPFToggleButton	btnFilterStatus
			[ ] locator "//WPFToggleButton[@automationId='filterStatus']"
		[+] WPFListBox	lstGeneral
			[ ] locator "//WPFListBox[@automationId='listbox']"
		[+] WPFCheckBox	chkSelectAll
			[ ] locator "//WPFCheckBox[@caption='(Select All)']"
		[+] WPFCheckBox	chkH1HRIG
			[ ] locator "//WPFCheckBox[@caption='H1.HRIG']"
		[+] WPFButton		btnPopupOK
			[ ] locator "//WPFButton[@caption='OK']"
			[ ] 
		[+] WPFCheckBox	chkConvertToRigorous
			[ ] locator "//WPFCheckBox[@caption='Convert to Rigorous']"
		[ ] 
		[ ] 
		[ ] 
		[ ] //EE
		[+] WPFControl	ctrlEEDashboard
			[ ] locator "//WPFControl[@caption='Show the Economics Summary form.']"
			[+] WPFTextBlock	txtCaption
				[ ] locator "//WPFTextBlock[@automationId='ExpandedEconomicsLabel']"
		[ ] 
		[ ] 
		[ ] //==============Appended Done===========
		[ ] 
	[ ] 
	[-] //=====================Method============================//
		[-] ClickExchanger()
			[-] //for (int i =0;i<5;i++)
				[ ] //if ()
			[ ] this.SetActive()
			[ ] sleep(3)
			[ ] RECT rect = this.btnActivateEDR.GetRect ()
			[ ] this.MOVEMOUSE (1,rect.xPos+rect.xSize/2,rect.yPos+rect.ySize/2)
			[ ] sleep(5)
			[ ] // 
			[ ] // AH.btnExchanger.Image.Click()
			[-] do
				[ ] this.pressmouse(1,rect.xPos+25,rect.yPos+15)
				[ ] this.releasemouse(1,rect.xPos+25,rect.yPos+15)
				[ ] this.chkShowModelStatus.SetFocus()
			[-] except
				[ ] this.pressmouse(1,rect.xPos+25,rect.yPos+15)
				[ ] this.releasemouse(1,rect.xPos+25,rect.yPos+15)
				[ ] this.chkShowModelStatus.SetFocus()
		[ ] 
		[ ] //Initialization
		[-] real Launch()
			[ ] //Launch the Aspen Plus
			[ ] 
			[ ] // //Register Aspen Plus to make sure no Registration dialog box pops up when launch A+
			[+] // if (glReg_CheckKey(HKEY_CURRENT_USER,"Software","AspenTech"))
				[+] // if (glReg_CheckValue(HKEY_CURRENT_USER,"Software\AspenTech","UserRegistered") == true)
					[ ] // SYS_SetRegistryValue (HKEY_CURRENT_USER,"Software\AspenTech", "UserRegistered", "1")
				[+] // else
					[ ] // Reg_CreateValue(HKEY_CURRENT_USER,"Software\AspenTech", "UserRegistered", "1")
			[+] // else
				[ ] // Reg_CreateKey(HKEY_CURRENT_USER,"Software\AspenTech")
				[ ] // Reg_CreateValue(HKEY_CURRENT_USER,"Software\AspenTech", "UserRegistered", "1")
				[ ] // 
			[ ] // // 
			[ ] // this.Invoke()
			[ ] // 
			[ ] // this.SetActive()
			[ ] // this.Maximize()
			[ ] return this.launchFaster()
			[ ] 
		[-] real LaunchFaster(boolean Initialize optional,boolean bMaximize optional)
			[ ] // Launch Aspen Plus
			[ ] //   Usage:  AP.Launch()
			[ ] //Launch modified by Trevor
			[ ] 
			[ ] 
			[-] if( Initialize == NULL)
				[ ] Initialize = FALSE
			[-] if (bMaximize==NULL)
				[ ] bMaximize=TRUE
				[ ] 
			[ ] SYS_Execute("{sAspenPlus_sProjectDir}data\datain\tools\Register.bat")
			[ ] 
			[ ] 
			[-] if( Initialize == FALSE)
				[ ] Agent.SetOption(OPT_APPREADY_TIMEOUT, 180)
			[-] else
				[ ] Agent.SetOption(OPT_APPREADY_TIMEOUT, 1)
			[ ] 
			[ ] hOpenTimer = NULL
			[+] if( hOpenTimer == NULL || timerState(hOpenTimer) == TS_STOPPED)
				[+] if( hOpenTimer != NULL)
					[ ] timerDestroy(hOpenTimer)
				[ ] hOpenTimer = timerCreate()
				[ ] timerStart(hOpenTimer)
			[ ] 
			[ ] 
			[-] do
				[ ] this.Invoke()
			[-] except
				[ ] exceptClear()
			[+] if(!Initialize)
				[+] while( !this.Exists() && timerValue(hOpenTimer) < 180)
					[ ] sleep(0.2)
				[+] if( timerValue(hOpenTimer) >= 180 )
					[ ] Log.Error("ERROR: Aspen Plus Failed to appear in 10 Minutes")
					[ ] return -1
				[ ] 
				[ ] 
				[ ] 
			[ ] int i=0
			[ ] 
			[ ] 
			[+] if( Initialize == TRUE)
				[ ] Agent.SetOption (OPT_SYNC_TIMEOUT, 1)
				[ ] i = 0
				[+] while(!wAspenPropertiesDatabaseConfiguration.Exists() && i < 1200)
					[ ] i++
					[ ] sleep(1)
				[ ] 
				[ ] 
				[+] if(wAspenPropertiesDatabaseConfiguration.Exists())
					[ ] Log.Pass("{TimerStr(hOpenTimer)} ------  Initializing Aspen Properties Databanks")
				[+] else
					[ ] Log.Error("{TimerStr(hOpenTimer)} ------  Failed to Find {chr(34)}Aspen Properties Database Configuration{chr(34)} Indication Window")
				[ ] 
				[+] if(gldlgLicenseManager.Exists())			//added
					[ ] gldlgLicenseManager.SetActive()
					[ ] gldlgLicenseManager.btnSnooze.Click()
					[ ] sleep(2)
				[ ] 
				[+] do
					[ ] string current
					[ ] string last = ""
					[ ] int timeout = 2400
					[ ] 
					[ ] wAspenPropertiesDatabaseConfiguration.Exists(2400)
					[+] while( wAspenPropertiesDatabaseConfiguration.Exists() && i <  timeout)
						[ ] sleep(1)
						[+] do
							[ ] current= wAspenPropertiesDatabaseConfiguration.txtStatus.TextCapture()
						[+] except
							[ ] i++
							[ ] continue
						[+] if( current != last)
							[ ] PRINT("{TimerStr(hOpenTimer)}  ------ {current}")
						[ ] last = current
						[ ] i+=1
						[ ] sleep(1)
				[+] except
					[ ] exceptLog()
					[ ] exceptClear()
					[+] if( wAspenPropertiesDatabaseConfiguration.Exists())
						[ ] wAspenPropertiesDatabaseConfiguration.WaitForDisappearance(600)
				[ ] Agent.SetOption (OPT_SYNC_TIMEOUT, 180)
			[ ] 
			[ ] 
			[ ] i = 0
			[+] while( !(this.mnuFile.Exists() || this.tbGetStarted.Exists()) && i < 360)
				[ ] sleep(2)
				[ ] i++
			[ ] real foundProgram, foundLicense
			[+] if( this.Exists())
				[ ] PRINT("{TimerStr(hOpenTimer)} ------	Aspen Plus Appeared")
				[ ]  foundProgram = timerValue(hOpenTimer)
			[+] else
				[ ] int iTimeOutJ = 0
				[+] while (!this.Exists() && iTimeOutJ < 400)
					[ ] sleep(3)
					[ ] iTimeOutJ++
				[ ] 
				[+] if( !this.Exists())
					[ ] Log.Error("{TimerStr(hOpenTimer)} ------	Aspen Plus Has Failed to Start")
					[ ] 
			[ ] 
			[+] if( wAspenTechnologyLicenseManagerReminder.Exists())
				[ ] wAspenTechnologyLicenseManagerReminder.SetActive()
				[ ] wAspenTechnologyLicenseManagerReminder.btnSnooze.Click()
				[ ] sleep(1)
			[ ] 
			[ ] 
			[+] if( APlus.exists())
				[+] while( APlus.TextExists("Waiting for License Check to Complete") && timerValue(hOpenTimer) < 720)
					[ ] sleep(0.1)
				[+] if( !APlus.TextExists("Waiting for License Check to Complete") )
					[ ] PRINT("{TimerStr(hOpenTimer)}  ------	Aspen Plus License Aquired")
					[ ] foundLicense = timerValue(hOpenTimer)
				[+] else
					[ ] PRINT("TimerStr(hOpenTimer)}  ------	Aspen Plus Failed to Aquire License")
			[+] else
				[+] if(APR.Exists(120))
					[+] while( APR.TextExists("Waiting for License Check to Complete") && timerValue(hOpenTimer) < 720)
						[ ] sleep(1)
					[+] if( !APR.TextExists("Waiting for License Check to Complete") )
						[ ] PRINT("{TimerStr(hOpenTimer)}  ------	Aspen Properties License Aquired")
						[ ] foundLicense = timerValue(hOpenTimer)
					[+] else
						[ ] PRINT("TimerStr(hOpenTimer)}  ------	Aspen Properties Failed to Aquire License")
				[ ] 
			[ ] 
			[ ] 
			[+] if( dlgAspenPlus.exists() && dlgAspenPlus.TextExists("Aspen Plus was configured to use the enterprise database.") )
				[ ] dlgAspenPlus.BtnOK.Click()
				[+] if( wNotepad.Exists(2))
					[ ] wNotepad.Close()
				[ ] sleep(0.5)
			[ ] 
			[+] if(dlgAspenPlusBackup.Exists(2))
				[ ] dlgAspenPlusBackup.SetActive()
				[ ] dlgAspenPlusBackup.BtnNo.Click()
			[ ] 
			[ ] i=0
			[+] while(i<=1800)
				[+] if(this.Exists())
					[+] if(this.GetProperty("Enabled"))
						[ ] break
				[ ] sleep(1)
				[ ] i++
			[-] do
				[ ] sleep(1)
				[ ] this.SetActive()
				[-] if (bMaximize)
					[ ] this.Maximize()
			[ ] except
			[ ] 
			[ ] PRINT("{TimerStr(hOpenTimer)}  ------	Aspen Plus Startup Complete")
			[ ] return foundLicense - foundProgram
			[ ] 
		[+] void OpenFile(STRING sFile,int iUpwardCompatibility optional)
			[ ] // Open case file
			[ ] //   Arguments
			[ ] //   1.  fileName , string, name of case file - full path or relative to current directory
			[ ] //   2.  UpwardCompatibility , int, option for Upward Compatibility dialog: default 0, 0 = keep existing databanks, 
			[ ] //         1 = upgrade to new databanks
			[ ] //   Usage:  AP.Open('..\\xmp\\pfdtut.bkp', 0)
			[ ] 
			[+] if null == iUpwardCompatibility
				[ ] iUpwardCompatibility = 0 
			[ ] 
			[ ] this.SetActive()
			[ ] this.TypeKeys("<Ctrl-O>")
			[+] if (this.dlgOpenFile.Exists(20))
				[ ] this.dlgOpenFile.OpenFile(sFile)
				[+] if(dlgAspenPlusBackup.Exists())
					[ ] dlgAspenPlusBackup.BtnNo.Click()
			[+] else
				[ ] Log.Fail("Can not find open dialog")
			[ ] 
			[+] if wUpwardCompatibility.Exists(15)
				[ ] wUpwardCompatibility.SetActive()
				[+] switch(iUpwardCompatibility)
					[+] case 0
						[+] if !wUpwardCompatibility.RdlKeepExistingDatabanks.IsChecked
							[ ] wUpwardCompatibility.RdlKeepExistingDatabanks.Check()
					[+] case 1
						[ ] wUpwardCompatibility.RdlUpgradeToNewDatabanks.Check()
				[ ] wUpwardCompatibility.btnOK.Click()
			[ ] 
			[+] if wUpgradeDatabanks.Exists(5)
				[ ] wUpgradeDatabanks.SetActive()
				[ ] wUpgradeDatabanks.btnOK.Click()
			[ ] 
			[+] if wUpwardCompatibility.Exists(5)
				[ ] wUpwardCompatibility.SetActive()
				[ ] wUpwardCompatibility.btnOK.Click()
			[ ] 
			[ ] 
			[ ] this.SetActive()
			[+] if wErrorsReadingaBackupFile.Exists()
				[ ] LogWarning(wErrorsReadingaBackupFile.TxtFileContent.Text)
				[ ] wErrorsReadingaBackupFile.Close()
			[+] if this.GetMode()!= "Simulation" && this.hccSimulation.Exists(3)
				[ ] this.hccSimulation.Click()
				[ ] sleep(5)
			[+] if this.DashboardScreen.Exists()
				[ ] this.tbHome.Click()
				[ ] this.Dashboard.Click()
			[ ] 
		[-] void Open(string sFileName,int iUpwardCompatibility optional)
			[ ] // Open case file
			[ ] //   Arguments
			[ ] //   1.  fileName , string, name of case file - full path or relative to current directory
			[ ] //   2.  UpwardCompatibility , int, option for Upward Compatibility dialog: default 0, 0 = keep existing databanks, 
			[ ] //         1 = upgrade to new databanks
			[ ] //   Usage:  AP.Open('..\\xmp\\pfdtut.bkp', 0)
			[ ] 
			[+] if null == iUpwardCompatibility
				[ ] iUpwardCompatibility = 0 
			[ ] this.SetActive()
			[ ] this.TypeKeys("<Ctrl-O>")
			[ ] dlgOpen.Exists(5)
			[ ] AspenPlusClassicWin.dlgOpenFile.SetActive()
			[ ] AspenPlusClassicWin.dlgOpenFile.OpenFile(sFileName)
			[ ] sleep(5)
			[ ] glWaitForMouseIdle(40)		
			[+] if( dlgAspenPlus.txtWriteAccess.Exists() )
				[ ] dlgAspenPlus.chkDontAsk.Check()
				[ ] sleep(2)
				[ ] dlgAspenPlus.BtnOK.Click()
			[+] if (wAspenPlusReplaceExistingFile.Exists(5))
				[ ] wAspenPlusReplaceExistingFile.SetActive()
				[ ] wAspenPlusReplaceExistingFile.BtnOK.Click()
			[+] if wAspenPlusSaveLoseDataWarning.Exists(3)
				[ ] wAspenPlusSaveLoseDataWarning.SetActive()
				[ ] wAspenPlusSaveLoseDataWarning.btnOK.Click()
			[+] if dlgDontAskThisQuestionAgain.cboDontAskThisQuestionAgain.Exists(3)
				[ ] dlgDontAskThisQuestionAgain.cboDontAskThisQuestionAgain.Check()
				[ ] dlgDontAskThisQuestionAgain.BtnOK.Click()
			[+] if(wUpgradedatabanks.Exists(5))
				[ ] wUpgradedatabanks.SetActive()
				[ ] wUpgradedatabanks.btnOK.Click()
			[+] if wDatabankUpgradeWarning.Exists(3)
				[ ] wDatabankUpgradeWarning.SetActive()
				[ ] wDatabankUpgradeWarning.btnOK.Click()
			[ ] glWaitForMouseIdle(30)		
			[-] if(wUpwardCompatibility.Exists(5))  
				[ ] wUpwardCompatibility.SetActive()
				[-] switch(iUpwardCompatibility)
					[+] case 0
						[+] if !wUpwardCompatibility.RdlKeepExistingDatabanks.IsChecked
							[ ] wUpwardCompatibility.RdlKeepExistingDatabanks.Check()
					[+] case 1
						[ ] wUpwardCompatibility.RdlUpgradeToNewDatabanks.Check()
				[ ] wUpwardCompatibility.btnOK.Click()
				[ ] wUpwardCompatibility.WaitForDisappearance()
				[ ] sleep(5)
			[+] if wColumnSizingAndRatingDetected.Exists(3)
				[ ] wColumnSizingAndRatingDetected.SetActive()
				[ ] wColumnSizingAndRatingDetected.BtnYes.Click()
			[+] if(wUpgradedatabanks.Exists(5))
				[ ] wUpgradedatabanks.SetActive()
				[ ] sleep(2)
				[ ] //wUpgradedatabanks.SetEnabled(true)
				[ ] wUpgradedatabanks.btnOK.SetFocus()
				[ ] wUpgradedatabanks.btnOK.Click()
				[ ] wUpgradedatabanks.WaitForDisappearance(3)
			[+] if wDatabankUpgradeWarning.Exists(3)
				[ ] wDatabankUpgradeWarning.SetActive()
				[ ] wDatabankUpgradeWarning.btnOK.Click()
			[ ] glWaitForMouseIdle(30)
			[+] if wColumnSizingAndRatingDetected.Exists(3)
				[ ] wColumnSizingAndRatingDetected.SetActive()
				[ ] wColumnSizingAndRatingDetected.BtnYes.Click()
			[+] if wUpwardsCompatibilityTrayRating.Exists(3)
				[ ] wUpwardsCompatibilityTrayRating.SetActive()
				[ ] wUpwardsCompatibilityTrayRating.BtnYes.Click()
			[+] if wAspenPlusSaveLoseDataWarning.Exists(3)
				[ ] wAspenPlusSaveLoseDataWarning.SetActive()
				[ ] wAspenPlusSaveLoseDataWarning.btnOK.Click()
			[ ] glWaitForMouseIdle(360)
			[+] if wErrorsReadingaBackupFile.Exists()
				[ ] LogWarning(wErrorsReadingaBackupFile.TxtFileContent.Text)
				[ ] wErrorsReadingaBackupFile.Close()
			[ ] Log.Pass("Open file {sFileName} successfully!!!")
			[ ] //this.SetActive() Comment this code out, because case ExaminingResultsOnBothSimulations() will invoke two plus main window.
		[+] void OpenFaster(string sFileName,int iUpwardCompatibility optional)
			[ ] //Modified by Trevor
			[ ] //Should Work For Aspen Properties as well as Aspen Plus
			[ ] //I am sick of waiting for exists!
			[ ] // Open case file
			[ ] //   Arguments
			[ ] //   1.  fileName , string, name of case file - full path or relative to current directory
			[ ] //   2.  UpwardCompatibility , int, option for Upward Compatibility dialog: default 0, 0 = keep existing databanks, 
			[ ] //         1 = upgrade to new databanks
			[ ] //   Usage:  AP.Open('..\\xmp\\pfdtut.bkp', 0)
			[+] if( hOpenTimer == NULL || timerState(hOpenTimer) == TS_STOPPED)
				[+] if( hOpenTimer != NULL)
					[ ] timerDestroy(hOpenTimer)
				[ ] hOpenTimer = timerCreate()
				[ ] timerStart(hOpenTimer)
			[ ] PRINT("{TimerStr(hOpenTimer)} ------	Open Function called for {sFileName}")
			[ ] 
			[ ] 
			[+] if null == iUpwardCompatibility
				[ ] iUpwardCompatibility = 0 
			[ ] this.SetActive()
			[ ] //this.mnuFile.Click()
			[ ] //sleep(2)
			[ ] //this.miOpen.Click()
			[ ] sleep(0.8)
			[ ] this.TypeKeys("<Ctrl-O>")
			[ ] int i = 0
			[+] while( !(AspenPlusClassicWin.dlgOpenFile.Exists() || AspenPropertisClassicWin.dlgOpenFile.Exists()) && i < 50)
				[ ] sleep(0.2)
				[ ] i++
			[+] if( AspenPlusClassicWin.Exists() ) //Aspen Properties is Running
				[ ] AspenPlusClassicWin.dlgOpenFile.SetActive()
				[ ] AspenPlusClassicWin.dlgOpenFile.OpenFile(sFileName)
			[+] else // Aspen Properties is Running
				[ ] AspenPropertisClassicWin.dlgOpenFile.Exists(60)
				[ ] sleep(3)
				[ ] AspenPropertisClassicWin.dlgOpenFile.SetActive()
				[ ] sleep(3)
				[ ] AspenPropertisClassicWin.dlgOpenFile.OpenFile(sFileName)
			[ ]  i = 0
			[ ] PRINT("{TimerStr(hOpenTimer)} ------	Open In Progress")
			[ ] 
			[+] while( !(this.tbHome.exists() || this.tbCustomize.Exists() ||this.tbEquationOriented.Exists() || this.tbPropertiesHome.Exists()) && i < 180 )
				[+] if(dlgAspenPlus.Exists() )
					[+] if( dlgAspenPlus.txtWriteAccess.Exists() )
						[ ] dlgAspenPlus.chkDontAsk.Check()
						[ ] sleep(2)
						[ ] dlgAspenPlus.BtnOK.Click()
					[+] else
						[+] if( matchstr("*close current run*", dlgAspenPlus.TxtBlock.Text))
							[ ] dlgAspenPlus.find("//WPFButton[@caption='*Yes*']").click()
						[+] else if ( matchstr("Save changes to*", dlgAspenPlus.TxtBlock.Text))
							[ ] dlgAspenPlus.find("//WPFButton[@caption='*No*']").click()
						[+] else if( matchstr("*This file already exists*", dlgAspenPlus.TxtBlock.Text))
							[ ] dlgAspenPlus.find("//WPFButton[@caption='*OK*']").click()
						[+] else if( matchstr("*A backup file exists*", dlgAspenPlus.TxtBlock.Text))
							[ ] dlgAspenPlus.find("//WPFButton[@caption='*No*']").click()
						[+] else
							[ ] print("Other Type of wAspenPlus message needs to be added for the following message box:")
							[ ] print(dlgAspenPlus.TxtBlock.Text)
							[ ] 
				[+] if dlgDontAskThisQuestionAgain.cboDontAskThisQuestionAgain.Exists()
					[ ] dlgDontAskThisQuestionAgain.cboDontAskThisQuestionAgain.Check()
					[ ] dlgDontAskThisQuestionAgain.BtnOK.Click()
				[+] if wAspenProperties.Exists() // Get  rid of Backup Files
					[+] if( wAspenProperties.txtWriteAccess.Exists() )
						[ ] wAspenProperties.chkDontAsk.Check()
						[ ] sleep(2)
						[ ] wAspenProperties.BtnOK.Click()
					[+] else
						[+] if( matchstr("*close current run*", wAspenProperties.TxtBlock.Text))
							[ ] wAspenProperties.find("//WPFButton[@caption='*Yes*']").click()
						[+] else if ( matchstr("Save changes to*", wAspenProperties.TxtBlock.Text))
							[ ] wAspenProperties.find("//WPFButton[@caption='*No*]").click()
						[+] else if( matchstr("*The file already exists*", wAspenProperties.TxtBlock.Text))
							[ ] wAspenProperties.find("//WPFButton[@caption='*OK*']").click()
						[+] else if( matchstr("*A backup file exists*", wAspenProperties.TxtBlock.Text))
							[ ] wAspenProperties.find("//WPFButton[@caption='*No*']").click()
						[+] else if( matchstr("*Missed PFSVData section, graphics layout will be reconstructed.*", wAspenProperties.TxtBlock.Text) )
							[ ] wAspenProperties.BtnOK.Click()
						[+] else
							[ ] print("Other Type of wAspenProperties message needs to be added")
							[ ] 
				[+] if(wUpgradeDatabanks.Exists())
					[ ] wUpgradeDatabanks.SetActive()
					[ ] wUpgradeDatabanks.btnOK.Click()
				[+] if wDatabankUpgradeWarning.Exists()
					[ ] wDatabankUpgradeWarning.SetActive()
					[ ] wDatabankUpgradeWarning.btnOK.Click()
				[+] if(wUpwardCompatibility.Exists())
					[ ] wUpwardCompatibility.SetActive()
					[+] switch(iUpwardCompatibility)
						[+] case 0
							[+] if !wUpwardCompatibility.RdlKeepExistingDatabanks.IsChecked
								[ ] wUpwardCompatibility.RdlKeepExistingDatabanks.Check()
						[+] case 1
							[ ] wUpwardCompatibility.RdlUpgradeToNewDatabanks.Check()
					[ ] wUpwardCompatibility.btnOK.Click()
					[ ] wUpwardCompatibility.WaitForDisappearance()
				[+] if(wUpgradeDatabanks.Exists())
					[ ] wUpgradeDatabanks.SetActive()
					[ ] sleep(2)
					[ ] //wUpgradedatabanks.SetEnabled(true)
					[ ] wUpgradeDatabanks.btnOK.SetFocus()
					[ ] wUpgradeDatabanks.btnOK.Click()
					[ ] wUpgradeDatabanks.WaitForDisappearance(3)
				[+] if wDatabankUpgradeWarning.Exists()
					[ ] wDatabankUpgradeWarning.SetActive()
					[ ] wDatabankUpgradeWarning.btnOK.Click()
				[+] if( wColumnSizingAndRatingDetected.Exists())
					[ ] wColumnSizingAndRatingDetected.BtnYes.Click()
				[+] if(wUpwardsCompatibilityTrayRating.Exists())
					[ ] wUpwardsCompatibilityTrayRating.SetActive()
					[ ] wUpwardsCompatibilityTrayRating.BtnYes.Click()
				[+] if( i%10 == 0 && checkForProgramError())
					[ ] Log.Warning("UNABLE TO OPEN {chr(34)}{sFileName}{chr(34)}  DUE TO ABOVE ERRORS")
					[ ] raise -999
				[ ] i +=2
				[ ] sleep(1)
			[ ] 
			[ ] PRINT("{TimerStr(hOpenTimer)} ------	Case Loaded")
			[ ] 
			[ ] glWaitForMouseIdle(360)
			[+] do
				[ ] this.closeTab("Start Page", FALSE)
				[ ] this.closeTab("Exchange", FALSE)
			[+] except
				[ ] exceptClear()
			[ ] 
			[ ] 
			[ ] Agent.SetOption (OPT_SYNC_TIMEOUT, 1)
			[+] if( checkForProgramError())
				[ ] Log.Warning("UNABLE TO OPEN {chr(34)}{sFileName}{chr(34)}  DUE TO ABOVE ERRORS")
				[ ] raise -999
			[+] else
				[ ] Log.Pass("Open file {sFileName} successfully!!!")
			[ ] 
			[ ] PRINT("{TimerStr(hOpenTimer)} ------	Open Complete    --->   {sFileName}")
			[ ] timerStop(hOpenTimer)
			[ ] Agent.SetOption (OPT_SYNC_TIMEOUT, 180)
			[+] if wErrorsReadingaBackupFile.Exists()
				[ ] LogWarning(wErrorsReadingaBackupFile.TxtFileContent.Text)
				[ ] wErrorsReadingaBackupFile.Close()
			[ ] 
			[ ] 
			[ ] //this.SetActive() Comment this code out, because case ExaminingResultsOnBothSimulations() will invoke two plus main window.
			[ ] 
		[+] void OpenAnotherInCurrent(string sFileName,boolean bCloseCurrent,int iUpwardCompatibility optional)
			[+] if null == iUpwardCompatibility
				[ ] iUpwardCompatibility = 0 
			[ ] this.SetActive()
			[ ] this.TypeKeys("<Ctrl-O>")
			[ ] sleep(1)
			[ ] AspenPlusClassicWin.dlgOpenFile.SetActive()
			[ ] AspenPlusClassicWin.dlgOpenFile.OpenFile(sFileName)
			[+] if(bCloseCurrent == true)
				[+] if(dlgAspenPlusYesOrNo.Exists(3))
					[ ] dlgAspenPlusYesOrNo.SetActive()
					[ ] dlgAspenPlusYesOrNo.btnYes.Click()
				[+] if(dlgAspenPlusYesOrNo.Exists(3))
					[ ] dlgAspenPlusYesOrNo.SetActive()
					[ ] dlgAspenPlusYesOrNo.btnNo.Click()
			[+] else
				[+] if(dlgAspenPlusYesOrNo.Exists(3))
					[ ] dlgAspenPlusYesOrNo.SetActive()
					[ ] dlgAspenPlusYesOrNo.btnNo.Click()
			[ ] sleep(30)
			[ ] glWaitForMouseIdle(30)
			[+] if wAspenPlusSaveLoseDataWarning.Exists(3)
				[ ] wAspenPlusSaveLoseDataWarning.SetActive()
				[ ] wAspenPlusSaveLoseDataWarning.btnOK.Click()
			[+] if dlgDontAskThisQuestionAgain.cboDontAskThisQuestionAgain.Exists(3)
				[ ] dlgDontAskThisQuestionAgain.cboDontAskThisQuestionAgain.Check()
				[ ] dlgDontAskThisQuestionAgain.BtnOK.Click()
				[ ] 
			[+] if(wUpgradedatabanks.Exists(5))
				[ ] wUpgradedatabanks.SetActive()
				[ ] wUpgradedatabanks.btnOK.Click()
			[ ] glWaitForMouseIdle(30)
			[+] if wDatabankUpgradeWarning.Exists(3)
				[ ] wDatabankUpgradeWarning.SetActive()
				[ ] wDatabankUpgradeWarning.btnOK.Click()
			[ ] glWaitForMouseIdle(30)
			[+] if(wUpwardCompatibility.Exists(5))
				[ ] wUpwardCompatibility.SetActive()
				[+] switch(iUpwardCompatibility)
					[+] case 0
						[+] if !wUpwardCompatibility.RdlKeepExistingDatabanks.IsChecked
							[ ] wUpwardCompatibility.RdlKeepExistingDatabanks.Check()
					[+] case 1
						[ ] wUpwardCompatibility.RdlUpgradeToNewDatabanks.Check()
				[ ] wUpwardCompatibility.btnOK.Click()
				[ ] wUpwardCompatibility.WaitForDisappearance()
			[+] if(wUpgradedatabanks.Exists(5))
				[ ] wUpgradedatabanks.SetActive()
				[ ] sleep(2)
				[ ] //wUpgradedatabanks.SetEnabled(true)
				[ ] wUpgradedatabanks.btnOK.SetFocus()
				[ ] wUpgradedatabanks.btnOK.Click()
				[ ] wUpgradedatabanks.WaitForDisappearance(3)
			[+] if wDatabankUpgradeWarning.Exists(3)
				[ ] wDatabankUpgradeWarning.SetActive()
				[ ] wDatabankUpgradeWarning.btnOK.Click()
			[+] if wAspenPlusSaveLoseDataWarning.Exists(3)
				[ ] wAspenPlusSaveLoseDataWarning.SetActive()
				[ ] wAspenPlusSaveLoseDataWarning.btnOK.Click()
			[ ] 
			[ ] glWaitForMouseIdle(360)
			[+] if wErrorsReadingaBackupFile.Exists()
				[ ] LogWarning(wErrorsReadingaBackupFile.TxtFileContent.Text)
				[ ] wErrorsReadingaBackupFile.Close()
			[ ] Log.Pass("Open file {sFileName} successfully!!!")
			[ ] 
		[+] New(string sTemplateFileName)
			[ ] // New ( string )  - Start new case from template file
			[ ] //   Arguments
			[ ] //   1.  fileName , string, name of template file or the empty string for a blank template
			[ ] //   Usage:  AP.New('Templates\\Air Separation\\Air Separation with English Units.apt')
			[ ] int i=1
			[ ] this.SetActive()
			[+] if (APR.exists())
				[ ] APR.miFile_APR.Click()
				[ ] APR.miNew_APR.Exists(3)
				[ ] sleep(0.8)
				[ ] APR.miNew_APR.Click()
				[ ] sleep(0.8)
				[ ] i=2
			[+] else
				[ ] this.mnuFile.Click()
				[ ] sleep(2)
				[ ] this.miNew.Click()
				[ ] sleep(1)
			[ ] wNew.Exists(20)
			[ ] wNew.SetActive()
			[+] if "" == sTemplateFileName
				[ ] wNew.lsiBlankAndRecent.Click()
				[+] if i==2
					[ ] wNew.BtnCreate.Click()
				[+] else if i==1
					[+] if( APlus.Exists() )
						[ ] wNew.lstBlankAndRecent.lsiBlankSimulation.Click()
					[+] else
						[ ] wNew.lstBlankAndRecent.lsiBlankCase.Click()
						[ ] 
					[ ] wNew.BtnCreate.Click()
					[ ] sleep(10)
			[+] else
				[ ] Log.Error("only implement Blank Simulation now!!!")
			[ ] glWaitForMouseIdle(60)
			[ ] sleep(4)
			[+] do
				[ ] this.closeTab("Start Page")
				[ ] this.closeTab("Exchange")
			[+] except
				[ ] exceptClear()
			[ ] 
			[+] if(hOpenTimer != NULL)
				[ ] timerStop(hOpenTimer)
			[+] if wErrorsReadingaBackupFile.Exists()
				[ ] LogWarning(wErrorsReadingaBackupFile.TxtFileContent.Text)
				[ ] wErrorsReadingaBackupFile.Close()
			[ ] 
			[ ] 
		[+] NewCaseFromTemplate(string sTemplateCategory, string sTemplateName)
			[ ] // New ( string )  - Start new case from template file
			[ ] //   Arguments
			[ ] //   1.  fileName , string, name of template file or the empty string for a blank template
			[ ] //   Usage:  AP.New('User', "General with English Units")
			[ ] this.SetActive()
			[ ] sleep(1)
			[ ] this.mnuFile.Click()
			[ ] sleep(1)
			[ ] this.miNew.Click()
			[ ] sleep(1)
			[ ] wNew.SetActive()
			[ ] sleep(1)
			[ ] wNew.Find("//WPFListBoxItem[@caption='{sTemplateCategory}']").click()
			[ ] sleep(1)
			[ ] wNew.Find("//WPFTextBlock[@caption='{sTemplateName}']").click()
			[ ] sleep(1)
			[ ] wNew.BtnCreate.Click()
			[ ] glWaitForMouseIdle(60)
			[ ] sleep(4)
			[+] do
				[ ] this.closeTab("Start Page")
				[ ] this.closeTab("Exchange")
			[+] except
				[ ] exceptClear()
			[ ] 
			[+] if wErrorsReadingaBackupFile.Exists()
				[ ] LogWarning(wErrorsReadingaBackupFile.TxtFileContent.Text)
				[ ] wErrorsReadingaBackupFile.Close()
			[ ] 
		[+] AnyWin Performance
			[+] void Open_SaveAs(string sFileName,int iUpwardCompatibility optional)
				[ ] string sName
				[ ] int i=0
				[ ] list of WINDOW lw
				[ ] window w
				[+] while i<=99
					[ ] i++
					[+] if GetField(sFileName,"\",i)==""
						[ ] break
					[+] else
						[ ] sName=GetField(sFileName,"\",i)
						[ ] sName=StrTran(sName," ","")
				[ ] print(sName)
				[ ] print("{sDataout}{sTestCaseID}\SaveAs_{sName}")
				[+] if !APlus.Exists(5)
					[ ] APlus.Launch()
					[ ] sleep(2)
				[ ] sleep(2)
				[ ] APlus.OpenFaster(sFileName,iUpwardCompatibility)
				[ ] sleep(1)
				[ ] lw=Desktop.FindAll("/WPFWindow")
				[+] for each w in lw
					[ ] print(w.GetCaption())
					[+] if w.GetCaption()!=APlus.GetCaption()
						[+] do
							[ ] w.SetActive()
							[ ] sleep(0.8)
							[ ] w.MInimize()
							[ ] sleep(0.8)
						[ ] except
				[+] if !SYS_DirExists("{sDataout}{sTestCaseID}")
					[ ] SYS_MakeDir("{sDataout}{sTestCaseID}")
				[ ] APlus.SaveAs("{sDataout}{sTestCaseID}\SaveAs_{sName}")
				[ ] APlus.Exit()
				[ ] sleep(3)
				[ ] APlus.LaunchFaster()
				[+] while APlus.GetProperty("Enabled")==false
						[ ] sleep(0.8)
					[ ] 
				[+] do
					[ ] APlus.OpenFaster("{sDataout}{sTestCaseID}\SaveAs_{sName}",iUpwardCompatibility)
				[+] except
					[ ] sleep(30)
					[ ] APlus.OpenFaster("{sDataout}{sTestCaseID}\SaveAs_{sName}",iUpwardCompatibility)
				[ ] 
				[ ] 
				[ ] sleep(3)
				[ ] 
			[+] Dontshowupwardcompatibility()
				[ ] APlus.TypeKeys("<Alt>FQ")
				[ ] wSimulationRunOptions.Exists(10)
				[ ] sleep(0.8)
				[ ] wSimulationRunOptions.LstOption.Select("Upward Compatibility")
				[ ] wSimulationRunOptions.tbiUpwardCompatibility.chkShowUpwardCompatibilityDialog.Exists(10)
				[ ] sleep(0.8)
				[ ] wSimulationRunOptions.tbiUpwardCompatibility.chkShowUpwardCompatibilityDialog.Uncheck()
				[ ] sleep(0.8)
				[ ] wSimulationRunOptions.Btn_OK.Click()
				[ ] sleep(1)
			[+] SwitchAPED()
				[ ] SYS_EXECUTE("{chr(34)}{sProgramFilePath}\AspenTech\AprSystem {sVersion}\PropertiesDatabase\Bin\setaped.exe{chr(34)}",NULL, EM_CONTINUE_RUNNING)
				[ ] wAspenPropertiesDatabaseSelectionApplication.Exists(30)
				[ ] sleep(0.8)
				[ ] wAspenPropertiesDatabaseSelectionApplication.rdAspenPropertiesEnterpriseDatabase.Click()
				[ ] sleep(1)
				[ ] wAspenPropertiesDatabaseSelectionApplication.btnOK.Click()
				[ ] sleep(1)
				[ ] 
			[+] SwitchLegacyDatabank()
				[ ] SYS_EXECUTE("{chr(34)}{sProgramFilePath}\AspenTech\AprSystem {sVersion}\PropertiesDatabase\Bin\setaped.exe{chr(34)}",NULL, EM_CONTINUE_RUNNING)
				[ ] wAspenPropertiesDatabaseSelectionApplication.Exists(30)
				[ ] sleep(0.8)
				[ ] wAspenPropertiesDatabaseSelectionApplication.rdLegacyPropertiesDatabanks.Click()
				[ ] sleep(1)
				[ ] wAspenPropertiesDatabaseSelectionApplication.btnOK.Click()
				[ ] sleep(1)
			[+] real OpenFaster(string sFileName,int iUpwardCompatibility optional)
				[ ] HTIMER hTime=TimerCreate("time")
				[+] if null == iUpwardCompatibility
					[ ] iUpwardCompatibility = 0 
				[ ] //this.SetActive()
				[ ] sleep(0.8)
				[ ] APlus.SetActive()
				[ ] APlus.TypeKeys("<Ctrl-O>")
				[ ] int i = 0
				[+] while( !(AspenPlusClassicWin.dlgOpenFile.Exists() || AspenPropertisClassicWin.dlgOpenFile.Exists()) && i < 50)
					[ ] sleep(0.2)
					[ ] i++
				[+] if( AspenPlusClassicWin.Exists() ) //Aspen Properties is Running
					[ ] AspenPlusClassicWin.dlgOpenFile.SetActive()
					[ ] AspenPlusClassicWin.dlgOpenFile.cboFileName.SetText(sFileName)
					[ ] sleep(3)
					[ ] AspenPlusClassicWin.dlgOpenFile.btnOpen.Click()
				[+] else // Aspen Properties is Running
					[ ] AspenPropertisClassicWin.dlgOpenFile.SetActive()
					[ ] AspenPropertisClassicWin.dlgOpenFile.OpenFile(sFileName)
				[ ] TimerStart(hTime)
				[ ]  i = 0
				[+] while( !(APlus.tbHome.exists() || APlus.tbCustomize.Exists() ||APlus.tbEquationOriented.Exists() || APlus.tbPropertiesHome.Exists()) && i < 180 )
					[+] if(dlgAspenPlus.Exists() )
						[+] if( dlgAspenPlus.txtWriteAccess.Exists() )
							[ ] dlgAspenPlus.chkDontAsk.Check()
							[ ] sleep(0.8)
							[ ] dlgAspenPlus.BtnOK.Click()
						[+] else
							[+] if( matchstr("*close current run*", dlgAspenPlus.TxtBlock.Text))
								[ ] dlgAspenPlus.find("//WPFButton[@caption='*Yes*']").click()
							[+] else if ( matchstr("Save changes to*", dlgAspenPlus.TxtBlock.Text))
								[ ] dlgAspenPlus.find("//WPFButton[@caption='*No*']").click()
							[+] else if( matchstr("*This file already exists*", dlgAspenPlus.TxtBlock.Text))
								[ ] dlgAspenPlus.find("//WPFButton[@caption='*OK*']").click()
							[+] else if( matchstr("*A backup file exists*", dlgAspenPlus.TxtBlock.Text))
								[ ] dlgAspenPlus.find("//WPFButton[@caption='*No*']").click()
							[+] else
								[ ] print("Other Type of wAspenPlus message needs to be added for the following message box:")
								[ ] print(dlgAspenPlus.TxtBlock.Text)
								[ ] 
					[+] if dlgDontAskThisQuestionAgain.cboDontAskThisQuestionAgain.Exists()
						[ ] dlgDontAskThisQuestionAgain.cboDontAskThisQuestionAgain.Check()
						[ ] dlgDontAskThisQuestionAgain.BtnOK.Click()
					[+] if wAspenProperties.Exists() // Get  rid of Backup Files
						[+] if( wAspenProperties.txtWriteAccess.Exists() )
							[ ] wAspenProperties.chkDontAsk.Check()
							[ ] sleep(0.8)
							[ ] wAspenProperties.BtnOK.Click()
						[+] else
							[+] if( matchstr("*close current run*", wAspenProperties.TxtBlock.Text))
								[ ] wAspenProperties.find("//WPFButton[@caption='*Yes*']").click()
							[+] else if ( matchstr("Save changes to*", wAspenProperties.TxtBlock.Text))
								[ ] wAspenProperties.find("//WPFButton[@caption='*No*]").click()
							[+] else if( matchstr("*The file already exists*", wAspenProperties.TxtBlock.Text))
								[ ] wAspenProperties.find("//WPFButton[@caption='*OK*']").click()
							[+] else if( matchstr("*A backup file exists*", wAspenProperties.TxtBlock.Text))
								[ ] wAspenProperties.find("//WPFButton[@caption='*No*']").click()
							[+] else if( matchstr("*Missed PFSVData section, graphics layout will be reconstructed.*", wAspenProperties.TxtBlock.Text) )
								[ ] wAspenProperties.BtnOK.Click()
							[+] else
								[ ] print("Other Type of wAspenProperties message needs to be added")
								[ ] 
					[+] if(wUpgradeDatabanks.Exists())
						[ ] wUpgradeDatabanks.SetActive()
						[ ] wUpgradeDatabanks.btnOK.Click()
					[+] if wDatabankUpgradeWarning.Exists()
						[ ] wDatabankUpgradeWarning.SetActive()
						[ ] wDatabankUpgradeWarning.btnOK.Click()
					[+] if(wUpwardCompatibility.Exists())
						[ ] wUpwardCompatibility.SetActive()
						[+] switch(iUpwardCompatibility)
							[+] case 0
								[+] if !wUpwardCompatibility.RdlKeepExistingDatabanks.IsChecked
									[ ] wUpwardCompatibility.RdlKeepExistingDatabanks.Check()
							[+] case 1
								[ ] wUpwardCompatibility.RdlUpgradeToNewDatabanks.Check()
						[ ] wUpwardCompatibility.btnOK.Click()
						[ ] wUpwardCompatibility.WaitForDisappearance()
					[+] if(wUpgradeDatabanks.Exists())
						[ ] wUpgradeDatabanks.SetActive()
						[ ] sleep(0.8)
						[ ] //wUpgradedatabanks.SetEnabled(true)
						[ ] wUpgradeDatabanks.btnOK.SetFocus()
						[ ] wUpgradeDatabanks.btnOK.Click()
						[ ] wUpgradeDatabanks.WaitForDisappearance(3)
					[+] if wDatabankUpgradeWarning.Exists()
						[ ] wDatabankUpgradeWarning.SetActive()
						[ ] wDatabankUpgradeWarning.btnOK.Click()
					[+] if( i%10 == 0 && checkForProgramError())
						[ ] Log.Warning("UNABLE TO OPEN {chr(34)}{sFileName}{chr(34)}  DUE TO ABOVE ERRORS")
						[ ] raise -999
					[ ] i +=2
					[ ] sleep(0.3)
				[+] while !MatchStr("*esult*",APlus.stbStatus.TextCapture())
					[ ] sleep(0.3)
				[ ] sleep(0.3)
				[ ] TimerStop(hTime)
				[ ] return TimerValue(hTime)
				[ ] 
				[ ] //this.SetActive() Comment this code out, because case ExaminingResultsOnBothSimulations() will invoke two plus main window.
				[ ] 
			[+] real Run()
				[ ] HTIMER RunTime=TimerCreate("s1")
				[ ] APlus.SetActive()
				[ ] sleep(1)
				[ ] TimerStart(RunTime)
				[ ] APlus.grpQuickAccessToolbar.btnRun.Click()
				[+] while !MatchStr("*Calculating*",APlus.stbStatus.TextCapture())
					[ ] sleep(0.25)
				[+] while !MatchStr("*Result Available*",APlus.stbStatus.TextCapture())
    &&!wSimulationErrors.Exists()
					[ ] sleep(0.25)
				[ ] TimerStop(RunTime)
				[+] if wSimulationErrors.Exists()
					[ ] sleep(0.8)
					[ ] wSimulationErrors.Close()
				[ ] return TimerValue(RunTime)
			[ ] 
		[ ] // Import, Export
		[+] Export (string sFileName)
			[ ] // Export ( string )  - Exports a file
			[ ] //   Arguments
			[ ] //   1.  fileName , string, name of export file - extension determines type of file to export
			[ ] //   Usage:  this.Export('c:\\temp\\pfdtut.inp')
			[+] if sys_FileExists(sFileName)
				[ ] Sys_Execute('del /f /q "{sFileName}"')
			[ ] string sExtenison = glGetReverseField(sFileName, ".", 1)
			[ ] string sBaseFileName = SubStr(sFileName,1, len(sFileName) - len(sExtenison)-1)
			[+] if sys_DirExists(sBaseFileName)
				[ ] sys_execute('rd /s /q "{sBaseFileName}"')
			[ ] this.SetActive()
			[ ] sleep(4)
			[+] if (this.GetMode() == "Properties") && ("rep" == Lower(sExtenison) || "inp" == Lower(sExtenison)|| "xml" == Lower(sExtenison))
				[+] switch (lower(sExtenison))
					[+] case "rep"
						[ ] this.TypeKeys("<Ctrl-Alt-R>")
					[+] case "inp"
						[ ] this.TypeKeys("<Ctrl-Alt-I>")
					[+] case "xml"
						[ ] this.TypeKeys("<Ctrl-Alt-X>")
				[ ] glwNotepad.Exists(20)
				[ ] glwNotepad.SetActive()
				[ ] glwNotepad.SaveFile(sFileName)
				[ ] glwNotepad.SetActive()
				[ ] glwNotepad.mnuFile.miExit.Pick()
				[+] if glwNotepad.Exists(5)
					[ ] glwNotepad.Exit()
				[+] if File.Exists(sFileName + '.txt')
					[ ] disconnectall()
					[ ] connect(null, CLASSIC_AGENT)
					[ ] Sys_Movefile(sFileName,strtran(sFileName, ".txt", ""))
				[+] if File.Exists(sFileName)
					[ ] Log.Pass("Save file {sBaseFileName} as {upper(sExtenison)} successfully!!!")
			[+] else
				[+] if(APlus.exists())
					[ ] this.mnuFile.Click()
					[ ] this.miExport.Exists(5)
					[ ] this.miExport.Click()
					[ ] this.miFile.Exists(5)
					[ ] this.miFile.Click()
				[+] else if( APR.Exists())
					[ ] this.mnuFile_APR.Click()
					[ ] this.miExport_APR.Exists(5)
					[ ] this.miExport_APR.Click()
				[ ] dlgExport.Exists(20)
				[ ] sleep(1)
				[ ] dlgExport.exists(10)
				[ ] dlgExport.SetActive()
				[ ] dlgExport.cboSaveAsType.Select("*.{Lower(sExtenison)}*")
				[ ] dlgExport.txtFileName.SetText(sBaseFileName)
				[+] dlgExport.btnSave.Click()
					[ ] 
				[+] if( dlgConfirmSaveAs.Exists(2) )
					[ ] dlgConfirmSaveAs.btnYes.Click()
					[ ] 
				[ ] glWaitForMouseIdle(60)
				[ ] int i = 0
				[+] while( dlgExport.Exists() && i < 60)
					[ ] sleep(0.5)
					[ ] i++
				[ ] 
				[ ] this.SetActive()
			[ ] 
		[+] ExportFromMenu (string sFileName) //For Aspen Properties and A+
			[ ] //Works With Aspen Plus and Aspen Properties but only with Export Menu
			[ ] // Export ( string )  - Exports a file
			[ ] //   Arguments
			[ ] //   1.  fileName , string, name of export file - extension determines type of file to export
			[ ] //   Usage:  APlus.ExporFromMenut('c:\\temp\\pfdtut.inp')
			[+] if sys_FileExists(sFileName)
				[ ] Sys_Execute('del /f /q "{sFileName}"')
			[ ] string sExtenison = glGetReverseField(sFileName, ".", 1)
			[ ] string sBaseFileName = SubStr(sFileName,1, len(sFileName) - len(sExtenison)-1)
			[+] if sys_DirExists(sBaseFileName)
				[ ] sys_execute('rd /s /q "sBaseFileName"')
			[ ] this.SetActive()
			[+] if( APlus.Exists())
				[ ] this.mnuFile.Click()
				[ ] this.miExport.exists(5)
				[ ] this.miExport.Click()
				[ ] this.miFile.Exists(5)
				[ ] this.miFile.Click()
			[+] else
				[ ] this.mnuFile_APR.Click()
				[ ] this.miExport_APR.Exists(5)
				[ ] this.miExport_APR.Click()
			[ ] 
			[ ] dlgExport.exists(10)
			[ ] dlgExport.SetActive()
			[ ] dlgExport.cboSaveAsType.Select("*.{Lower(sExtenison)}*")
			[ ] dlgExport.txtFileName.SetText(sBaseFileName)
			[+] dlgExport.btnSave.Click()
				[ ] 
			[+] if( dlgConfirmSaveAs.Exists(2) )
				[ ] dlgConfirmSaveAs.btnYes.Click()
				[ ] 
			[ ] glWaitForMouseIdle(60)
			[ ] int i = 0
			[+] while( dlgExport.Exists() && i < 60)
				[ ] sleep(0.5)
				[ ] i++
			[ ] 
			[ ] Log.Pass("Save file {sBaseFileName} as {upper(sExtenison)} successfully!!!")
			[ ] this.SetActive()
			[ ] 
			[ ] 
			[ ] 
		[+] Import (string sFileName)
			[ ] //	Import ( string )  - Imports a file
			[ ] // 	Arguments
			[ ] //	1.  fileName , string, name of export file - extension determines type of file to export
			[ ] //	Usage:  this.Import('c:\\temp\\pfdtut.inp')
			[ ] //	Please notice that you need to resolve the confilct window in other code.
			[+] if( !this.miImport.Exists())
				[ ] this.mnuFile.Click()
			[ ] this.miImport.Exists(5)
			[ ] this.miImport.Click()
			[ ] this.miFile.Exists(5)
			[ ] this.miFile.Click()
			[ ] 
			[ ] dlgImportWin.Exists(5)
			[ ] dlgImportWin.txtFileName.TypeKeys(sFileName)
			[ ] dlgImportWin.btnOpen.Click()
			[ ] glWaitForMouseIdle(60)
			[ ] Log.Pass("Import file {sFileName} successfully!!!")
			[ ] 
			[ ] 
		[ ] 
		[ ] //Run and Run Settings
		[-] void Run()
			[ ] this.RunFaster()
			[-] if(wSimulationWarnings.Exists(5))
				[ ] wSimulationWarnings.btnCancel.Click()
				[ ] Log.Warning("Simulation warning dialog popup after run.")
			[+] if(wSimulationErrors.Exists(5))
				[ ] wSimulationErrors.btnCancel.Click()
				[ ] Log.Fail("Simulation error dialog popup after run, please check")
			[ ] sleep(5)
			[ ] // this.SetActive()
			[ ] // this.grpQuickAccessToolbar.btnRun.Click()
			[ ] // // this.TypeKeys("<F5>")
			[ ] // sleep(30)
			[+] // if(wEconomicAnalysis.Exists(30))
				[ ] // wEconomicAnalysis.SetActive()
				[ ] // // wEconomicAnalysis.CheckBox.Check()
				[ ] // wEconomicAnalysis.btnClose.Click()
		[-] real  RunFaster(int iActionOnComplete optional,  integer RequiredTime optional, integer iterationMax optional, string iterationType optional, boolean ignoreErrors optional  ) //Run, Time, check iterations
			[ ] //Like the one below but I do not like to wait for exists(5) statements
			[ ] //Also times the run and returns a runtime in seconds because timing with exists is not accurate
			[ ] //logs a warning if longer than RequiredTime
			[ ] // Tracks Iterations if iterationMax argument is given and returns iterations
			[ ] //log Error if iteration count is larger than expected
			[ ] //If by chance anyone updates this method please email trevor.merrill@aspentech.com
			[ ] Agent.SetOption (OPT_SYNC_TIMEOUT, 2)    //Set the sync time low for economic evaluation box
			[+] if( iterationMax != NULL )
				[ ] this.TypeKeys("<F7>")
				[ ] sleep(2)
				[ ] this.SetTab("Home")
				[ ] sleep(3)
				[ ] this.purgeCP()
				[ ] sleep(1)
			[+] if( ignoreErrors == NULL)
				[ ] ignoreErrors = false
			[ ] HANDLE hTimer
			[ ] hTimer = TimerCreate ()
			[ ] TimerStart (hTimer)
			[ ] 
			[+] if null == iActionOnComplete
				[ ] iActionOnComplete = 3
			[+] if(RequiredTime == NULL)
				[ ] RequiredTime = 140
			[ ] integer iTimeOut = 1200
			[ ] this.SetActive()
			[-] do
				[ ] this.grpRun.btnRun.Click()
			[-] except
				[-] do
					[ ] this.grpQuickAccessToolbar.btnRun.Click()
				[-] except
					[ ]  this.TypeKeys("<F5>")
			[-] while(TimerValue(hTimer) < iTimeOut)
				[+] if( !ignoreErrors)
					[+] if(wSimulationWarnings.Exists())
						[ ] wSimulationWarnings.btnCancel.Click()
						[ ] Log.Warning("Simulation warning dialog popup after run.")
					[+] if(wSimulationErrors.Exists())
						[ ] wSimulationErrors.btnCancel.Click()
						[ ] Log.Fail("Simulation error dialog popup after run, please check")
					[ ] 
				[+] if(dlgAspenPlusOKOrCancel.Exists())
					[ ] dlgAspenPlusOKOrCancel.SetActive()
					[ ] dlgAspenPlusOKOrCancel.BtnOK.Click()
				[+] if  (this.stsbRunDone.Exists() 
    || this.stsbEORunDone.Exists() 
    || this.stsbSMRunDone.Exists()
    || this.stsbRunDoneWithWarnings.Exists() || this.stsbEORunDoneWithWarnings.exists()  )
					[ ] Log.Pass("Simulation has run sucessfully")
					[ ] break
				[+] if( stsbEOSolutionConvergedWithErrors.exists() )
					[ ] Log.Warning("EO Solution Converged with Errors.")
					[ ] break
				[+] if(this.stsbEOSolutionFailed.Exists() )
					[ ] Log.Warning("EO Solution Failed, Please check if this can be ignored.")
					[ ] break
				[+] if( this.stsbRunDoneWithError.exists())
					[ ] Log.Warning("RUN FAILED, Please check if this can be ignored.")
					[ ] break
					[ ] 
				[+] if(this.stsbRequiredInputIncomplete.exists())
					[+] if( TimerValue(hTimer) > 5)
						[ ] Log.Warning("ERROR: REQUIRED INPUT INCOMPLETE")
						[ ] return -1
				[-] if(this.stsbRequiredInputComplete.exists())
					[-] if( TimerValue(hTimer) > 40)
						[ ] Log.Error("ERROR: Status Bar Still Reads {chr(34)}Required Input Complete{chr(34)}")
						[ ] return -1
					[ ] 
				[+] if(wEconomicAnalysis.exists())
					[ ] sleep(0.25)
					[ ] wEconomicAnalysis.CheckBox.Check()
					[ ] sleep(2)
					[ ] wEconomicAnalysis.btnClose.Click()
					[ ] 
				[+] else
					[ ] sleep(1)   //Check for completion every second
					[ ] 
					[ ] 
			[+] // while((Cursor.GetType()=="WAIT" || Cursor.GetType()=="DELAY") && TimerValue(hTimer) < iTimeOut)
				[ ] // sleep(1)
				[ ] // 
			[ ] TimerStop (hTimer)
			[ ] sleep(2) // Wait and Avoid errors
			[+] if(wEconomicAnalysis.exists(1))
					[ ] sleep(0.25)
					[ ] wEconomicAnalysis.CheckBox.Check()
					[ ] sleep(2)
					[ ] wEconomicAnalysis.btnClose.Click()
			[ ] 
			[ ] string sTime = TimerStr(hTimer)
			[ ] print("Approximate Run TIme: {sTime} seconds")
			[ ] real rTime = TimerValue (hTimer)
			[ ] TimerDestroy(hTimer)
			[+] if( rTime> iTimeOut)
				[ ] Log.Warning("Process was not able to run within max timeout of {iTimeOut} seconds")
			[+] if( rTime > RequiredTime ) 
				[ ] Log.Warning("Process was not able to run within its required time limit of {RequiredTime} seconds")
			[ ] 
			[+] if(iterationMax != NULL)
				[+] if( iterationType == NULL )
					[ ] iterationType = "EO"
				[ ] int iIterationCount = CountIterationsInCP(iterationType, NULL, NULL, iterationMax)
				[ ] return iIterationCount
			[ ] Agent.SetOption (OPT_SYNC_TIMEOUT, 180)    //Reset Synchronization Timeout
			[ ] return rTime
			[ ] 
		[+] void RunAP(int iActionOnComplete optional, integer iTimeOut optional)
			[ ] // Run ( optional int )  - Runs the active case
			[ ] //   Arguments
			[ ] //   1.  ActionOnComplete, int, action to be selected in simulation completed dialog: default 3(Close) 
			[ ] //		1,2,3 = choose 1st,2nd or 3rd dialog option, 0 = display dialog
			[ ] //		1 = Learn More
			[ ] //		2 = Activate
			[ ] //		3 = Close
			[ ] //    2. iTimeOut, int, Time out to expect simulation complete: default 120 seconds
			[ ] //   Usage:  AP.Run(1)
			[ ] this.RunFaster(iActionOnComplete, iTimeOut)
			[+] if(wSimulationWarnings.Exists())
				[ ] wSimulationWarnings.btnCancel.Click()
				[ ] Log.Warning("Simulation warning dialog popup after run.")
			[+] if(wSimulationErrors.Exists())
				[ ] wSimulationErrors.btnCancel.Click()
				[ ] Log.Fail("Simulation error dialog popup after run, please check")
			[+] // if null == iActionOnComplete
				[ ] // iActionOnComplete = 3
			[+] // if null == iTimeOut
				[ ] // iTimeOut = 120
			[ ] // integer i
			[ ] // this.SetActive()
			[ ] // this.grpQuickAccessToolbar.btnRun.Click()
			[ ] // //this.btnRun.Click()
			[ ] // // this.TypeKeys("<F5>")
			[+] // for(i=0;i<=iTimeOut;i++)
				[+] // if(dlgAspenPlusOKOrCancel.Exists(5))
					[ ] // dlgAspenPlusOKOrCancel.SetActive()
					[ ] // dlgAspenPlusOKOrCancel.BtnOK.Click()
				[+] // if (wEconomicAnalysis.Exists())
					[ ] // wEconomicAnalysis.SetActive()
					[+] // switch(iActionOnComplete)
						[+] // case 0
							[ ] // 
						[+] // case 1
							[ ] // wEconomicAnalysis.btnLearnMore.Click()
						[+] // case 2
							[ ] // wEconomicAnalysis.btnActivate.Click()
						[+] // case 3
							[ ] // wEconomicAnalysis.btnClose.Click()
				[+] // if  (this.stsbRunDone.Exists() 
    // || this.stsbEORunDone.Exists() 
    // || this.stsbSMRunDone.Exists()
    // || this.stsbRunDoneWithWarnings.Exists())
					[ ] // Log.Pass("*** Simulation runs sucessfully. *** ")
					[ ] // break
				[+] // if(this.stsbEOSolutionFailed.Exists())
					[ ] // Log.Warning("EO Solution Failed, Please check if this can be ignored.")
					[ ] // break
					[ ] // 
				[+] // else
					[ ] // sleep(2)
					[ ] // i=i+2
			[+] // if (wEconomicAnalysis.Exists(5))
				[ ] // wEconomicAnalysis.SetActive()
				[+] // switch(iActionOnComplete)
					[+] // case 0
						[ ] // 
					[+] // case 1
						[ ] // wEconomicAnalysis.btnLearnMore.Click()
					[+] // case 2
						[ ] // wEconomicAnalysis.btnActivate.Click()
					[+] // case 3
						[ ] // wEconomicAnalysis.btnClose.Click()
			[ ] // 
			[+] // if(i>iTimeOut)
				[ ] // Log.Fail("Case: Simulation can't run sucessfully in: {iTimeOut} seconds.")
		[+] void RunSteptoComplete(INT bstepCounts optional)
			[ ] INT itemp=0
			[ ] this.SetActive()
			[ ] this.SetTab("Home")
			[+] while(true)
				[+] if(dlgAspenPlusOKOrCancel.Exists())
					[ ] dlgAspenPlusOKOrCancel.SetActive()
					[ ] dlgAspenPlusOKOrCancel.BtnOK.Click()
				[+] if  (this.stsbRunDone.Exists() 
    || this.stsbEORunDone.Exists() 
    || this.stsbSMRunDone.Exists()
    || this.stsbRunDoneWithWarnings.Exists())
					[ ] Log.Pass("*** Simulation runs sucessfully. *** ")
					[ ] break
				[+] if(this.stsbEOSolutionFailed.Exists())
					[ ] Log.Warning("EO Solution Failed, Please check if this can be ignored.")
					[ ] break
				[+] else
					[ ] sleep(1)   //Check for completion every second
					[ ] this.TypeKeys("<Ctrl-F5>")
					[ ] itemp++
				[+] if((bstepCounts!=null)&&(bstepCounts==itemp))
					[ ] break
			[+] if (wEconomicAnalysis.Exists())
				[ ] wEconomicAnalysis.SetActive()
				[ ] wEconomicAnalysis.btnClose.Click()
			[ ] 
		[+] void waitForRun(int iTimeOut optional )
			[+] if( iTimeOut == NULL )
				[ ] iTimeOut = 30
			[ ] 
			[ ] int i = 1
			[ ] sleep(1) // Need to wait for intitial status bar change
			[ ] 
			[+] while(i < iTimeOut)
				[+] if(dlgAspenPlusOKOrCancel.Exists())
					[ ] dlgAspenPlusOKOrCancel.SetActive()
					[ ] dlgAspenPlusOKOrCancel.BtnOK.Click()
				[+] if  (this.stsbRunDone.Exists() 
    || this.stsbEORunDone.Exists() 
    || this.stsbSMRunDone.Exists()
    || this.stsbRunDoneWithWarnings.Exists())
					[ ] Log.Pass("*** Simulation runs sucessfully. *** ")
					[ ] break
				[+] if( stsbEOSolutionConvergedWithErrors.exists() )
					[ ] Log.Warning("EO Solution Converged with Errors.")
					[ ] break
				[+] if(this.stsbEOSolutionFailed.Exists() || this.stsbEORunDoneWithWarnings.exists())
					[ ] Log.Warning("EO Solution Failed, Please check if this can be ignored.")
					[ ] break
				[+] else if( this.stsbRunDoneWithError.exists())
					[ ] Log.Warning("RUN FAILED, Please check if this can be ignored.")
					[ ] break
				[+] else
					[ ] sleep(1)   //Check for completion every second
					[ ] i++
					[ ] 
			[+] if( i >= iTimeOut )
				[ ] Log.Error("Run Has not completed in Specified Time")
			[+] if(wEconomicAnalysis.exists(1))
				[ ] wEconomicAnalysis.CheckBox.Click()
				[ ] sleep(1)
				[ ] wEconomicAnalysis.btnClose.Click()
			[ ] 
		[+] void setSoutionMethod(string method)
			[ ] //Use EO, SM, or Mixed
			[+] if( this.getMode() != "Simulation")
				[ ] this.setMode("Simulation")
			[ ] this.SetTab("Equation Oriented")
			[ ] this.grpRunControls.Exists(5)
			[ ] this.grpRunControls.cboSolutionMethod.WaitForProperty("IsEnabled",TRUE, 5)
			[ ] this.grpRunControls.cboSolutionMethod.ChangeMethod(method)
		[+] RunAndCountIterationOnCP(integer runTime, integer iMax,  boolean ClickOK optional )
			[ ] // Eric's method to count iterations with an add on to count iterations direction on the control panel following a run
			[ ] //1. Clear Panel
			[ ] //2. Run and wait for specified time
			[ ] //3. Save contents of control panel
			[ ] //4.Check iterations using Eric's Method
			[ ] //This now logs Warnings instead of errors. Test should not necessarily fail if the engine is modified 
			[ ] //as long as convergence is achieved in acceptable amount of time.
			[ ] //Changed to count the number of iterations and not give the number of the last one. 0,1,2,3 ---> Now gives 4 Iterations
			[ ] this.TypeKeys("<F7>")
			[ ] sleep(2)
			[ ] this.SetTab("Home")
			[ ] sleep(1)
			[ ] this.purgeCP()
			[ ] this.TypeKeys("<F5>")
			[ ] sleep(1)
			[+] if(ClickOK != NULL && ClickOK ==TRUE && dlgAspenPlus.exists(5))
				[ ] dlgAspenPlus.BtnYes.Click()
			[ ] sleep(runTime)
			[ ] list of string lstText = this.rtxtMessageView.GetText()
			[ ] integer i=1, j=1,iCount=0
			[ ] handle hFile = FileOpen("C:\temp.txt",FM_WRITE)
			[+] for(i=1;i<=ListCount(lstText);i++)
				[ ] FileWriteLine(hFile,lstText[i])
			[ ] FileClose(hFile)
			[ ] sleep(1)
			[ ] STRING sLine
			[ ] 
			[ ] string sIteration = "Iteration"
			[ ] string sNext 
			[ ] integer iLine = 0
			[ ] integer iIterationCount = 0
			[ ] integer nNum
			[ ] // =======================================================
			[ ] 
			[ ] hFile = FileOpen ("C:\temp.txt", FM_READ)
			[+] while (FileReadLine (hFile, sLine))
				[ ] sLine = left(trim(sLine),Len(sIteration))
				[ ] 
				[+] if sLine == sIteration
					[+] while(FileReadLine (hFile, sLine))
						[ ] sNext = left(trim(sLine),2)
						[ ] iLine = iLine+2
						[ ] nNum = Val (sNext)
						[+] if nNum == iIterationCount
							[ ] iIterationCount++
						[ ]  
				[ ] iLine++
			[ ] 
			[ ] FileClose (hFile)
			[ ] 
			[+] if iIterationCount > iMax
				[ ] Log.Warning("Number of iterations - {iIterationCount} exceed {iMax}")
			[+] if iIterationCount < iMax
				[ ] Log.Warning("Number of iterations - {iIterationCount} less then {iMax}")
			[ ] 
			[+] if iIterationCount == iMax
				[ ] Log.Pass("Number of iterations  is - {iIterationCount}")
			[ ] 
		[+] RunAndCountIterationOnCP_SharingViolation(integer runTime, integer iMax,  boolean ClickOK optional )
			[ ] // Eric's method to count iterations with an add on to count iterations direction on the control panel following a run
			[ ] //1. Clear Panel
			[ ] //2. Run and wait for specified time
			[ ] //3. Save contents of control panel
			[ ] //4.Check iterations using Eric's Method
			[ ] //This now logs Warnings instead of errors. Test should not necessarily fail if the engine is modified 
			[ ] //as long as convergence is achieved in acceptable amount of time.
			[ ] //Changed to count the number of iterations and not give the number of the last one. 0,1,2,3 ---> Now gives 4 Iterations
			[ ] this.TypeKeys("<F7>")
			[ ] sleep(2)
			[ ] this.SetTab("Home")
			[ ] sleep(1)
			[ ] this.find("//WPFButtonBase[@caption='Purge control*']").Click()  //Purge Control Panel Messages
			[ ] this.TypeKeys("<F5>")
			[ ] sleep(1)
			[+] if(ClickOK != NULL && ClickOK ==TRUE && dlgAspenPlus.exists(5))
				[ ] dlgAspenPlus.BtnYes.Click()
			[ ] sleep(runTime)
			[ ] list of string lstText = this.rtxtMessageView.GetText()
			[ ] integer i=1, j=1,iCount=0
			[ ] string sTempFile = SYS_GetEnv ("TEMP") + "temp.txt"
			[+] if (sTempFile == "" || sTempFile == null)
				[+] if (!Sys_DirExists("C:\temp"))
					[ ] Sys_Execute('mkdir "C:\temp"')
					[ ] sTempFile = "C:\temp\temp.txt"
			[ ] handle hFile = FileOpen(sTempFile, FM_WRITE)
			[+] for(i=1;i<=ListCount(lstText);i++)
				[ ] FileWriteLine(hFile,lstText[i])
			[ ] FileClose(hFile)
			[ ] sleep(1)
			[ ] STRING sLine
			[ ] 
			[ ] string sIteration = "Iteration"
			[ ] string sNext 
			[ ] integer iLine = 0
			[ ] integer iIterationCount = 0
			[ ] integer nNum
			[ ] // =======================================================
			[ ] 
			[ ] hFile = FileOpen (sTempFile, FM_READ)
			[+] while (FileReadLine (hFile, sLine))
				[ ] sLine = left(trim(sLine),Len(sIteration))
				[ ] 
				[+] if sLine == sIteration
					[+] while(FileReadLine (hFile, sLine))
						[ ] sNext = left(trim(sLine),2)
						[ ] iLine = iLine+2
						[ ] nNum = Val (sNext)
						[+] if nNum == iIterationCount
							[ ] iIterationCount++
						[ ]  
				[ ] iLine++
			[ ] 
			[ ] FileClose (hFile)
			[ ] 
			[+] if iIterationCount > iMax
				[ ] Log.Warning("Number of iterations - {iIterationCount} exceed {iMax}")
			[+] if iIterationCount < iMax
				[ ] Log.Warning("Number of iterations - {iIterationCount} less then {iMax}")
			[ ] 
			[+] if iIterationCount == iMax
				[ ] Log.Pass("Number of iterations  is - {iIterationCount}")
			[ ] 
		[-] void Reinit()
			[ ] this.SetActive()
			[ ] this.TypeKeys("<Shift-F5>")
			[+] if(wReinit.Exists(50))
				[ ] wReinit.SetActive()
				[ ] wReinit.btnOK.Click()
				[+] if(wReinitConfirm.Exists(10))
					[+] if wReinitConfirm.BtnOK.Exists()
						[ ] sleep(0.6)
						[+] do
							[ ] Agent.SetOption (OPT_SYNC_TIMEOUT, 2)
							[ ] wReinitConfirm.BtnOK.Click()
						[ ] except
			[+] else if( wAspenProperties.Exists(10) )
				[ ] wAspenProperties.BtnOK.Click()
				[ ] sleep(1)
		[+] SelectMethod(string sMethodName)
			[ ] // SelectMethod ( string )  - Select the sMethodName in the Method Name ComboBox 
			[ ] //  Arguments:
			[ ] //  1.  sMethodName  - string, name of method you want select
			[ ] //  Usage: AP.SelectMethod("UNIQUAC")
			[ ] 
			[ ] this.hccProperties.Click()
			[ ] sleep(2)
			[ ] this.trvPartTree.SetFocus()
			[ ] //this.trviMethods.Click()
			[ ] this.trviMethods.Select()
			[ ] this.trvPartTree.TypeKeys("<Enter>")
			[ ] sleep(2)
			[ ] this.SetTab("Global")
			[ ] sleep(1)
			[ ] this.togbtnMethods.Click()
			[ ] this.cboMethods.Click()
			[ ] this.cboMethods.Select(sMethodName)
			[ ] 
		[+] ResolveConflict()
			[+] if(wResolveIdConflicts.Exists(5))
				[ ] wResolveIdConflicts.SetActive()
				[ ] wResolveIdConflicts.lstConflictIDList.Select("#1")
				[ ] wResolveIdConflicts.lstConflictIDList.SelectAll()
				[ ] sleep(1)
				[+] if(wResolveIdConflicts.btnReplace.IsEnabled)
					[ ] wResolveIdConflicts.btnReplace.Click()
				[+] else
					[ ] wResolveIdConflicts.btnMerge.Click()
				[ ] sleep(1)
				[ ] glwaitForMouseIdle(10)
				[ ] wResolveIdConflicts.btnOk.Click()
			[+] if(dlgAspenPlusYesOrNo.Exists(5))
				[ ] dlgAspenPlusYesOrNo.SetActive()
				[ ] dlgAspenPlusYesOrNo.btnYes.Click()
				[ ] 
		[+] void setAutoRun(boolean On)
			[+] if( this.GetMode() != "Simulation")
				[ ] this.SetMode("Simulation")
				[ ] glWaitForMouseIdle()
			[ ] APlus.SetTab("Home")							//Navigates to the "Home" tab
			[ ] APlus.grpRun.btnRunSettings.Exists(5)
			[ ] APlus.grpRun.btnRunSettings.Click()
			[ ] wRunSettings.Exists(5)
			[ ] wRunSettings.TbOptions.Click()
			[ ] sleep(0.5)
			[+] if(On)
				[ ] wRunSettings.chkAutoRunMode.Check()
			[+] else
				[ ] wRunSettings.chkAutoRunMode.unCheck()
			[ ] sleep(1)
			[ ] wRunSettings.BtnApply.Click()
			[ ] sleep(0.5)
			[ ] wRunSettings.BtnOk.Click()
			[ ] sleep(0.5)
			[ ] 
		[ ] 
		[ ] //Verify Run Status
		[+] checkStatusText(string expected)
			[ ] //Making another one because verify can throw an exception that I don't feel like dealing with
			[+] if(!matchStr( expected, this.StatusText ))
				[ ] Log.Error("ERROR: Expected  {chr(34)}{expected}{chr(34)}              Found: {chr(34)}{this.StatusText}{chr(34)}")
			[+] else
				[ ] Log.Pass("Status Text Reads {chr(34)}{this.StatusText}{chr(34)} as expected")
		[+] void Verify_AP_Status(string sStatus)
			[ ] //Verify the Status message in A+
			[ ] //Example :Verify_AP_Status("Results Available")
			[ ] this.SetActive()
			[ ] Verify(this.stbStatus.Find("//WPFStatusBarItem[2]").sCaption,sStatus)
		[+] void Verify_Run_Result(list of string lsVerify )
			[ ] this.SetActive()
			[ ] this.TypeKeys("<F7>")
			[ ] sleep(5)
			[ ] int i = 1
			[ ] list of STRING lsReturn
			[ ] // Each character of the input string
			[ ] STRING  sChar
			[ ] 
			[ ] // Substring between two delimeters
			[ ] STRING  sWord = ""
			[ ] 
			[ ] // Current Character count
			[ ] INT iChar = 0
			[ ] 
			[ ] // Length of the string
			[ ] INT iLen = 0
			[ ] 
			[ ] sWord = ""
			[ ] 
			[ ] // wControlPanel.Exists(5)
			[ ] // 
			[ ] // Clipboard.SetText({})
			[ ] // wControlPanel.MessageView.SetFocus()
			[ ] // wControlPanel.MessageView.TypeKeys("<ctrl-a>")
			[ ] // wControlPanel.MessageView.TypeKeys("<ctrl-c>")
			[ ] // List of STRING lsContent=Clipboard.GetText()
			[ ] this.rtxtMessageView.Exists(10)
			[ ] list of STRING lsText = this.rtxtMessageView.GetText()
			[ ] 
			[+] for(i=1;i<=ListCount(lsText); i++)
				[ ] iLen = Len(lsText[i])
				[ ] 
				[ ] // Scan all the positions
				[+] for iChar = 1 to iLen
					[ ] // Extract the character in the current position
					[ ] sChar = SubStr(lsText[i], iChar,1)
					[ ] 
					[ ] // If delimiter encountered
					[+] if	(asc(sChar) == 13)
						[ ] // If a word (substring between two delimiters) was already extracted
						[+] if	(sWord != "")
							[ ] // Append the word into the list
							[ ] ListAppend( lsReturn, sWord )
							[ ] // Initialize to start forming next word
							[ ] sWord = ""
					[ ] // If current position does not have a delimiter, append the character in this position to the word
					[+] else
						[ ] sWord = sWord + sChar
				[ ] // Last word will be at the end of the string, so no delimiter will be encountered. Append it to the list
				[+] if	(sWord != "")
					[ ] ListAppend( lsReturn, sWord )
					[ ] sWord = ""
			[ ] 
			[+] if Str.MatchList(lsReturn,lsVerify)
				[ ] Log.Pass("Find the following messages  in control panel")
				[ ] Print("")
				[ ] ListPrint(lsVerify)
				[ ] Print("")
			[+] else
				[ ] Log.Fail("Verified run result failed")
			[ ] 
			[ ] 
		[+] void CheckStatusBar()					
			[+] if (APlus.stsbRunDone.Exists())					//Checks the status bar to determine success of the run and prints a message accordingly
				[ ] Print("***Run complete. Results available.")
			[+] else
				[ ] LogError("***Run did not complete.")
			[ ] Sleep(3)
		[+] void CheckStatusBar_ControlPanel()
			[+] LIST OF STRING lsCheck = {...}
				[ ] "Simulation calculations completed"
			[ ] APlus.OpenControlPanel()
			[+] if (APlus.stsbRunDone.Exists())					//Checks the status bar to determine success of the run and prints a message accordingly
				[ ] Print("***Run complete. Results available.")
			[+] else
				[ ] LogError("***Run did not complete.")
			[ ] 
			[ ] APlus.VerifyControlPanelContainsValues(lsCheck)			//Checks the control panel output for the string "Simulation calculations completed" (as defined in lsCheck)
			[ ] Sleep(3)
		[+] boolean verifyStatus(string expectedStatus, int timeout optional)
			[ ] FINDOPTIONS options
			[+] if( timeout != NULL && timeout >= 0)
				[ ] options.timeout = timeout
			[+] else
				[ ] options.timeout = 30
			[ ] options.throwWindowNotFoundException = FALSE
			[+] if( this.find("//WPFStatusBarItem[@caption='{expectedStatus}']", options) == NULL)
				[ ] Log.Error("ERROR:     Expected Status: {chr(34)}{expectedStatus}{chr(34)}          Actual Status: {chr(34)}{this.StatusText}{chr(34)}                  Timeout: {timeout}")
				[ ] return False
			[+] else
				[ ] Log.Pass("Status Reads: {chr(34)}{expectedStatus}{chr(34)}")
				[ ] return true
		[ ] 	
		[ ] 
		[ ] //Navigation
		[-] SetTab(string sTabName)
			[ ] // SetTab ( string )  - Sets the active tab
			[ ] //  Arguments:
			[ ] //  1.  tabName  - string, name of tab to make active
			[ ] //  Usage: AP.SetTab('Global')
			[ ] //window wTab = this.ctlTabs.Find("//WPFTabItem[@caption='{sTabName}*']")
			[ ] window wTab = this.Find("//WPFTabItem[@caption='{sTabName}*']")
			[ ] wTab.Select()
			[ ] wTab.Click()
		[+] LoadForm(string sFormName)
			[ ] // LoadForm ( string ) - Loads the form
			[ ] //  Arguments:
			[ ] //  1.  FormName  - string, path to form with or without problem mode
			[ ] //  Usage:
			[ ] //  - AP.LoadForm('Simulation!Setup.Specifications')
			[ ] //  - AP.LoadForm('Blocks.B6.Profiles')
			[ ] //  - AP.LoadForm('Properties!Components.Specifications')
			[ ] list of string lsFormName 
			[+] if left(sFormName, 1) == "."
				[ ] sFormName = subStr(sFormName, 2)
			[+] if !MatchStr("*!*", sFormName)
				[ ] lsFormName = glCastStrToList(sFormName,".")
			[+] else
				[ ] string sMode = GetField(sFormName, "!",1)
				[ ] lsFormName = glCastStrToList(GetField(sFormName, "!",2),".")
				[ ] this.SetMode(sMode)
			[ ] int i = 1
			[ ] window wCurrentTrvItm = this.trvPartTree
			[+] for (i =1; i <= listcount(lsFormName); i++)
				[ ] print(lsFormName[i])
				[ ] wCurrentTrvItm = wCurrentTrvItm.Find("/WPFTreeViewItem[@caption='{lsFormName[i]}']")
				[ ] wCurrentTrvItm.SetFocus()
				[ ] wCurrentTrvItm.Select()
				[ ] sleep(1)
				[ ] wCurrentTrvItm.Click()
				[ ] sleep(1)
				[+] if !wCurrentTrvItm.IsExpanded
					[ ] wCurrentTrvItm.Expand()
			[ ] wCurrentTrvItm.Click() 
			[ ] 
			[ ] 
		[+] void AccessForm(string sFormPath)
			[ ] this.SetActive()
			[ ] Sleep(1)
			[ ] this.trvPartTree.Expand(sFormPath)				//navigate to the correct path
			[ ] glWaitForMouseIdle(30)
			[ ] this.trvPartTree.Click(sFormPath)
			[ ] glWaitForMouseIdle(30)
		[+] void SetMode( string sMode)
			[ ] // SetMode ( string ) - Sets the problem mode
			[ ] //  Arguments:
			[ ] //  1.  mode  - string, problem mode 'Simulation' or 'Properties'
			[ ] //  Usage: AP.SetMode('Properties')
			[ ] if (this.hccProperties.Exists(10) || this.hccSimulation.Exists(10) || this.hccEnergyAnalysis.Exists(10))
			[ ] this.SetTab("Home")
			[+] if sMode == this.GetMode()
				[ ] return
			[+] else
				[+] switch(sMode)
					[+] case "Simulation"
						[ ] this.SetActive()
						[ ] this.hccSimulation.Click()
						[ ] this.trviBlocks.exists(10)
					[+] case "Properties"
						[ ] this.SetActive()
						[ ] this.hccProperties.Click()
						[ ] this.trviComponents.Exists(10)
					[+] case "Energy Analysis"
						[ ] this.SetActive()
						[ ] this.hccEnergyAnalysis.Click()
						[ ] this.btnSetupEA.exists(10)
					[+] case "Safety Analysis"
						[ ] this.SetActive()
						[ ] this.hccSafetyAnalysis.Click()
						[ ] this.btnAddPSV.Exists(60)
						[ ] 
			[ ] sleep(2)	
			[ ] glWaitForMouseIdle(60)
			[ ] 
		[+] string GetMode()
			[ ] //GetMode ( ) - Gets the current problem mode (Simulation/Properties)
			[+] if ( this.tbEconomics.Exists(1) )
				[ ] return "Simulation"
			[+] else if( this.tbView.Exists(1) )
				[ ] return "Properties"
			[+] else
				[ ] return "Energy Analysis"
				[ ] 
				[ ] 
				[ ] 
		[+] NextButton()
			[ ] //NextButton ( ) - Executes the Next button for the current form
			[ ] this.SetActive()
			[ ] this.grpQuickAccessToolbar.btnNext.SetFocus()
			[ ] this.grpQuickAccessToolbar.btnNext.Click()
			[ ] sleep(3)
			[ ] // this.TypeKeys("<F4>")
			[ ] 
		[+] void ActivatePlantView()
			[ ] //Activate 'Plant View' by navigating to Ribbon | View tab | Show group | Plant View button.
			[ ] this.SetActive()
			[ ] sleep(1)
			[ ] this.SetTab("View")
			[ ] sleep(1)
			[ ] window w = this.Find("//WPFButtonBase[@caption='Plant View' and @className='ButtonTool']")
			[ ] w.SetFocus()
			[ ] w.Click()
			[ ] HANDLE hTimer
			[ ] hTimer = TimerCreate ()
			[ ] TimerStart (hTimer)
			[ ] sleep(10)
			[ ] glWaitForMouseIdle(60)
			[+] do 
				[+] if this.Find("//DialogBox//StaticText[@caption='*Simulation results must be present before you can compare them with plant data.  Run the simulation*.']").exists(2)
					[ ] window wBtnOK = this.Find("//DialogBox//PushButton[@caption='OK']")
					[ ] wBtnOK.SetFocus()
					[ ] wBtnOK.Click()
			[+] except
				[ ] exceptclear()
			[ ] integer iTimeOut = 1200
			[ ] 
			[+] do
				[ ] window wPlantView =  this.Find("//WPFTabItem[@caption='Plant View*' and @className='PaneTabItem']")
				[ ] wPlantView.Exists(60)
				[ ] glWaitForMouseIdle(60)
				[ ] 
				[+] if APlus.StatusText != "Flowsheet Not Complete"
					[+] while(TimerValue(hTimer) < iTimeOut)
						[+] do
							[ ] window wPlantData =  this.Find("//WPFTextBlock[@automationId='tb' and @caption='Plant Data']")
							[ ] wPlantData.Click()
							[ ] break
						[+] except
							[+] if ExceptNum() != E_WINDOW_NOT_FOUND
								[ ] reraise
							[ ] 
				[ ] TimerStop (hTimer)
				[ ] string sTime = str(TimerValue(hTimer))
				[ ] Log.Pass("Approximate activate TIme: {sTime} seconds")
				[ ] real rTime = TimerValue (hTimer)
				[ ] TimerDestroy(hTimer)
				[+] if( rTime> iTimeOut)
					[ ] RaiseError(-1, "Can't activate Plant View within {iTimeOut} seconds.")
				[ ] Log.Message("activate Plant View successfully!")
			[+] except
				[ ] RaiseError(-1, "Can't activate Plant View within {iTimeOut} seconds.")
			[ ] sleep(5)
			[ ] 
			[ ] 
			[ ] 
		[ ] 
		[+] void closeTab(string tab, boolean checkClose optional )
			[ ] FINDOPTIONS options
			[ ] options.timeout = 0.5
			[ ] options.throwWindowNotFoundException = False
			[ ] 
			[+] do
				[ ] this.find("//WPFTabItem[@caption='*{tab}*']//WPFButton", options).Click()
				[ ] sleep(1)
			[+] except
				[ ] exceptClear()
				[+] if( checkClose == NULL ||  checkClose != TRUE)
					[ ] 
				[+] else
					[ ] Log.ERROR("ERROR: Unable to close tab {tab}")
				[ ] 
		[+] void setZoom(string zoom)
			[ ] this.setTab("View")
			[ ] this.grpZoom.exists(5)
			[ ] this.grpZoom.btnZoom.Click()
			[ ] wZoom.exists(5)
			[ ] wZoom.rdCustom.Click()
			[ ] wZoom.txbZoom.doubleClick()
			[ ] wZoom.txbZoom.TypeKeys(zoom)
			[ ] wZoom.btnOK.Click()
		[ ] 
		[ ] //Control Panel
		[+] boolean VerifyControlPanelContainsValues(list of string lstExpectedResults, boolean breakUp optional, boolean printCP optional)
			[ ] //Verifies control panel contains strings in order of expected
			[ ] //If A String is not found, it will go on to find the others but flag an error
			[ ] //Doesn't Deal with Control Panel Problem of Printing everything as one line.
			[ ] sleep(1)
			[ ] integer i=1, j = 1, k =1
			[ ] list of string lstText  = this.getCPContent(breakUp, printCP)
			[ ] string sLine
			[ ] string sLine2
			[ ] int panelLength = listCount(lstText)
			[ ] int expectedCount = listCount(lstExpectedResults)
			[ ] boolean lineSaved = False
			[ ] int saveLineNumber
			[ ] int found = 0
			[ ] i=1
			[ ] j = 1
			[ ] k =1
			[ ] 
			[+] while( i <= panelLength && j <= expectedCount )
				[ ] 
				[+] 
					[+] if(MatchStr("*{lstExpectedResults[j]}*",lstText[i]) || lstExpectedResults[j] == lstText[i])
						[ ] Log.Message("ON LINE {i}  Found:           {lstExpectedResults[j]}")
						[ ] found++
						[ ] lineSaved = False
						[ ] j++
						[+] if( j > expectedCount )
							[ ] break
					[+] else
						[ ] 
						[+] if( lineSaved != True)
							[ ] saveLineNumber = i
						[ ] lineSaved = True
						[ ] i++
						[ ] //print("Result: {j}        Line {i} of {panelLength} " )
						[+] if( i>panelLength && j <= expectedCount)
							[ ] Log.Error( "ERROR: {lstExpectedResults[j]} was not found in Proper Order on the control Panel")
							[+] for( k =1; k <= panelLength; k++)
								[+] if( matchstr(lstExpectedResults[j], lstText[k]) )
									[ ] Log.Warning("WARNING: ON LINE {k}           {lstExpectedResults[j]} was found out of order         ")
									[ ] found++
									[ ] break
							[ ] 
							[ ] j++ // Not Found Move on
							[+] if( j <= expectedCount) // Keeping on searching at the first line where the last expected value was not found
								[ ] i = saveLineNumber 
			[+] if( i <= panelLength && j > expectedCount  && found == expectedCount)
				[ ] 
				[ ] Log.Pass("Found all expected Strings")
				[ ] return TRUE
				[ ] 
			[+] else
				[ ] Log.Fail("FOUND    {found} of {expectedCount}  EXPECTED STRINGS ON THE CONTROL PANEL")
				[+] if( printCP == NULL || !printCP )
					[ ] PRINT()
					[ ] PRINT()
					[ ] PRINT( "*********PRINTING CONTROL PANEL CONTENTS FOR ERROR ANALYSIS****************")
					[ ] PRINT()
					[ ] PRINT()
					[ ] this.getCPContent(breakUp, TRUE)
					[ ] PRINT()
					[ ] PRINT()
					[ ] 
					[ ] 
				[ ] return FALSE
				[ ] 
		[+] int CountIterationsInCP(string iterationType, boolean breakUp optional, boolean printCP optional, int iterationMax optional, string customIndicator optional  )
			[ ] // iterationMax  is the max allowed iteration, if over, will throw an error
			[ ] // iterationType is SM or EO
			[ ] //Breakup is by character 13
			[ ] 
			[ ] 
			[+] if( iterationType != "SM" && iterationType != "EO" )
				[ ] Log.Error("Iteration Type {chr(34)}{iterationType}{chr(34)} is not recognized")
				[ ] return -3000
			[ ] 
			[ ] 
			[+] if( breakUp == NULL )
				[ ] breakUp = TRUE
			[+] if( printCP == NULL )
				[ ] printCP =TRUE
			[ ] 
			[ ] list of string lstText 
			[ ] lstText = APlus.getCPContent(breakUp, printCP)
			[ ] int i=1, j=1
			[ ] sleep(1)
			[ ] STRING sLine
			[ ] 
			[ ] string sIteration
			[ ] //Select Iteration Indicator Text
			[+] if( customIndicator != NULL)
				[ ] sIteration = customIndicator
			[+] else if( iterationType == "SM")
				[ ] sIteration = "Convergence iterations:"
			[+] else
				[ ] sIteration = "Iteration"
			[ ] 
			[ ] string sNext 
			[ ] integer iLine = 0
			[ ] integer iterationCount = 0
			[ ] integer nNum
			[ ] int cpLength 
			[ ] cpLength = listcount( lstText)
			[ ] 
			[ ] //For some Reason SM iterations start at 1 and EO iterations start at 0
			[ ] 
			[+] if( iterationType == "SM") 
				[+] while (i <= cpLength )
					[ ] 
					[+] if matchStr("*{sIteration}*", lstText[i])
						[ ] Log.Pass("Found  Iteration Indicator: {sIteration}")
						[ ] i += 2
						[+] while (i <= cpLength )
							[ ] // print(lstText[i])
							[ ] // print( val(lstText[i]) )
							[ ] // print( iterationCount)
							[ ] nNum = Val (lstText[i])
							[+] if(  nNum  == iterationCount + 1 || nNum  == iterationCount)
								[ ] iterationCount++
							[+] else
								[ ] break
							[ ] i++
					[ ] i++
					[ ] 
			[+] else if( iterationType == "EO")
				[ ] // =======================================================
				[ ] 
				[+] while (i <= cpLength )
					[ ] sLine = left(trim(lstText[i]),Len(sIteration))
					[+] if sLine == sIteration
						[ ] i++
						[+] if(  matchstr( "---------*", lstText[i] )  )
							[ ] i++
						[+] while (i <= cpLength )
							[ ] sNext = left(trim(lstText[i]),2)
							[ ] nNum = Val (sNext)
							[+] if nNum == iterationCount
								[ ] iterationCount++
							[+] else
								[ ] break
							[ ] i++
					[ ] i++
				[ ] 
			[+] else
				[ ] Log.Error("ERROR: Iteration Type is Not Recognized")
				[ ] return -3000
			[ ] 
			[+] if( iterationMax != NULL )
				[+] if iterationCount > iterationMax
					[ ] Log.Error("Number of iterations - {iterationCount} exceed {iterationMax}, CHECK IF THIS IS OK AND/OR UPDATE TEST CASE")
				[+] if iterationCount <  iterationMax
					[+] if abs(iterationCount - iterationMax) > 2
						[ ] Log.Error("ERROR: Number of iterations - {iterationCount} less then {iterationMax}, CHECK IF THIS IS OK AND/OR UPDATE TEST CASE")
					[+] else
						[ ] Log.Warning("Number of iterations - {iterationCount} less then {iterationMax}, CHECK IF THIS IS OK AND/OR UPDATE TEST CASE")
				[+] if iterationCount ==  iterationMax
					[ ] Log.Pass("Number of iterations  is - {iterationCount}")
					[ ] Log.Pass("{iterationCount} iterations were counted as expected")
				[ ] 
			[ ] return iterationCount
			[ ] 
		[+] list of STRING getCPContent( boolean breakUp optional, boolean printCP optional, string fileName optional)
			[ ] //FileName specifies which file to write to if desired
			[+] if( !this.rtxtMessageView.Exists() )
				[ ] this.TypeKeys("<F7>")
				[ ] this.rtxtMessageView.Exists(10)
				[ ] sleep(1)
			[ ] list of string lstText = this.rtxtMessageView.GetText()
			[+] if( lstText == NULL || listCount(lstText) < 2)
				[ ] sleep(3)
				[ ] PRINT("****UNABLE TO GET CP Text...    Retrying")
				[ ] lstText = this.rtxtMessageView.GetText()
				[ ] sleep(0.5)
				[+] if( lstText == NULL || listCount(lstText) < 5)
					[ ] sleep(3)
					[ ] PRINT("****UNABLE TO GET CP Text...    Retrying")
					[ ] lstText = this.rtxtMessageView.GetText()
			[ ] sleep(0.5)
			[ ] integer i=1, j = 1, k =1
			[ ] int length
			[ ] int lastPos = 0
			[+] if( breakUp == NULL || breakUp == TRUE  )
				[ ] string longString
				[ ] string line
				[ ] list of string original = lstText
				[ ] int originalStrings = listCount(lstText)
				[ ] list of string temp = lstText
				[+] lstText = {...}
					[ ] 
				[+] for each longString in temp
					[ ] length = len(longString)
					[ ] int count = 0
					[ ] lastPos = 0
					[ ] 
					[ ] // print("LongString: {longString}")
					[ ] 
					[+] 
						[+] for( i = 1; i <= length; i++)
								[ ] // print(asc( longString[i]) )
								[ ] // print(longString[i])
							[+] if( Asc(substr(longString,i,1)) == 13 )
								[ ] // print("Found 13")
								[ ] listAppend(lstText, substr(longString, lastPos + 1, i - lastPos - 1) )
								[ ] // print("Adding Line: {substr(longString, lastPos + 1, i - lastPos - 1)}")
								[ ] // print()
								[ ] // listPrint(lstText)
								[ ] // print()
								[ ] count ++
								[ ] lastPos = i
							[+] else if( i == length) // If last Character in line is not a Fortran Newline Character
								[ ] listAppend(lstText, substr(longString, lastPos + 1, i - lastPos) )
								[ ] 
								[ ] // print("Adding: {substr(longString, lastPos + 1, i - lastPos) }")
								[ ] count++
							[+] else
								[ ] 
				[ ] PRINT("CONTROL PANEL DIVIDED INTO {listCount(lstText)} LINES")
			[+] if( printCP != NULL && printCP == TRUE)
				[+] if( breakUp == NULL || breakUp == TRUE  )
					[ ] PRINT("**************CONTROL PANEL OUTPUT DIVIDED BY CHR 13 into {listCount(lstText)}  Lines**********")
				[+] else
					[ ] PRINT("**************CONTROL PANEL OUTPUT ************************ ******************")
				[ ] PRINT("****************************************************************************************")
				[ ] PRINT("****************************************************************************************")
				[+] for each line in lstText
					[ ] PRINT(line)
				[ ] PRINT("****************************************************************************************")
				[ ] PRINT("****************************************************************************************")
				[ ] PRINT ("****************************************************************************************")
			[ ] 
			[ ] //Write File
			[+] if( fileName != NULL )
				[ ] File.New(fileName, lstText)
			[ ] 
			[ ] 
			[ ] return lstText
			[ ] 
		[+] boolean checkForInactiveConnection( string sTypeOfConnection, string sName optional )
			[ ] //Connections are output as a single string
			[ ] //People who are better at string manipulation are welcome to improve upon this method
			[ ] //Trevor Merrill
			[ ] 
			[ ] string sOutput = (this.rtxtMessageView.getText())[1]
			[ ] 
			[ ] int i = 1
			[ ] int outputLength = len(sOutput)
			[ ] int start = 0
			[ ] int end = 0
			[ ] list of string lsOutput
			[ ] 
			[+] while( i < outputLength )
				[+] if( substr(sOutput, i, 1) == "<" )
					[ ] start = i
				[ ] 
				[+] if( substr(sOutput, i, 1) == ">" && start != 0 )
					[ ] end = i
				[ ] 
				[ ] 
				[+] if( start != 0 && end != 0 )
					[ ] integer length = end-start+1
					[ ] //Print("******************************************Length: {length} ***********************************************************")
					[ ] listAppend(lsOutput, substr(sOutput, start, length ) )
					[ ] start = 0
					[ ] end = 0
				[ ] i++
				[ ] 
				[ ] 
				[ ] 
			[ ] string connection
			[+] if( sName == NULL)
				[+] for each connection in lsOutput
					[ ] Print(connection)
					[+] if( matchstr("*{sTypeOfConnection}*inactive*", connection))
						[ ] return True
			[+] else
				[+] for each connection in lsOutput
					[+] if( matchstr("*{sTypeOfConnection} {sName}*inactive*", connection))
						[ ] return True
			[ ] 
			[ ] return False
			[ ] 
			[ ] 
			[ ] 
			[ ] 
		[+] boolean checkForDisabledConnection( string sTypeOfConnection, string sName optional )
			[ ] //Connections are output as a single string
			[ ] //People who are better at string manipulation are welcome to improve upon this method
			[ ] //Trevor Merrill
			[ ] 
			[ ] string sOutput = (this.rtxtMessageView.getText())[1]
			[ ] 
			[ ] int i = 1
			[ ] int outputLength = len(sOutput)
			[ ] int start = 0
			[ ] int end = 0
			[ ] list of string lsOutput
			[ ] 
			[+] while( i < outputLength )
				[+] if( substr(sOutput, i, 1) == "<" )
					[ ] start = i
				[ ] 
				[+] if( substr(sOutput, i, 1) == ">" && start != 0 )
					[ ] end = i
				[ ] 
				[+] if( start != 0 && end != 0 )
					[ ] integer length = end-start+1
					[ ] listAppend(lsOutput, substr(sOutput, start, length ) )
					[ ] start = 0
					[ ] end = 0
				[ ] i++
			[ ] string connection
			[+] if( sName == NULL)
				[+] for each connection in lsOutput
						[ ] Print(connection)
					[+] if( matchstr("*{sTypeOfConnection}*disabled*", connection))
						[ ] return True
			[+] else
				[+] for each connection in lsOutput
					[+] if( matchstr("*{sTypeOfConnection} {sName}*disabled*", connection))
						[ ] return True
				[ ] 
			[+] return False
				[ ] 
			[ ] 
		[+] VerifyControlPanelCleared()
			[ ] list of string lstText = APlus.rtxtMessageView.GetText()			//gets text in control panel		
			[ ] integer i=1, iCount=0
			[ ] handle hFile = FileOpen("C:\temp.txt",FM_WRITE)			//initializes a temp txt file for write
			[+] for(i=1;i<=ListCount(lstText);i++)								
				[ ] FileWriteLine(hFile,lstText[i])
			[ ] FileClose(hFile)
			[ ] string sLine
			[ ] hFile = FileOpen ("C:\temp.txt", FM_READ)
			[+] while (FileReadLine (hFile, sLine))							//trims each line of the file of empty space
				[ ] sLine = trim(sLine)
			[+] while (FileReadLine (hFile, "*")==true)
				[ ] iCount++
			[+] if(iCount<=2)
				[ ] Print("***The Control Panel has been cleared***")
			[+] else
				[ ] LogError("***The Control Panel is not clear***")
			[ ] FileClose(hFile)
			[ ] 
		[+] OpenControlPanel()
			[ ] //Open control panel tab
			[ ] this.SetActive()
			[ ] this.TypeKeys("<F7>")
			[ ] sleep(5)
			[ ] wControlPanel.Exists(5)
			[+] if (wControlPanel.tbToggleEOControl.Exists(2) && !wControlPanel.tbToggleEOControl.IsChecked) //show EO control group 
				[ ] wControlPanel.tbToggleEOControl.Check()
			[ ] sleep(3)
		[+] CloseControlPanel()
			[ ] this.SetActive()
			[ ] this.tabControlPanel.Click(1,98,10)
			[ ] sleep(1)
		[+] void openCP()
			[ ] this.typeKeys("<F7>")
			[ ] this.togbtnExpander.Exists(5)
			[ ] sleep(1)
			[ ] glWaitForMouseIdle(10)
		[+] void closeCP()
			[ ] this.tabiControlPanel.Click(2)
			[ ] this.ctmGenTabContextMenu.exists(5)
			[ ] this.ctmGenTabContextMenu.miClose.Click()
			[ ] sleep(1)
			[ ] glWaitForMouseIdle(10)
			[ ] 
		[+] void purgeCP()
			[ ] string mode = this.GetMode()
			[+] if( mode != "Simulation" && mode != "Properties")
				[ ] this.setMode("Simulation")
				[ ] this.SetTab("Home")
				[ ] this.setTab("Home")
			[+] if( !this.grpControlPanel.Exists(1))
				[ ] this.typeKeys("<F7>")
				[ ] this.grpControlPanel.Exists(5)
			[ ] this.grpControlPanel.btnClearMessages.Exists(5)
			[ ] this.grpControlPanel.btnClearMessages.Click()
			[ ] sleep(2)
			[ ] 
		[ ] 
		[ ] 
		[ ] //Datagrid Operations
		[+] string GotoCellInPlainDatagrid(int row, int column, window datagrid, string str optional)
			[ ] // GotoCellInPlainDatagrid ( row, column, datagrid, str) - move focus to the specific row and column in datagrid, if str is not null, will set the cell value as str.
			[ ] //  Usage:
			[ ] //  - this.GoToCellInEOVar(3,4,datagrid) or this.GoToCell(3,4,datagrid,"Test")
			[ ] 
			[ ] sleep(2)
			[ ] RECT rectdatagrid = datagrid.GetRect()
			[ ] datagrid.SetFocus()
			[ ] datagrid.Click(1,rectdatagrid.xPos+55,rectdatagrid.yPos+30)
			[ ] datagrid.SetFocus()
			[ ] this.TypeKeys("<Ctrl-Home>")
			[+] if(row>1)
				[ ] this.TypeKeys("<Down {row-1}>")
				[ ] sleep(1)
			[+] if(column>1)
				[ ] this.TypeKeys("<Right {column-1}>")
				[ ] sleep(1)
			[+] if(str != null)
				[ ] //this.TypeKeys("{str}<Enter>")
				[+] list of STRING lststr = {...}
					[ ] str
				[ ] Clipboard.SetText(lststr)
				[ ] this.TypeKeys("<Ctrl-V>")
				[ ] datagrid.TypeKeys("<Enter>")
				[ ] return str
			[+] else
				[ ] Clipboard.SetText()
				[ ] this.TypeKeys("<Ctrl-c>")
				[ ] list of STRING lstValue = Clipboard.GetText()
				[ ] return "{lstValue[1]}"
			[ ] 
			[ ] 
		[+] string GotoCellInPlainDatagridFaster(int row, int column, window datagrid, string str optional)
			[ ] // GotoCellInPlainDatagrid ( row, column, datagrid, str) - move focus to the specific row and column in datagrid, if str is not null, will set the cell value as str.
			[ ] //  Usage:
			[ ] //  - AP.GoToCellInEOVar(3,4,datagrid) or AP.GoToCell(3,4,datagrid,"Test")
			[ ] 
			[+] if( this.gridcellFirst.exists(2) )
				[ ] this.gridcellFirst.Click()
			[+] else
				[ ] this.find("//WPFContentControl[@className='CellValuePresenter'][1]").click()
			[ ] 
			[+] if(row>1)
				[ ] this.TypeKeys("<Down {row-1}>")
				[ ] sleep(0.1)
			[+] if(column>1)
				[ ] this.TypeKeys("<Right {column-1}>")
				[ ] sleep(0.1)
			[+] if(str != null)
				[ ] //this.TypeKeys("{str}<Enter>")
				[+] list of STRING lststr = {...}
					[ ] str
				[ ] Clipboard.SetText(lststr)
				[ ] this.TypeKeys("<Ctrl-V>")
				[ ] datagrid.TypeKeys("<Enter>")
				[ ] return str
			[+] else
				[ ] Clipboard.SetText()
				[ ] this.TypeKeys("<Ctrl-c>")
				[ ] list of STRING lstValue = Clipboard.GetText()
				[ ] return "{lstValue[1]}"
			[ ] 
			[ ] 
		[+] void verifyTable(int rows, int columns, list of string expectedValues, int ignoreRows, boolean countCells optional,  window firstCell optional , boolean selectAll optional, string file optional, real tolerance optional, real absTol optional )
			[ ] //expected values should be a copy of the table you want to verify
			[ ] //Verification will proceed with by using perfect match with strings and relTol with numbers
			[ ] //Ignore Rows---> Ignores the amount of intial specified rows in the table
			[ ] //USE "BLANK" to specify a blank row in expected input
			[ ] //Absolute tolerance is used if relative tolerance fails
			[ ] 
			[ ] //SET THE VALUE OF HOW LOW OF NUMBERS TO IGNORE
			[ ] setPrecision(1e-15)
			[ ] 
			[ ] 
			[+] if( tolerance == NULL)
				[ ] tolerance =  relTol 
			[+] if( file == NULL)
				[+] 
					[ ] 
				[+] if( firstCell != NULL )
					[+] do
						[ ] firstCell.click()
					[+] except
						[ ] Log.Warning("WARNING: Cannot find indicated First Cell. Trying Select All Button")
						[+] do
							[ ] this.find("//WPFButton[@automationId='SelectAll']").click()
						[+] except
							[ ] Log.Error("Cannot Find the Select All Button On the Grid")
							[ ] return
				[+] else
						[+] do
							[ ] this.find("//WPFButton[@automationId='SelectAll']").click()
						[+] except
							[ ] Log.Error("Cannot Find the Select All Button On the Grid")
							[ ] return
					[ ] 
				[ ] Clipboard.SetText()
				[ ] sleep(1)
				[+] if( selectAll == NULL || selectAll == TRUE)
					[ ] this.TypeKeys("<ctrl-a>")
				[ ] this.TypeKeys("<ctrl-c>")
				[ ] sleep(1)
				[ ] list of string clipboard = Clipboard.GetText()
			[+] else // Input From a file
				[ ] handle hFile = FileOpen(file, FM_WRITE)
				[ ] string nextLine
				[+] expectedValues = {...}
					[ ] 
				[+] while( FileReadLine(hFile, nextLine) )
					[ ] listAppend(expectedValues, nextLine)
				[ ] FileClose(hFile)
				[ ] 
			[ ] int i = 1, j = 1, k = 1
			[ ] string line
			[ ] list of string foundCells
			[ ] list of string expectedCells
			[ ] int length
			[ ] int lastTab =0
			[ ] 
			[ ] clipboard = divideListByString(clipboard, chr(10))
			[ ] int clipboardLen = listCount(clipboard)
			[ ] print("Clipboard Length: {listCount(clipboard)}")
			[+] for( k = 1+ignoreRows; k <=clipboardLen; k++)
				[ ] line = clipboard[k]
				[ ] lastTab = 0
				[ ] length = len(line)
				[ ] int cells = 0
				[+] for( i = 1; i <= length; i++)
					[+] if( subStr(line, i, 1 ) == chr(9))
						[+] if( lastTab < i - 1)
							[ ] //print("i : {i}")
							[ ] listAppend(foundCells, substr(line, lastTab + 1, i - lastTab - 1))
						[+] else
							[ ] listAppend(foundCells, "BLANK")
						[ ] //print(foundCells[listcount(foundCells)])
						[ ] lastTab = i
						[ ] cells++
				[+] if(            (    i > 1 && subStr(line, i, 1) == chr(0) && subStr(line, i-1, 1) == chr(9) )      ||     (   subStr(line, i, 1) == chr(9) )       ||   (  i == 1 && subStr(line, i, 1) == chr(0)  )  )
					[ ] listAppend(foundCells, "BLANK")
					[ ] cells++
				[+] else
					[ ] listAppend(foundCells, substr(line, lastTab + 1, i - lastTab)) // Add last celll to the list
					[ ] cells++
					[ ] 
				[ ] 
			[+] for each line in expectedValues
				[ ] cells = 0
				[+] if( line == "BLANK")
					[+] for(j =1; j <= columns; j++)
						[ ] listAppend(expectedCells, "BLANK")
						[ ] cells++
				[+] else
					[ ] length = len(line)
					[ ] lastTab =0
					[+] for( i = 1; i <= length; i++)
						[+] if( subStr(line, i, 1) == chr(9))
							[+] if( lastTab < i - 1)
								[ ] listAppend(expectedCells, substr(line, lastTab + 1, i - lastTab - 1))
							[+] else
								[ ] listAppend(expectedCells, "BLANK")
							[ ] cells++
							[ ] lastTab = i
					[+] if(            (    i > 1 && subStr(line, i, 1) == chr(0) && subStr(line, i-1, 1) == chr(9) )      ||     (   subStr(line, i, 1) == chr(9) )       ||   (  i == 1 && subStr(line, i, 1) == chr(0)  )  )
						[ ] listAppend(expectedCells, "BLANK")
						[ ] cells++
					[+] else
						[ ] listAppend(expectedCells, substr(line, lastTab + 1, i - lastTab)) // Add last celll to the list
						[ ] cells++
				[ ] 
			[+] if( countCells != NULL && countCells == TRUE )
				[+] if( listcount(foundCells) != rows*columns)
					[ ] Log.Error("ERROR:The table you are trying to verify({listcount(foundCells) } cells) doesn't match parameter dimensions({rows*columns} cells}")
					[ ] return
				[+] if( listcount(expectedCells) != rows*columns)
					[ ] Log.Error("ERROR:The  expected values for the table you are trying to verify doesn't match parameter dimensions    Expected {rows*columns} cells,     InputData: {listCount(expectedCells)} ")
					[ ] return
			[ ] 
			[ ] print()
			[ ] print()
			[ ] print("----------------------------Starting Table Comparison----------------------------------------")
			[ ] print("RELATIVE TOLERANCE:                {tolerance}")
			[ ] 
			[+] if( absTol  == NULL )
				[ ] print("ABSOLUTE TOLERANCE:         UNSPECIFIED")
			[+] else
				[ ] print("ABSOLUTE TOLERANCE:        {absTol}")
			[ ]  print()
			[ ] print()
			[ ] 
			[ ] 
			[ ] i = 0
			[+] for( i =1; i <= listCount(foundCells); i++ )
				[ ] //Check for out of range integers beyond 32 bits. Val function doesn't support long ints.
				[+] do
					[ ] val(expectedCells[i])
				[+] except
					[ ] exceptClear()
					[ ] expectedCells[i] = expectedCells[i] +".0"
					[ ] 
				[+] do
					[ ] val(foundCells[i])
				[+] except
					[ ] exceptClear()
					[ ] foundCells[i] = foundCells[i] +".0"
				[ ] real expectedVal = val(expectedCells[i]) 
				[ ] real foundVal = val(foundCells[i])
				[+] if( expectedVal == 0) // No number present or Number 0
					[+] if( !matchstr(expectedCells[i],foundCells[i]))
						[+] if( absTol != NULL && absTol >= abs(expectedVal -foundVal)  )
							[ ]  Log.Pass(" Row{ ((i-1)/columns)+1}  Column: { (i-1)%columns + 1}     Matched:{expectedCells[i]}       With Found: {foundCells[i]}         Absolute Error: {abs(expectedVal -foundVal) } ")
						[+] else
							[ ] Log.Error(" Row{ ((i-1)/columns)+1}  Column: { (i-1)%columns + 1}     Expected:{expectedCells[i]}       Actual: {foundCells[i]} ")
					[+] else
						[ ] Log.Pass(" Row{ ((i-1)/columns)+1}  Column: { (i-1)%columns + 1}     Found:{expectedCells[i]} ")
				[+] else
					[+] if(  abs( (expectedVal -foundVal )/ expectedVal ) > tolerance)
						[ ] 
						[+] if( absTol != NULL && absTol >= abs(expectedVal -foundVal)  )
							[ ] Log.Pass(" Row{ ((i-1)/columns)+1}  Column: { (i-1)%columns + 1}     Matched: {expectedCells[i]}		  	With Found: {foundCells[i]}	        Relative Error (FAIL):	 { abs( (expectedVal -foundVal )/ expectedVal )*100.0 }%        Absolute Error(PASS): {abs(expectedVal -foundVal)}  ")
						[+] else
							[ ] Log.Error(" Row{ ((i-1)/columns)+1}  Column: { (i-1)%columns + 1}     Expected:{expectedCells[i]}       Actual: {foundCells[i]}           Releative Error (FAIL):	 { abs( (expectedVal -foundVal )/ expectedVal )*100.0 }%        Absolute Error(FAIL): {abs(expectedVal -foundVal)}      ")
					[+] else
						[ ] Log.Pass(" Row{ ((i-1)/columns)+1}  Column: { (i-1)%columns + 1}     Matched: {expectedCells[i]}		  	With Found: {foundCells[i]}	   		Relative Error:	 { abs( (expectedVal -foundVal )/ expectedVal )*100.0 }%              Absolute Error: {abs(expectedVal -foundVal)}")
			[ ] 
			[ ] 
			[ ] //PUT PRECISION BACK TO DEFAULT VALUE
			[ ] setPrecision(0.000001)
			[ ] 
			[ ] 
		[+] void verifyTableIsFull( window dataGrid optional , real percentFilled, real percentNonZero, boolean errorOnEmpty optional,   int ignoreRows optional,  boolean selectAll optional, list of string ignoreColumn optional, int maxBlank optional)
			[ ] //Checks to make sure a certain percentage of the table is filled in and not zero values
			[ ] //If maxBlank is specified, this is used instead of the percentage limits to evaluate
			[ ] //<empty> is counted as a blank cell
			[ ] //Specify errorOnEmpty as TRUE to log an error if a <empty> is found in the table
			[ ] //Ignore Rows -- Specifies the number of rows to ignore off the top of the table. Useful when the headers are included in the table.
			[ ] //ingoreColumns -- Specify a list of columns to ignore
			[ ] 
			[ ] 
			[ ] //SET THE VALUE OF HOW LOW OF NUMBERS TO IGNORE
			[ ] setPrecision(1e-15)
			[ ] 
			[ ] PRINT("------------------------Checking Table for Completion --------------------------------")
			[ ] PRINT("Requirements:")
			[ ] PRINT("Percent Filled: {percentFilled}")
			[ ] PRINT("Percent Non-Zero: {percentNonZero}")
			[+] if( maxBlank != NULL)
				[ ] PRINT("Maximum Blank Cells:  {maxBlank}")
			[ ] PRINT()
			[ ] 
			[ ] int i = 1, j = 1, k = 1
			[ ] string line
			[ ] list of string foundCells
			[ ] list of string expectedCells
			[ ] LONG length
			[ ] LONG lastTab =0
			[+] if( ignoreRows == NULL)
				[ ] ignoreRows = 0
			[ ] 
			[ ] Clipboard.SetText()
			[+] if( APlus.Exists() || APR.Exists())
				[+] if( selectAll == NULL || selectAll != FALSE)
					[+] if( dataGrid == NULL)
						[ ] this.btnSelectAll.Click()
					[+] else
						[ ] dataGrid.typeKeys("<ctrl-a>")
					[ ] sleep(0.25)
				[ ] this.TypeKeys("<ctrl-c>")
				[ ] sleep(1)
				[ ] 
			[+] else
				[+] if( selectAll == NULL || selectAll != FALSE)
					[ ] dataGrid.typeKeys("<ctrl-a>")
				[ ] sleep(0.25)
				[ ] dataGrid.find("//WPFDataGridCell[1]").BringIntoView()
				[ ] dataGrid.find("//WPFDataGridCell[1]").typeKeys("<ctrl-c>")
				[ ] sleep(0.25)
			[ ] 
			[ ] list of string clipboard = Clipboard.GetText()
			[ ] clipboard = divideListByString(clipboard, chr(10))
			[ ] 
			[ ] LONG clipboardLen = listCount(clipboard)
			[ ] LONG columns = 0
			[ ] LONG rows =  listCount(clipboard) - ignoreRows
			[ ] 
			[ ] 
			[+] for( k = 1+ignoreRows; k <=clipboardLen; k++)
				[ ] line = clipboard[k]
				[ ] lastTab = 0
				[ ] length = len(line)
				[ ] long cells = 0
				[ ] long column = 1
				[+] for( i = 1; i <= length; i++)
					[+] if( subStr(line, i, 1) == chr(9))
						[+] if( lastTab < i - 1)
							[ ] listAppend(foundCells, substr(line, lastTab + 1, i - lastTab - 1))
						[+] else
							[ ] listAppend(foundCells, "BLANK")
						[ ] column++
						[ ] lastTab = i
				[+] if(            (    i > 1 && subStr(line, i, 1) == chr(0) && subStr(line, i-1, 1) == chr(9) )      ||     (   subStr(line, i, 1) == chr(9) )       ||   (  i == 1 && subStr(line, i, 1) == chr(0)  )  )
					[ ] listAppend(foundCells, "BLANK")
					[ ] column++
				[+] else
					[ ] listAppend(foundCells, substr(line, lastTab + 1, i - lastTab)) // Add last celll to the list
					[ ] column++
				[ ] 
				[+] if( k == 1+ignoreRows) // Save the number of columns the first time through. Column increments each time one a cell is found so it will be 1 greater than the actual number of columns.
					[ ] columns = column -1
			[ ] 
			[ ] string cell
			[ ] LONG blankCells = 0
			[ ] LONG nonZeroCells = 0
			[ ] LONG cellsChecked = listCount(foundCells)
			[ ] column = 1
			[ ] 
			[ ] //Count the number of Blank, Empty, and Non-Zero cells, ignore the ones in column from the ignore list.
			[+] for each cell in foundCells
				[+] if( column > columns)
					[ ] column = 1
				[+] if( ignoreColumn != NULL && listFind(ignoreColumn, column) != 0)
					[ ] cellsChecked--
					[ ] column++
					[ ] continue
				[+] do
					[ ] val(cell)
				[+] except
					[ ] exceptClear()
					[ ] cell = cell +".0"
				[ ] 
				[+] if( val(cell) != 0  )
					[ ] nonZeroCells++
				[+] else if( cell == "BLANK")
					[ ] blankCells++
				[+] else if(matchstr("*<empty>*", cell) )
						[ ] blankCells++
					[+] if( errorOnEmpty == NULL || errorOnEmpty == FALSE) 
						[ ] Log.Error("{chr(34)}<empty>{chr(34)} cell found in datagrid")
					[ ] 
				[+] else
					[ ] 
				[ ] column++
				[ ] 
			[ ] 
			[+] if( cellsChecked > 0 )
				[ ] 
				[+] if( maxBlank != NULL && maxBlank < blankCells)
					[ ] Log.Error("ERROR:  {blankCells}  of  {cellsChecked} are Blank")
				[+] else if( maxBlank != NULL && maxBlank >= blankCells)
					[ ] Log.Pass("{blankCells}  of  {cellsChecked} are Blank")
					[ ] 
					[ ] real percentFilledFound = ((cellsChecked - blankCells)* 1.0)/ cellsChecked
					[ ] 
					[ ] real percentNonZeroFound = ((cellsChecked - nonZeroCells)* 1.0)/ cellsChecked
					[ ] 
					[+] if(  percentFilledFound < percentFilled )
						[ ] Log.Error("ERROR:   Only {percentFilledFound*100}%  of the Table is Filled.     Required :  {percentFilled*100}%")
					[+] else
						[ ] Log.Pass(" {percentFilledFound*100}%  of the table is filled.     Required :  {percentFilled*100}%")
					[ ] 
					[+] if(  percentNonZeroFound < percentNonZero )
						[ ] Log.Error("ERROR:   Only {percentNonZeroFound*100}%  of the Table is Non-Zero Values.    	 Required :  {percentNonZero*100}%")
					[+] else
						[ ] Log.Pass(" {percentNonZeroFound*100}%  of the table is non-Zero Values.    		 Required :  {percentNonZero*100}%")
			[+] else
				[ ] Log.Warning("-------------------- !!! No Cells to Check !!! --------------------------")
			[ ] 
			[ ] PRINT("-------------------------------------------------------------------------- --------------------------------")
			[ ] 
			[ ] 
			[ ] 
			[ ] 
		[+] string getCell(window cell optional)
			[+] if( cell != NULL)
				[ ] cell.Click()
				[ ] Clipboard.setText()
				[ ] cell.TypeKeys("<ctrl-c>")
			[+] else
				[ ] Clipboard.setText()
				[ ] this.TypeKeys("<ctrl-c>")
				[ ] 
			[ ] return (Clipboard.GetText())[1]
		[+] void SaveGridData(string sFilename, list of string lsColumns optional)
			[ ] //SaveGridData - Save selected columns of DataGrid  to a file
			[ ] //sFilename
			[ ] //If want to verify a single query of EO variables, this method will be helpful
			[ ] //  Arguments:
			[ ] //  1.  sFilename  - string, path to the saved file
			[ ] //  2.  lsColumns  - list of string, default All columns, the columns wanted saved
			[ ] //  Usage:
			[ ] //  - AP.SaveGridDatas("c:\test\rep.txt", {"Stage", "Liquid Flow"}) - Save columns Stage and Liquid Flow to C:\test\rep.txt
			[ ] this.SetActive()
			[ ] sleep(0.5)
			[ ] this.btnSelectAll.Exists(60)
			[ ] this.btnSelectAll.Click(2)
			[ ] sleep(1)
			[ ] 
			[+] if this.Find("//WPFMenuItem[@caption='C_hoose Columns']",{15, false}) != null
				[+] if this.Find("//WPFMenuItem[@caption='C_hoose Columns']").isEnabled
					[ ] this.Find("//WPFMenuItem[@caption='C_hoose Columns']").click()
					[ ] sleep(1)
					[+] if wColumnChooser.Exists(10)
						[ ] wColumnChooser.SelectColumns(lsColumns)
					[+] else
						[ ] wFieldChooser.SelectColumns(lsColumns)
					[ ] sleep(1)
			[ ] this.SetActive()
			[ ] Clipboard.SetText({})
			[ ] 
			[ ] this.btnSelectAll.Click(1)
			[ ] this.btnSelectAll.TypeKeys("<Ctrl-a 3>", 0.5)
			[ ] this.btnSelectAll.Click(2)
			[ ] this.Find("//WPFMenuItem[@caption='_Copy']").Click()
			[ ] sleep(10)
			[ ] // string sRow=""
			[ ] // string sChar = ""
			[ ] // sRow = lsvars[1]
			[ ] // lsvars[1]=SubStr(lsvars[1], 7)//the first row is column name like :"Index	 Variable	Value	Units	Specification", Remove the name "Index"
			[ ] // 
			[+] // for(i=2; i<=ListCount(lsvars); i++)
				[ ] // 
				[ ] // sRow = lsvars[i]
				[ ] // 
				[+] // for(j=1; j<=Len(sRow); j++)
					[ ] //  sChar = sRow[j]
					[+] // if ( Str.IsNumber(sChar) || Asc(sChar) == 9  || Asc(sChar) == 32)
						[ ] // continue
					[ ] // lsvars[i] = SubStr(lsvars[i], j)
					[ ] // break
			[ ] // 
			[ ] // Clipboard.SetText(lsvars)
			[ ] Sys_execute('del /f /q "{sFilename}"')
			[ ] SYS_ListWrite (Clipboard.GetText(), sFilename)
			[ ] 
			[+] // do
				[ ] // glwNotepad.Invoke()
				[ ] // glwNotepad.SetActive()
				[ ] // glwNotepad.mnuEdit.miPaste.Pick()
				[ ] // glwNotepad.SaveFile("{sFilename}")
				[ ] // glwNotepad.Exit()
			[+] // except
				[ ] // glwNotepad.Invoke()
				[ ] // glwNotepad.SetActive()
				[ ] // glwNotepad.mnuEdit.miPaste.Pick()
				[ ] // glwNotepad.SaveFile("{sFilename}")
				[ ] // glwNotepad.Exit()
				[ ] 
			[ ] 
			[ ] this.SetActive()
		[ ] 
		[ ] //void verifyTableRow
		[ ] //void verifyTableColumn
		[ ] //void VerifyValuesInTable
		[ ] 
		[ ] 
		[ ] //EO Variables
		[+] string GoToCellInEOVar(int row, int column, window datagrid, string variableName, string str optional)
			[ ] // GoToCellInEOVar ( row, column, datagrid, str) - move focus to the specific row and column in datagrid, if str is not null, will set the cell value as str.
			[ ] //  Usage:
			[ ] //  - AP.GoToCellInEOVar(3,4,datagrid,"BLK.SPEC3O_PRES") or AP.GoToCell(3,4,datagrid,"BLK.SPEC3O_PRES","Constant")
			[ ] //print("{row} {column} {datagrid}  {variableName} {str}")
			[ ] 
			[ ] datagrid.SetFocus()
			[ ] list of string lststrValue
			[ ] this.TypeKeys("<Ctrl-Home>")
			[ ] this.TypeKeys("<Down {row-1}>")
			[ ] sleep(1)
			[ ] this.TypeKeys("<Right {column-1}>")
			[ ] sleep(1)
			[+]  if (str != null)
				[+] list of STRING lststr = {...}
					[ ] str
				[ ] Clipboard.SetText(lststr)
				[ ] this.TypeKeys("<Ctrl-V>")
				[ ] Clipboard.SetText()
				[ ] //datagrid.TypeKeys("<Ctrl-C>")
				[ ] this.TypeKeys("<Ctrl-C>")
				[ ] lststrValue = Clipboard.GetText()
				[+] if(str == lststrValue[1])
					[ ] Log.Pass("Value modifies to {str} Pass.")
				[+] else
					[ ] Log.Error("Value modifies to {str} Fail, actually to {lststrValue[1]}.")
				[ ] datagrid.TypeKeys("<Enter>")
				[ ] return lststrValue[1]
			[+] else
				[ ] Clipboard.SetText()
				[ ] datagrid.TypeKeys("<Ctrl-C>")
				[ ] lststrValue = Clipboard.GetText()
				[ ] return lststrValue[1]
				[ ] 
		[+] string GoToCellInEOVarInverted(int row, int column, window datagrid, string variableName, string str optional)
			[ ] // GoToCellInEOVar ( row, column, datagrid, str) - move focus to the specific row and column inverted in datagrid, if str is not null, will set the cell value as str.
			[ ] //  Usage:
			[ ] //  - AP.GoToCellInEOVar(3,4,datagrid,"BLK.SPEC3O_PRES") or AP.GoToCell(3,4,datagrid,"BLK.SPEC3O_PRES","Constant")
			[ ] //print("{row} {column} {datagrid}  {variableName} {str}")
			[ ] 
			[ ] datagrid.SetFocus()
			[ ] list of string lststrValue
			[ ] this.TypeKeys("<Ctrl-End>")
			[ ] this.TypeKeys("<Up {row-1}>")
			[ ] sleep(1)
			[ ] this.TypeKeys("<Left {column-1}>")
			[ ] sleep(1)
			[+]  if (str != null)
				[+] list of STRING lststr = {...}
					[ ] str
				[ ] Clipboard.SetText(lststr)
				[ ] this.TypeKeys("<Ctrl-V>")
				[ ] Clipboard.SetText()
				[ ] datagrid.TypeKeys("<Ctrl-C>")
				[ ] lststrValue = Clipboard.GetText()
				[+] if(str == lststrValue[1])
					[ ] Log.Pass("Value modifies to {str} Pass.")
				[+] else
					[ ] Log.Error("Value modifies to {str} Fail, actually to {lststrValue[1]}.")
				[ ] datagrid.TypeKeys("<Enter>")
				[ ] return lststrValue[1]
			[+] else
				[ ] Clipboard.SetText()
				[ ] datagrid.TypeKeys("<Ctrl-C>")
				[ ] lststrValue = Clipboard.GetText()
				[ ] return lststrValue[1]
				[ ] 
			[ ] 
		[+] string GoToCellInEOVarGetValue(int row, int column, window datagrid)
			[ ] // GoToCellInEOVar ( row, column, datagrid, str) - move focus to the specific row and column in datagrid, if str is not null, will set the cell value as str.
			[ ] //  Usage:
			[ ] //  - AP.GoToCellInEOVar(3,4,datagrid,"BLK.SPEC3O_PRES") or AP.GoToCell(3,4,datagrid,"BLK.SPEC3O_PRES","Constant")
			[ ] //print("{row} {column} {datagrid}  {variableName} {str}")
			[ ] 
			[ ] datagrid.SetFocus()
			[ ] list of string lststrValue
			[ ] this.TypeKeys("<Ctrl-Home>")
			[ ] this.TypeKeys("<Down {row-1}>")
			[ ] sleep(1)
			[ ] this.TypeKeys("<Right {column-1}>")
			[ ] sleep(1)
			[ ] 
			[ ] this.TypeKeys("<Ctrl-c>")
			[ ] LIST OF STRING lsListText = Clipboard.GetText()
			[ ] return lsListText[1]
			[ ] 
		[+] string GetCellValue(int row, int coloumn)
			[ ] this.ctrlGridControl.SetFocus()
			[ ] this.gridcellFirst.Click()
			[ ] int i
			[+] for i=1 to row-1 step 1
				[ ] this.TypeKeys("<Down>")
				[ ] sleep(0.5)
			[+] for i=1 to coloumn-1 step 1
				[ ] this.TypeKeys("<Right>")
				[ ] sleep(0.5)
			[ ] Clipboard.SetText()
			[ ] this.TypeKeys("<Ctrl-C> 5")
			[ ] list lstStr = Clipboard.GetText()
			[ ] return lstStr[1]
		[+] list of anytype getEOVarInfo( list of string findVariables, string infoType, boolean goToMainForm optional, list of anytype expectedValues optional, real tolerance optional, boolean skipFind optional )
			[ ] //Specify a list of variable to isolate using the Query method
			[ ] //Specify the type of information to return about these variables with InfoType
			[ ] //Will compare EO variable attribute with a list of accepted values --------"desiredData"
			[ ] //If Numerical Comparison will use "tolerance" for relative comparisons if desired value is not equal to 0.
			[ ] //skipFind --- For multiple comparisons, set to TRUE to avoid refinding the variables
			[ ] //A Trevor Merrill Function, Please Notify if any changes are made.
			[+] if( goToMainForm == NULL)
				[ ] goToMainForm = FALSE
			[+] if( goToMainForm )
				[ ] APlus.trvPartTree.Expand("EO Configuration/EO Variables")
				[ ] APlus.trvPartTree.Click("EO Configuration/EO input") //To Reset query variables from previous time
				[ ] sleep(1)
				[ ] APlus.trvPartTree.Click("EO Configuration/EO Variables")
			[ ] sleep(2)
			[ ] integer numVar = listcount(findVariables)
			[ ] integer i
			[ ] infoType = lower(infoType)
			[+] if( skipFind == NULL )
				[ ] skipFind = FALSE
			[ ] 
			[+] if(!skipFind)
				[ ] APlus.tabiDefault.Exists(5)
				[ ] APlus.tabiDefault.click(2)
				[ ] APlus.miEnterQuery.exists(5)
				[ ] APlus.miEnterQuery.Click()
				[ ] wEnterQuery.Exists(5)
				[ ] wEnterQuery.setActive()
				[ ] 
				[ ] 
				[ ] 
				[ ] wEnterQuery.txtMainTextBox.SetText("")
				[ ] wEnterQuery.txtMainTextBox.Clear()
				[ ] sleep(2)
				[+] for (i = 1; i <= numVar ; i ++)
					[ ] wEnterQuery.txtValue.SetText(findVariables[i])
					[ ] wEnterQuery.rdMatchVariablesInObjectiveFunction.Select()
					[ ] wEnterQuery.rdChooseCondition.Select()
					[ ] wEnterQuery.btnAddCondition.Click()
					[+] if( i < numVar)
						[ ] sleep(0.5)
						[ ] wEnterQuery.btnOr.Click()
						[ ] sleep(0.5)
						[ ] 
				[ ] 
				[ ] wEnterQuery.btnOK.Click()
			[ ] sleep(2)
			[ ] 
			[+] if(infoType == "value")
				[ ] this.find("//WPFDataGridCell[@className='GridControlCell'][3]").click() 
			[+] else if(infoType == "units")
				[ ] this.find("//WPFDataGridCell[@className='GridControlCell'][4]").click() 
			[+] else if(infoType == "physical type")
				[ ] this.find("//WPFDataGridCell[@className='GridControlCell'][5]").click() 
			[+] else if(infoType == "specification")
				[ ] this.find("//WPFDataGridCell[@className='GridControlCell'][7]").click() 
			[+] else
					[ ] Log.Error("Function getEOVarInfo   type {chr(34)}{infoType}{chr(34)}     not yet implemented")
					[ ] return NULL
			[ ] 
			[ ] list of string clipboardlist
			[ ] list of string sValues
			[ ] //Insert Place Holder in case of blank cells
			[+] for (i = 1; i <= numVar ; i ++) 
				[ ] ListAppend(sValues, "0")
			[ ] 
			[+] for (i = 1; i <= numVar ; i ++)
				[ ] Clipboard.SetText()
				[ ] APlus.TypeKeys("<Ctrl-c>")
				[ ] clipboardlist= Clipboard.GetText() 
				[ ] sValues[i] = clipboardlist[1]
				[ ] APlus.TypeKeys("<Down>")
			[ ] 
			[+] if( infoType == "value")
				[ ] list of real rValues
				[+] for (i = 1; i <= numVar ; i ++)
					[ ] ListAppend(rValues, val(sValues[i]))
			[ ] 
			[ ] 
			[+] if( expectedValues != NULL )
				[+] if( listCount(expectedValues) != listCount(findVariables) )
					[ ] Log.Error(" ERROR in getEOVarInfo ---> ReferenceList of accepted values and findVariables list is not the same length------>Cannot compare")
				[+] if( tolerance == NULL )
					[ ] tolerance = 0.01  // 0.01%
				[ ] 
				[+] if( infoType == "value" )
					[ ] 
					[+] for( i = 1; i < listcount(expectedValues); i++)
						[+]  if( expectedValues[i] == 0)
							[+] if( expectedValues[i] != rValues[i])
								[ ] Log.Error("************getEOVarInfo comparision: Variable: {findVariables[i]}   Got: {rValues[i]}  Expected: 0   **********************")
						[+] else
							[ ] real error =( rValues[i] - expectedValues[i]) /  expectedValues[i]
							[+] if( error > tolerance )
								[ ] Log.Error("************getEOVarInfo comparision: Variable: {findVariables[i]}    Got: {rValues[i]}  Expected: {expectedValues[i]}   Percent Error: {error * 100}% **********************")
					[ ] 
				[+] else //if( infoType =="units" || infoType == "physical type" || nfoType == "specification")
					[+] for( i = 1; i < listcount(expectedValues); i++)
						[+] if(!(matchstr(sValues[i], expectedValues[i])))
							[ ] Log.Error("************getEOVarInfo comparision:  Variable: {findVariables[i]}  Field: {infoType}    Got: {sValues[i]}  Expected: {expectedValues[i]} **************")
			[ ] 
			[ ] 
			[ ] 
			[ ] 
			[+] if( infoType == "value")
				[ ] return rValues
			[+] else
				[ ] return sValues
			[ ] 
			[ ] 
			[ ] 
			[ ] 
			[ ] 
			[ ] 
		[+] void setEOVarInfo( list of string findVariables, list of string newValues,  string infoType, boolean goToMainForm optional )
			[ ] //Specify a list of variable to isolate using the Query method
			[ ] //Specify the type of information to return about these variables with InfoType
			[+] //A Trevor Merrill Function, Please Notify if any changes are made.
				[ ] 
			[+] if( goToMainForm == NULL)
				[ ] goToMainForm = FALSE
			[+] if( goToMainForm )
				[ ] APlus.trvPartTree.Expand("EO Configuration/EO Variables")
				[ ] APlus.trvPartTree.Click("EO Configuration/EO input") //To Reset query variables from previous time
				[ ] sleep(1)
				[ ] APlus.trvPartTree.Click("EO Configuration/EO Variables")
			[ ] sleep(2)
			[ ] APlus.tabiDefault.click(2)
			[ ] APlus.miEnterQuery.exists(5)
			[ ] APlus.miEnterQuery.Click()
			[ ] wEnterQuery.Exists(5)
			[ ] wEnterQuery.setActive()
			[ ] 
			[ ] infoType = lower(infoType)
			[ ] 
			[ ] integer numVar = listcount(findVariables)
			[ ] integer i
			[ ] wEnterQuery.txtMainTextBox.SetText("")
			[ ] wEnterQuery.txtMainTextBox.Clear()
			[ ] sleep(1)
			[+] for (i = 1; i <= numVar ; i ++)
				[ ] wEnterQuery.txtValue.SetText(findVariables[i])
				[ ] wEnterQuery.rdMatchVariablesInObjectiveFunction.Select()
				[ ] wEnterQuery.rdChooseCondition.Select()
				[ ] wEnterQuery.btnAddCondition.Click()
				[+] if( i < numVar)
					[ ] sleep(0.5)
					[ ] wEnterQuery.btnOr.Click()
					[ ] sleep(0.5)
			[ ] 
			[ ] wEnterQuery.btnOK.Click()
			[+] sleep(2)
				[ ] 
			[+] if(infoType == "value")
				[ ] this.find("//WPFDataGridCell[@className='GridControlCell'][3]").click() 
			[+] else if(infoType == "units")
				[ ] this.find("//WPFDataGridCell[@className='GridControlCell'][4]").click() 
			[+] else if(infoType == "physical type")
				[ ] this.find("//WPFDataGridCell[@className='GridControlCell'][5]").click() 
			[+] else if(infoType == "specification")
				[ ] this.find("//WPFDataGridCell[@className='GridControlCell'][7]").click() 
			[+] else
					[ ] Log.Error("Function getEOVarInfo   type {chr(34)}{infoType}{chr(34)}     not yet implemented")
					[ ] return
				[ ] 
			[+] for (i = 1; i <= numVar ; i ++)
				[ ] this.TypeKeys(newValues[i])
				[ ] this.TypeKeys("<Enter>")
				[ ] 
			[ ] // ADD other categories later
			[ ] 
			[ ] 
			[ ] 
		[+] void exportEOVariables( string fileName, list of string options optional)
			[ ] //Select Variable Options to export, "ALL" will select all options
			[ ] //"FINISH will click finish button on first page when placed as first string in list
			[ ] //USE List Fromat:
			[+] //list of string options ={...}
				[ ] //Check option1
				[ ] //Uncheck option2
				[ ] //...
			[ ] 
			[+] if( !this.miExport.Exists())
				[ ] this.mnuFile.Click()
			[ ] this.miExport.Exists(5)
			[ ] this.miExport.Click()
			[ ] this.miEOVariables.exists(5)
			[ ] this.miEOVariables.Click()
			[ ] 
			[ ] wSelectFileToBeExported.Exists(5)
			[ ] wSelectFileToBeExported.SetActive()
			[+] if( matchStr("*.x", fileName) )
				[ ] wSelectFileToBeExported.rdlXVector.Click()
			[+] else
				[ ] wSelectFileToBeExported.rdlVariablesFileAscii.Click()
			[ ] sleep(1)
			[ ] wSelectFileToBeExported.btnBrowse.click()
			[ ] dlgSaveAs.SetActive()
			[ ] dlgSaveAs.cboSaveAsFileName.setText(fileName)
			[ ] dlgSaveAs.btnSave.SetFocus()
			[ ] dlgSaveAs.btnSave.click()
			[ ] sleep(1)
			[+] if( wAspenPlus.Exists(1))
				[ ] wAspenPlus.btnOK.Click()
				[ ] sleep(0.5)
			[+] if(wAspenProperties.Exists())
				[ ] wAspenProperties.BtnOK.Click()
				[ ] sleep(0.5)
			[ ] 
			[+] if( options != NULL && options[1] == "FINISH")
				[ ] wSelectFileToBeExported.BtnFinish.Click()
				[+] if( wAspenPlus.Exists(0.5))
					[ ] wAspenPlus.btnOK.Click()
				[+] if(wAspenProperties.Exists())
					[ ] wAspenProperties.BtnOK.Click()
				[ ] sleep(1)
				[ ] this.mnuFile.Click()
				[ ] return
			[+] else
				[ ] wSelectFileToBeExported.BtnNext.Click()
				[ ] sleep(0.5)
				[+] if( wAspenPlus.Exists(0.5))
					[ ] wAspenPlus.btnOK.Click()
				[+] if(wAspenProperties.Exists())
					[ ] wAspenProperties.BtnOK.Click()
				[ ] sleep(0.5)
			[ ] 
			[ ] string option
			[+] if( options == NULL)
				[ ] Print("Default Options")
			[+] else if( listCount(options) > 0 && matchStr("ALL", options[1]) )
				[ ] wSelectVariableAttributesToExport.CheckAllCheckBoxesFaster()
			[+] else
				[+] for each option in options
					[ ] string sOptionName=getField(option," ",2)
					[+] if( matchStr("Check*", option) )
						[+] if( !wSelectVariableAttributesToExport.find("//WPFCheckBox[@automationId='{sOptionName}']").IsChecked)
							[ ] wSelectVariableAttributesToExport.find("//WPFCheckBox[@automationId='{sOptionName}']").Click()
							[ ] sleep(0.5)
					[+] else if( matchStr("Uncheck*", option) )
						[+] if( wSelectVariableAttributesToExport.find("//WPFCheckBox[@automationId='{sOptionName}']").IsChecked)
							[ ] wSelectVariableAttributesToExport.find("//WPFCheckBox[@automationId='{sOptionName}']").Click()
							[ ] sleep(0.5)
					[+] else
						[ ] Log.Error("Unrecognized Command {sOptionName}          from options list line         {option} ")
			[ ] 
			[ ] wSelectVariableAttributesToExport.BtnFinish.Click()
			[ ] sleep(1)
			[ ] 
			[ ] this.mnuFile.Click()
			[ ] 
		[+] void CopyEOVariables(string sDir)
			[ ] //Choose EO Variables with  expected Columns( Variable    Value	Units	Specification)
			[ ] //Then copy to notepad and save as txt file.
			[ ] //If want to verify a single query of EO variables, this method will be helpful
			[ ] 
			[ ] this.SetActive()
			[ ] sleep(0.5)
			[ ] this.btnSelectAll.Click(2)
			[ ] sleep(1)
			[ ] this.Find("//WPFMenuItem[@caption='C_hoose Columns']").click()
			[ ] sleep(1)
			[ ] wColumnChooser.SetActive()
			[ ] wColumnChooser.chkSelectUnselectAll.Check()//select all
			[ ] wColumnChooser.chkSelectUnselectAll.Uncheck()//Unselect all
			[ ] wColumnChooser.chkValue.Check()
			[ ] wColumnChooser.chkUnits.Check()
			[ ] wColumnChooser.chkSpecification.Check()
			[ ] wColumnChooser.btnOK.Click()
			[ ] sleep(1)
			[ ] this.SetActive()
			[ ] Clipboard.SetText({})
			[ ] 
			[ ] this.btnSelectAll.Click()
			[ ] //Remove Column Index, because it is changeable
			[ ] this.TypeKeys("<Ctrl-C>",0.2)
			[ ] sleep(3)
			[ ] list of string  lsvars= Clipboard.GetText()
			[+] if lsvars == {""}
				[ ] this.btnSelectAll.Click()
				[ ] this.TypeKeys("<Ctrl-c>",0.2)
				[ ] lsvars= Clipboard.GetText()
			[ ] integer i
			[ ] integer j
			[ ] string sRow=""
			[ ] string sChar = ""
			[ ] sRow = lsvars[1]
			[ ] lsvars[1]=SubStr(lsvars[1], 7)//the first row is column name like :"Index	 Variable	Value	Units	Specification", Remove the name "Index"
			[ ] 
			[+] for(i=2; i<=ListCount(lsvars); i++)
				[ ] 
				[ ] sRow = lsvars[i]
				[ ] 
				[+] for(j=1; j<=Len(sRow); j++)
					[ ]  sChar = sRow[j]
					[+] if ( Str.IsNumber(sChar) || Asc(sChar) == 9  || Asc(sChar) == 32)
						[ ] continue
					[ ] lsvars[i] = SubStr(lsvars[i], j)
					[ ] break
			[ ] 
			[ ] Clipboard.SetText(lsvars)
			[ ] 
			[+] do
				[ ] glwNotepad.Invoke()
				[ ] glwNotepad.SetActive()
				[ ] glwNotepad.mnuEdit.miPaste.Pick()
				[ ] glwNotepad.SaveFile("{sDir}")
				[ ] glwNotepad.Exit()
			[+] except
				[ ] glwNotepad.Invoke()
				[ ] glwNotepad.SetActive()
				[ ] glwNotepad.mnuEdit.miPaste.Pick()
				[ ] glwNotepad.SaveFile("{sDir}")
				[ ] glwNotepad.Exit()
				[ ] 
			[ ] 
			[ ] this.SetActive()
		[+] void ImportEOVariables(string sDir,string sBlock optional, list of string lsoptionSet optional)
			[ ] //sDir is the file to be imported, can be *.var or *.x file
			[ ] //sBlock  select block in wSelectScopeToImportVariable, if it is null means select the top most one
			[ ] //lsoptionSet Select Variable Options to Import, "ALL" will select all options
			[+] //list of string options ={...}
				[ ] //Check Value
				[ ] //Uncheck Unit
				[ ] //...
			[ ] 
			[ ] this.SetActive()
			[ ] this.trvPartTree.Expand("Blocks/{sBlock}")
			[ ] sleep(5)
			[ ] this.Find("//WPFTreeViewItem[@caption='{sBlock}']").Click(2)
			[ ] sleep(2)
			[ ] this.Find("//WPFMenuItem[@caption='I_mport EO Variables...']").Click()
			[ ] // this.mnuFile.Click()
			[ ] // sleep(0.5)
			[ ] // this.miImport.SetFocus()
			[ ] // this.miImport.OpenSubmenu()
			[ ] // this.miExportEOVariables.Click()
			[ ] 
			[ ] wSelectFileToBeImported.Exists(3)
			[ ] wSelectFileToBeImported.SetActive()
			[+] if( matchStr("*.x", sDir) )
				[ ] wSelectFileToBeImported.rdlAspenPlusXVectorFileBinary.Select()
			[+] else
				[ ] wSelectFileToBeImported.rdlAspenPlusVariablesFileASCII.Select()
			[ ] wSelectFileToBeImported.btnBrowse.Click()
			[ ] dlgOpen.SetActive()
			[ ] dlgOpen.txtFileName.SetText(sDir)
			[ ] dlgOpen.btnOpen.Click()
			[ ] 
			[ ] wSelectFileToBeImported.BtnNext.Click()
			[ ] wSelectScopeToImportVariable.Exists(3)
			[ ] wSelectScopeToImportVariable.SetActive()
			[+] if  sBlock == null
				[ ] wSelectScopeToImportVariable.Find("//WPFTreeViewItem[@caption='{sDir}']").Click()
			[+] else
				[ ] wSelectScopeToImportVariable.Find("//WPFTreeViewItem[@caption='{sDir}']").Expand()
				[ ] sleep(0.5)
				[ ] wSelectScopeToImportVariable.Find("//WPFTreeViewItem[@caption='{sBlock}']").Click()
			[ ] 
			[ ] wSelectScopeToImportVariable.BtnNext.Click()
			[ ] 
			[+] if( lsoptionSet == NULL )
				[ ] wSelectVariableAttributesToImport.SetActive()
				[ ] wSelectVariableAttributesToImport.BtnFinish.Click()
				[ ] return
			[ ] string option
			[+] if( listCount(lsoptionSet) > 0 && matchStr("ALL", lsoptionSet[1]) )
				[ ] wSelectVariableAttributesToImport.CheckAllCheckBoxesFaster()
			[+] else
				[+] for each option in lsoptionSet
					[ ] string sOptionName=getField(option," ",2)
					[+] if( matchStr("Check*", option) )
						[+] if( !wSelectVariableAttributesToImport.find("//WPFCheckBox[@automationId='{sOptionName}']").IsChecked)
							[ ] wSelectVariableAttributesToImport.find("//WPFCheckBox[@automationId='{sOptionName}']").Click()
							[ ] sleep(0.5)
					[+] else if( matchStr("Uncheck*", option) )
						[+] if( wSelectVariableAttributesToImport.find("//WPFCheckBox[@automationId='{sOptionName}']").IsChecked)
							[ ] wSelectVariableAttributesToImport.find("//WPFCheckBox[@automationId='{sOptionName}']").Click()
							[ ] sleep(0.5)
					[+] else
						[ ] Log.Error("Unrecognized Command {sOptionName}          from options list line         {option} ")
			[ ] 
			[ ] wSelectVariableAttributesToImport.BtnFinish.Click()
		[ ] 
		[ ] //Save and Exit
		[+] void Exit()
			[ ] this.SetActive()
			[ ] this.TypeKeys("<Alt-F4>")
			[ ] sleep(5)
			[+] if(dlgAspenPlus.Exists())
				[ ] dlgAspenPlus.SetActive()
				[+] do
					[ ] dlgAspenPlus.BtnNo.Click()
				[ ] except
			[+] if(wAspenProperties.Exists())
				[ ] wAspenProperties.SetActive()
				[+] do
					[ ] wAspenProperties.BtnNo.Click()
				[ ] except
			[ ] sleep(3)
		[+] void ExitAPR()
			[ ] APR.SetActive()
			[ ] APR.TypeKeys("<Alt-F4>")
			[+] if(wAspenProperties.Exists())
				[ ] wAspenProperties.SetActive()
				[ ] wAspenProperties.BtnNo.Click()
			[ ] sleep(3)
		[+] void SaveExit()// for existing file
			[ ] //Save
			[ ] this.mnuFile.Click()
			[ ] sleep(0.5)
			[ ] this.miSave.Click()
			[ ] sleep(0.5)
			[+] if(dlgAspenPlus.Exists())
				[ ] dlgAspenPlus.SetActive()
				[ ] dlgAspenPlus.BtnNo.Click()
			[ ] this.SetActive()
			[ ] this.TypeKeys("<Alt-F4>")
			[ ] sleep(1)
		[+] SaveAs (string sFileName)
			[ ] //Changing over to SaveAsFaster call for the V8.4 File Menu update.
			[ ] //If Anyone disagrees, feel free to change back of modify, I just wanted to update so it was working if someone ran the suite
			[ ] //                                  -Trevor
			[ ] 
			[ ] this.SaveAsFaster(sFileName)
			[ ] 
			[ ] //  //Saves the case to a file
			[ ] // //   Arguments
			[ ] // //   1.  fileName , string, name of case file - full path or relative to current directory
			[ ] // //   extension determines type of file to save
			[+] // if sys_FileExists(sFileName)
				[ ] // Sys_Execute('del /f /q "{sFileName}"')
			[ ] // string sExtenison = glGetReverseField(sFileName, ".", 1)
			[ ] // string sBaseFileName = SubStr(sFileName,1, len(sFileName) - len(sExtenison)-1)
			[ ] // this.SetActive()
			[ ] // this.mnuFile.Click()
			[ ] // sleep(5)
			[ ] // this.miSaveAs.Click()
			[ ] // sleep(10)
			[+] // // if(!wAspenPlusMainwin.dlgSaveAsFile.Exists())
				[ ] // // this.miSaveAs.Click()
				[ ] // // sleep(5)
			[ ] // AspenPlusClassicWin.dlgSaveAsFile.SetActive()
			[ ] // AspenPlusClassicWin.dlgSaveAsFile.SaveFile(sBaseFileName,"*.{Lower (sExtenison)})")
			[+] // if wAspenPlusSaveWarning.Exists(5)
				[ ] // wAspenPlusSaveWarning.SetActive()
				[ ] // // wAspenPlusSaveLoseDataWarning.btnOK.Click()
				[ ] // wAspenPlusSaveWarning.btnNo.Click()
			[ ] // glWaitForMouseIdle(60)
			[ ] // Log.Pass("Save file {sBaseFileName} as {Upper(sExtenison)} successfully!!!")
			[ ] // this.SetActive()
		[+] real SaveAsFaster (string sFileName) 
			[ ] //Saves the case to a file
			[ ] //   Arguments
			[ ] //   1.  fileName , string, name of case file - full path or relative to current directory
			[ ] //   extension determines type of file to save
			[ ] //Works for Aspen Properties/Plus
			[ ] HTIMER hTime=TimerCreate("Timer_SaveAs")
			[ ] string sExtension = glGetReverseField(sFileName, ".", 1)
			[ ] string sBaseFileName = SubStr(sFileName,1, len(sFileName) - len(sExtension)-1)
			[ ] this.SetActive()
			[+] if this.mnuFile.Exists()
				[ ] this.mnuFile.Click()
			[+] else
				[ ] this.mnuFile_APR.Click()
			[+] if APlus.miSaveAs.Exists(5)
				[ ] sleep(2)
				[ ] APlus.miSaveAs.OpenContextMenu()
				[ ] APlus.miSaveAs.Click()
				[ ] this.miCompoundFile.exists(5)
				[ ] print(lower(sExtension))
				[+] switch( lower(sExtension)  )
					[+] case "apwz", "apropz"
							[ ] this.miCompoundFile.Click()
					[+] case "aprop"
						[ ] APR.miAspenPropertiesDocument.Click()
					[+] case "apw"
						[ ] APlus.miAspenPlusDocument.Click()
					[+] case "bkp"
						[ ] APlus.miAspenPlusBackup.Click()
					[+] case "aprbkp"
						[ ] APR.miAspenPropertiesBackup.Click()
					[+] case "aprt", "apt"
							[ ] this.miTemplate.Click()
					[+] default
						[ ] Log.Error("File Type {sExtension} is not recognized by Aspen Plus or Aspen Properties")
			[+] else
				[ ] this.miSaveAs_APR.Exists(5)
				[+] this.miSaveAs_APR.Click()
					[ ] 
				[ ] 
			[ ] 
			[+] if( !dlgSaveAs.Exists(20))
				[ ] Log.Error("Error: Save As Window Failed to Appear")
			[+] else
				[ ] sleep(0.25)
				[ ] dlgSaveAs.txtFileName.TypeKeys(sFileName)
				[ ] sleep(0.1)
				[ ] dlgSaveAs.cboSaveAsType.Select("*{lower(sExtension)})*")
				[ ] sleep(0.2)
				[ ] TimerStart(hTime)
				[ ] dlgSaveAs.btnSave.Click()
				[+] if( dlgConfirmSaveAs.Exists(1))
					[ ] dlgConfirmSaveAs.btnYes.Click()
				[ ] 
			[ ] 
			[ ] 
			[+] 
				[ ] 
			[ ] dlgSaveAs.WaitForDisappearance(30)
			[ ] sleep(0.3)
			[ ] TimerStop(hTime)
			[ ] 
			[+] if (APlus.Exists()  )
					[+] if( wAspenPlusSaveWarning.Exists(1.5) )
						[ ] wAspenPlusSaveWarning.SetActive()
						[+] if( wAspenPlusSaveWarning.btnNo.Exists() )
							[ ] wAspenPlusSaveWarning.btnNo.Click()
						[+] else if( wAspenPlusSaveWarning.btnOK.Exists() )
							[ ] wAspenPlusSaveWarning.btnOK.Click()
						[+] else
							[ ] Log.Warning("Can't Find Correct Button")
					[+] if wAspenProperties.Exists(1.5)
						[ ] sleep(0.8)
						[ ] wAspenProperties.BtnNo.Click()
			[+] else
					[+] if( wAspenProperties.Exists(1.5) )
						[ ] wAspenProperties.SetActive()
						[+] if(wAspenProperties.BtnNo.Exists() )
							[ ] wAspenProperties.BtnNo.Click()
						[+] if(wAspenProperties.BtnOK.Exists())
							[ ] wAspenProperties.BtnOK.click()
						[+] else
							[ ] Log.Warning("Can't Find Correct Button")
						[ ] 
			[ ] sleep(1)
			[ ] Log.Pass("Save file {sBaseFileName} as {Upper(sExtension)} successfully!!!")
			[ ] 
			[+] if( this.miSaveAs.Exists())
				[ ] this.mnuFile.Click()
			[ ] return TimerValue(hTime)
		[+] 
			[+] void SavePrintFile(string sFileName)
				[+] //---------------------Log---------------------//
					[ ] // Info			:	Print the current table, chart, or PFS as electric XPS(*.xps) materia.
					[ ] //					sFileName is the full path of the file name
					[ ] // Author		:	Eric Lu
					[ ] // Date			:	December 07, 2011	
				[ ] 
				[ ] this.mnuFile.Click()
				[ ] this.miPrint.Exists(60)
				[ ] sleep(1)
				[ ] this.miPrint.Click()
				[ ] dlgPrint.Exists(60)
				[ ] sleep(1)
				[ ] dlgPrint.SetActive()
				[ ] sleep(1)
				[+] if(dlgPrint.lstv.Exists())
					[ ] dlgPrint.lstv.Select("*XPS*")
					[ ] dlgPrint.btnPrint.Click()
				[+] else
					[ ] dlgPrint.cboName.Click()
					[ ] dlgPrint.cboName.Select("*XPS*")
					[ ] dlgPrint.btnOK.Click()
				[ ] glWaitForMouseIdle(15)
				[ ] dlgSavePrintFile.SetActive()
				[ ] dlgSavePrintFile.cboSetName.SetText("{sFileName}")
				[ ] dlgSavePrintFile.btnSave.SetFocus()
				[ ] dlgSavePrintFile.btnSave.Click()
				[+] if(dlgConfirmSaveAs.Exists(5))
					[ ] dlgConfirmSaveAs.SetActive()
					[ ] dlgConfirmSaveAs.btnYes.Click()
		[ ] 
		[ ] // Flowsheet
		[+] void FindAndSelectObject(string strHierarchy, string strBlockName, string strStreamName optional)
			[ ] // FindAndSelectObject ( strBlockName, strStreamName optional )  - set focus on PFS for Block[/Stream]
			[ ] //   Arguments
			[ ] //   1.  strBlockName , string, name of Block
			[ ] //   2.  strStreamName, string, name of Stream, optional argument.
			[ ] //   Usage:  APlus.FindAndSelectObject('B1')
			[ ] 
			[+] if (this.tbMainFlowsheet.Exists())
				[ ] Log.Message("The tab page 'Main Flowsheet exist.'")
				[ ] this.tbMainFlowsheet.Click()
				[ ] sleep(3)
			[+] else
				[ ] Log.Message("Switch to Simulation page.'")
				[ ] this.hccSimulation.Click()
				[ ] glWaitForMouseIdle(15)
				[ ] this.tbMainFlowsheet.Click()
			[ ] RECT rect = this.areaForMainFlowsheet.GetRect()
			[ ] this.areaForMainFlowsheet.Click(1, (rect.xPos+rect.xSize)/20, (rect.yPos+rect.ySize)/20)
			[ ] this.areaForMainFlowsheet.TypeKeys("<Application>")
			[ ] // Invoke context menu to select "Find Object"
			[+] if(contextMenuBox.Exists(5))
				[ ] Log.Message("Invoke Find Object dialog.'")
				[ ] contextMenuBox.TypeKeys("<Up>")
				[ ] sleep(1)
				[ ] contextMenuBox.TypeKeys("<Enter>")
			[+] else
				[ ] Log.Error("The context menu not be shown.")
				[ ] 
			[+] if(wFindObject.Exists(3))
				[+] if((strHierarchy =="")||("default"==Lower(strHierarchy)))
					[+] if((strBlockName =="")||(Lower(strBlockName)=="default"))
						[+] if(strStreamName != null)
							[ ] wFindObject.lstStreams.TypeKeys(strStreamName)
							[ ] Log.Message("Find Stream {strStreamName}.'")
							[ ] wFindObject.btnFind.Click()
							[ ] sleep(3)
							[ ] wFindObject.btnClose.Click()
							[ ] sleep(3)
					[+] else
						[ ] Log.Message("Find Block {strBlockName}.'")
						[ ] wFindObject.SetActive()
						[ ] wFindObject.lstBlocks.TypeKeys(strBlockName)
						[+] if(strStreamName != null)
							[ ] Log.Message("Find Stream {strStreamName}.'")
							[ ] wFindObject.lstStreams.TypeKeys(strStreamName)
						[ ] wFindObject.btnFind.Click()
						[ ] sleep(3)
						[ ] wFindObject.btnClose.Click()
						[ ] sleep(3)
						[ ] 
				[+] else
					[ ] Log.Message("Find Hierachy {strHierarchy}")
					[ ] wFindObject.trvHierarchy.Find("//WPFTreeViewItem[@caption='{strHierarchy}']").Click()
					[ ] Log.Message("Find Blocks {strBlockName}.'")
					[ ] wFindObject.SetActive()
					[ ] wFindObject.lstBlocks.TypeKeys(strBlockName)
					[+] if(strStreamName != null)
						[ ] wFindObject.lstStreams.TypeKeys(strStreamName)
						[ ] Log.Message("Find Stream {strStreamName}.'")
					[ ] wFindObject.btnFind.Click()
					[ ] sleep(3)
					[ ] wFindObject.btnClose.Click()
					[ ] sleep(3)
					[ ] 
			[+] else
				[ ] Log.Error("The Find Object dialog not be shown.")
				[ ] 
		[+] void FindAndSelectObjectForInput(string strBlockName, string strStreamName optional)
			[ ] // FindAndSelectObjectForInput ( strBlockName, strStreamName optional )  - Invoke input page for Block[/Stream]
			[ ] //   Arguments
			[ ] //   1.  strBlockName , string, name of Block
			[ ] //   2.  strStreamName, string, name of Stream, optional argument.
			[ ] //   Usage:  AP.FindAndSelectObjectForInput('B1')
			[ ] 
			[+] if (this.tbMainFlowsheet.Exists())
				[ ] Log.Message("The tab page 'Main Flowsheet exist.'")
				[ ] this.tbMainFlowsheet.Click()
				[ ] sleep(3)
			[+] else
				[ ] Log.Message("Switch to Simulation page.'")
				[ ] this.hccSimulation.Click()
				[ ] glWaitForMouseIdle(15)
				[ ] this.tbMainFlowsheet.Click()
			[ ] RECT rect = this.areaForMainFlowsheet.GetRect()
			[ ] this.areaForMainFlowsheet.Click(1, (rect.xPos+rect.xSize)/20, (rect.yPos+rect.ySize)/20)
			[ ] this.areaForMainFlowsheet.TypeKeys("<Application>")
			[ ] // Invoke context menu to select "Find Object"
			[+] if(contextMenuBox.Exists(5))
				[ ] Log.Message("Invoke Find Object dialog.'")
				[ ] contextMenuBox.TypeKeys("<Up>")
				[ ] sleep(1)
				[ ] contextMenuBox.TypeKeys("<Enter>")
			[+] else
				[ ] Log.Error("The context menu not be shown.")
			[ ] 
			[+] if(wFindObject.Exists(3))
				[ ] wFindObject.SetActive()
				[+] if((strBlockName !="")&&(Lower(strBlockName)!="default"))
					[ ] Log.Message("Find Blocks {strBlockName}.'")
					[ ] wFindObject.lstBlocks.TypeKeys(strBlockName)
				[+] if(strStreamName != null)
					[ ] wFindObject.lstStreams.TypeKeys(strStreamName)
					[ ] Log.Message("Find Stream {strStreamName}.'")
				[ ] wFindObject.btnFind.Click()
				[ ] sleep(3)
				[ ] wFindObject.btnClose.Click()
				[ ] sleep(3)
			[+] else
				[ ] Log.Error("The Find Object dialog not be shown.")
				[ ] 
			[ ] // Invoke context menu to select "Input"
			[ ] this.areaForMainFlowsheet.TypeKeys("<Application>")
			[+] if(contextMenuBox.Exists(5))
				[ ] Log.Message("Invoke Input page.'")
				[ ] contextMenuBox.TypeKeys("<Down>")
				[ ] sleep(1)
				[ ] contextMenuBox.TypeKeys("<Enter>")
			[ ] 
		[+] void FindAndSelectObjectInCurrentFlowsheet(string strHierarchy, string strBlockName, string strStreamName optional)
			[ ] // FindAndSelectObject ( strBlockName, strStreamName optional )  - set focus on PFS for Block[/Stream]
			[ ] //   Arguments
			[ ] //   1.  strBlockName , string, name of Block
			[ ] //   2.  strStreamName, string, name of Stream, optional argument.
			[ ] //   Usage:  AP.FindAndSelectObject('B1')
			[ ] RECT rect = this.areaForMainFlowsheet.GetRect()
			[ ] this.areaForMainFlowsheet.Click(1, (rect.xPos+rect.xSize)/20, (rect.yPos+rect.ySize)/20)
			[ ] this.areaForMainFlowsheet.TypeKeys("<Application>")
			[ ] // Invoke context menu to select "Find Object"
			[+] if(contextMenuBox.Exists(5))
				[ ] Log.Message("Invoke Find Object dialog.'")
				[ ] contextMenuBox.TypeKeys("F")
			[+] else
				[ ] Log.Error("The context menu not be shown.")
				[ ] 
			[+] if(wFindObject.Exists(3))
				[+] if((strHierarchy =="")||("default"==Lower(strHierarchy)))
					[+] if((strBlockName =="")||(Lower(strBlockName)=="default"))
						[+] if(strStreamName != null)
							[ ] wFindObject.lstStreams.TypeKeys(strStreamName)
							[ ] Log.Message("Find Stream {strStreamName}.'")
							[ ] wFindObject.btnFind.Click()
							[ ] sleep(3)
							[ ] wFindObject.btnClose.Click()
							[ ] sleep(3)
					[+] else
						[ ] Log.Message("Find Block {strBlockName}.'")
						[ ] wFindObject.SetActive()
						[ ] wFindObject.lstBlocks.TypeKeys(strBlockName)
						[+] if(strStreamName != null)
							[ ] Log.Message("Find Stream {strStreamName}.'")
							[ ] wFindObject.lstStreams.TypeKeys(strStreamName)
						[ ] wFindObject.btnFind.Click()
						[ ] sleep(3)
						[ ] wFindObject.btnClose.Click()
						[ ] sleep(3)
						[ ] 
				[+] else
					[ ] Log.Message("Find Hierachy {strHierarchy}")
					[ ] wFindObject.trvHierarchy.Find("//WPFTreeViewItem[@caption='{strHierarchy}']").Click()
					[ ] Log.Message("Find Blocks {strBlockName}.'")
					[ ] wFindObject.SetActive()
					[ ] wFindObject.lstBlocks.TypeKeys(strBlockName)
					[+] if(strStreamName != null)
						[ ] wFindObject.lstStreams.TypeKeys(strStreamName)
						[ ] Log.Message("Find Stream {strStreamName}.'")
					[ ] wFindObject.btnFind.Click()
					[ ] sleep(3)
					[ ] wFindObject.btnClose.Click()
					[ ] sleep(3)
					[ ] 
			[+] else
				[ ] Log.Error("The Find Object dialog not be shown.")
				[ ] 
		[+] boolean  addBlockUsingFlowsheetTable( string section, string blockType, string blockId, list of string inletStreams optional, list of string inletPorts optional, list of string outletStreams optional, list of string outletPorts optional)
			[ ] //Trevor Merrill
			[ ] //Check Arguements
			[+] if( inletStreams != NULL && inletPorts != NULL && listCount(inletStreams) != listCount(inletPorts) )
				[ ] Log.Error("Error at addBlocksUsingFlowsheetTable: {listCount(inletStreams)} inlet streams are specified and {listCount(inletPorts)} inlet ports are specified, these values must agree")
				[ ] return False
				[ ] 
			[+] if( outletStreams != NULL && outletPorts != NULL && listCount(outletStreams) != listCount(outletPorts) )
				[ ] Log.Error("Error at addBlocksUsingFlowsheetTable: {listCount(outletStreams)} outlet streams are specified and {listCount(outletPorts)} outlet ports are specified, these values must agree")
				[ ] return False
			[ ] 
			[ ] //Locate flow sheet section
			[+] do
				[ ] this.trvPartTree.expand("Flowsheet/Section/{section}")
				[ ] this.trvPartTree.click("Flowsheet/Section/{section}")
			[+] except
				[ ] Log.Error("Specified Flowsheet section({section}) doesn't exist")
				[ ] return false
			[ ] 
			[ ] //Minimize Flowsheet Input Grid and go to blank gridblock on the bottom
			[ ] this.btnCollapseAll.click()
			[ ] sleep(2)
			[ ] this.find("//WPFControl[@className='AesXamValueEdit'][1]").click()
			[ ] string last = "Trevor was here"
			[ ] APlus.TypeKeys("<Ctrl-c>")
			[ ] string current = (Clipboard.GetText())[1]
			[ ] int i = 1
			[+] while( !matchstr(last , current) )
				[ ] this.TypeKeys("<Down>")
				[ ] APlus.TypeKeys("<Ctrl-c>")
				[ ] last = current
				[ ] current = (Clipboard.GetText())[1]
				[ ] i++
			[ ] 
			[ ] //Add Block Id and Model type
			[ ] this.TypeKeys(blockId)
			[ ] this.TypeKeys("<Tab>")
			[ ] this.TypeKeys(blockType)
			[ ] this.TypeKeys("<up>")
			[ ] this.TypeKeys("<left>")
			[ ] 
			[ ] //Expand the Block information to add streams and port information
			[ ] this.find("//WPFToggleButton[@automationId='ExpansionIndicator'][{i}]").click()
			[ ] i = 0
			[+] if( inletStreams != null)
				[+] while(  i < listcount(inletStreams) )
					[ ] this.typeKeys( inletStreams[i+1])
					[ ] this.typeKeys("<Enter>")
					[ ] i++
			[+] if( i > 0)
				[ ] this.typeKeys("<up {i}>")
			[ ] this.typeKeys("<Tab>")	
			[+] if( inletPorts != null)
				[+] while(  i < listcount(inletPorts) )
					[ ] this.typeKeys( inletPorts[i+1])
					[ ] this.typeKeys("<Enter>")
					[ ] i++
			[+] if( i > 0)
				[ ] this.typeKeys("<up {i}>")
			[ ] this.typeKeys("<Tab>")	
			[+] if( outletStreams != null)
				[+] while(  i < listcount(outletStreams) )
					[ ] this.typeKeys( outletStreams[i+1])
					[ ] this.typeKeys("<Enter>")
					[ ] i++
			[+] if( i > 0)
				[ ] this.typeKeys("<up {i}>")
			[ ] this.typeKeys("<Tab>")	
			[+] if( outletPorts != null)
				[+] while(  i < listcount(outletPorts) )
					[ ] this.typeKeys( outletPorts[i+1])
					[ ] this.typeKeys("<Enter>")
					[ ] i++
			[ ] return TRUE
		[+] void openFlowsheet()
			[+] if( APlus.getMode() != "Simulation")
				[ ] this.SetMode("Simulation")
			[ ] FINDOPTIONS options
			[ ] options.timeout = 0.5
			[ ] options.throwWindowNotFoundException = FALSE
			[+] do
				[ ] this.find("//WPFTabItem[@caption='*Main Flowsheet']").Click()
				[ ] sleep(1)
			[+] except
				[ ] exceptClear()
				[ ] this.SetTab("View")
				[ ] this.grpShow.btnFlowsheet.Exists(5)
				[ ] this.grpShow.btnFlowsheet.Click()
				[ ] glWaitForMouseIdle()
		[ ] 
		[ ] //Properties Setup
		[+] void addComponent( string componentId optional)
			[ ] //Add a component by Id
			[ ] //Later modify so can search for a component with specific specifications
			[+] list of string sClipboardtext
				[ ] 
			[+] if( APlus.Exists() )
				[ ] this.SetMode("Properties")
				[ ] sleep(1)
			[ ] this.trvPartTree.Expand("Components/Specifications")
			[ ] this.trvPartTree.Click("Components/Specifications")
			[ ] this.btnElecWizard.Exists(5)
			[ ] 
			[+] if( componentId != NULL )
				[ ] this.Find("//WPFContentControl[@className='CellValuePresenter'][1]").Click()
				[+] while true
					[+] do
						[+] sClipboardtext=<text>
							[ ] hellokittytestscript
						[ ] Clipboard.SetText(sClipboardtext)
						[ ] this.typeKeys("<ctrl-c>")
						[ ] sClipboardtext=Clipboard.GetText()
					[+] except
						[ ] sleep(5)
						[ ] continue
					[+] if sClipboardtext[1]=="hellokittytestscript"
						[ ] this.Find("//WPFContentControl[@className='CellValuePresenter'][1]").Click()
					[+] if sClipboardtext[1]!=""
						[ ] this.typeKeys("<Down>")
						[ ] this.typeKeys("<ctrl-c>")
					[+] else
						[ ] break
				[ ] this.TypeKeys(componentId)
				[ ] this.TypeKeys("<Enter>")
				[+] if( wUpdateParameters.Exists(2))
					[ ] wUpdateParameters.btnYes.Click()
			[ ] sleep(2) // Add in some unneeded sleeps because Aspen Plus likes to crash when you run it too fast
			[ ] 
			[ ] 
		[+] void deleteComponent( string componentId)
			[ ] //Add a component by Id
			[ ] //Later modify so can search for a component with specific specifications
			[+] if( APlus.Exists() )
				[ ] this.SetMode("Properties")
				[ ] sleep(1)
			[ ] this.trvPartTree.Expand("Components/Specifications")
			[ ] this.trvPartTree.Click("Components/Specifications")
			[ ] this.btnElecWizard.Exists(5)
			[ ] this.Find("//WPFContentControl[@className='CellValuePresenter'][1]").Click()
			[ ] Clipboard.SetText()
			[ ] this.typeKeys("<ctrl-c>")
			[+] while( (Clipboard.getText())[1] != componentId)
				[ ] this.typeKeys("<Down>")
				[ ] this.typeKeys("<ctrl-c>")
			[ ] this.TypeKeys("<Delete>")
		[+] boolean verifyComponents( list of string components)
			[ ] string component
			[+] if( APlus.Exists() )
				[ ] this.setMode("Properties")
				[ ] sleep(1)
			[ ] this.trvPartTree.Expand("Components")
			[ ] this.trvPartTree.Click("Components/Specifications")
			[ ] this.editComponentIDRow1.Exists(5)
			[ ] sleep(1)
			[ ] this.btnSelectAll.Click()
			[ ] Clipboard.SetText()
			[ ] this.typeKeys("<ctrl-c>")
			[ ] sleep(0.5)
			[ ] int i
			[ ] list of string foundComponents = Clipboard.GetText()
			[ ] boolean foundAll = TRUE
			[ ] 
			[ ] print(foundComponents)
			[ ] 
			[+] for each component in components
				[ ] 
				[+] for( i = 2; i<= ListCount(foundComponents); i++)
					[+] if( matchStr("{component}{chr(9)}*", foundComponents[i] ) )
						[ ] Log.Pass("Found Component {component} ")
						[ ] break
					[+] if( i == ListCount(foundComponents) )
						[ ] Log.Error("ERROR: Component {component} cannot be found")
						[ ] foundAll = FALSE
			[ ] 
			[ ] return foundAll
			[ ] 
		[+] void AddComponents(list of string sComponents)
			[ ] // Such as:
			[ ] //APlus.AddComponent({"ETHANOL","WATER"})
			[ ] //
			[ ] String sComp
			[ ] int i =0
			[ ] this.SetActive()
			[ ] this.tbComponentsSpec.Click()
			[+] for each sComp in sComponents
				[ ] this.dgComponents.SetCellData(0,i,sComp)
				[ ] i++
				[ ] sleep(0.5)
		[+] void SelectComponents(list of string lsCom)
			[ ] //APlus.SelectComponents({"H2O","Na2SiO3"})
			[ ] String sComp
			[ ] this.SetActive()
			[ ] this.tbComponentsSpec.Click()
			[ ] this.btnFind.Click()
			[+] for each sComp in lsCom
				[ ] wFindCompounds.SetActive()
				[ ] wFindCompounds.rdEquals.Select()
				[ ] wFindCompounds.txbName.SetText(sComp)
				[ ] wFindCompounds.btnFind.Click()
				[+] while !wFindCompounds.btnFind.IsEnabled
					[ ] sleep(1)
				[+] do
					[ ] wFindCompounds.lsvCompounds.Find("//WPFListViewItem[1]").Click()
					[ ] // wFindCompounds.Find("//WPFTextBlock[@caption='{sComp}']").SetFocus()
				[+] except
					[ ] Log.Error("Can not find component {sComp}")
					[ ] break
				[ ] wFindCompounds.btnAddSelectedComponents.Click()
				[+] if dlgAspenPlus.Exists(2)
					[ ] dlgAspenPlus.Find("//WPFButton[@automationId='btn1']").click()//Add new comp
				[ ] sleep(0.5)
			[ ] wFindCompounds.btnClose.Click()
		[ ] 
		[ ] 
		[+] //Activated Economic Analysis
			[+] string getMappingStatus(string sDataout)
					[ ] glWaitForMouseIdle(60)
					[ ] APlus.setTab("Economics")
					[ ] APlus.grpStatus.Exists(5)
					[ ] 
					[+] do
						[+] if( SYS_FILEEXISTS( "{sDataout}\mapStatus.bmp"))
							[ ] SYS_REMOVEFILE( "{sDataout}\mapStatus.bmp")
						[ ] APlus.grpStatus.imgMapping.CaptureBitmap("{sDataout}\mapStatus.bmp")
						[+] if( SYS_CompareBitmap("{sDataout}\mapStatus.bmp","{sAspenPlus_sProjectDir}data\datain\Economics\checkmarkMapping.bmp") )
							[ ] return "blue"
						[+] else if( SYS_CompareBitmap("{sDataout}\mapStatus.bmp","{sAspenPlus_sProjectDir}data\datain\Economics\errorMapping.bmp") )
							[ ] return "yellow"
						[+] else
							[ ] return "UNKNOWN IMAGE"
					[+] except
						[ ] return "MEH!" //ALSO KNOW AS "NOT ABLE TO DETERMINE" BUT SHORTER
						[ ] 
			[+] string getSizingStatus(string sDataout)
					[ ] glWaitForMouseIdle(60)
					[ ] APlus.setTab("Economics")
					[ ] APlus.grpStatus.Exists(5)
					[ ] 
					[+] do
						[+] if( SYS_FILEEXISTS( "{sDataout}\sizeStatus.bmp"))
							[ ] SYS_REMOVEFILE( "{sDataout}\sizeStatus.bmp")
						[ ] APlus.grpStatus.imgSizing.CaptureBitmap("{sDataout}\sizeStatus.bmp")
						[+] if( SYS_CompareBitmap("{sDataout}\sizeStatus.bmp","{sAspenPlus_sProjectDir}data\datain\Economics\checkmarkSizing.bmp") )
							[ ] return "blue"
						[+] else if( SYS_CompareBitmap("{sDataout}\sizeStatus.bmp","{sAspenPlus_sProjectDir}data\datain\Economics\errorSizing.bmp") )
							[ ] return "yellow"
						[+] else
							[ ] return "UNKNOWN IMAGE"
					[+] except
						[ ] return "MEH!"//ALSO KNOW AS "NOT ABLE TO DETERMINE" BUT SHORTER
						[ ] 
			[+] string getEvaluationStatus(string sDataout)
					[ ] glWaitForMouseIdle(60)
					[ ] APlus.setTab("Economics")
					[ ] APlus.grpStatus.Exists(5)
					[ ] 
					[+] do
						[+] if( SYS_FILEEXISTS( "{sDataout}\evalStatus.bmp"))
							[ ] SYS_REMOVEFILE( "{sDataout}\evalStatus.bmp")
						[ ] APlus.grpStatus.imgEvaluation.CaptureBitmap("{sDataout}\evalStatus.bmp")
						[+] if( SYS_CompareBitmap("{sDataout}\evalStatus.bmp","{sAspenPlus_sProjectDir}data\datain\Economics\checkmarkEvaluation.bmp") )
							[ ] return "blue"
						[+] else if( SYS_CompareBitmap("{sDataout}\evalStatus.bmp","{sAspenPlus_sProjectDir}data\datain\Economics\errorEvaluation.bmp") )
							[ ] return "yellow"
						[+] else
							[ ] return "UNKNOWN IMAGE"
					[+] except
						[ ] return "MEH!"//ALSO KNOW AS "NOT ABLE TO DETERMINE" BUT SHORTER
			[+] void StartActivatedEconomicAnalysis()
				[ ] //By Tarun Aggarwal (10/07/14)
				[ ] //Starts activated Economic analysis
				[ ] HANDLE hTimer
				[ ] hTimer = timercreate()
				[+] if !APlus.grpActivatedEconomicAnalysis.txtActivatedEconomicAnalysisOff.Exists() && APlus.grpActivatedEconomicAnalysis.txtActivatedEconomicAnalysisOn.Exists()
					[ ] grpActivatedEconomicAnalysis.btnActivatedEconomicAnalysisOnOff.click()
				[+] while(Cursor.GetType()=="WAIT" || Cursor.GetType()=="DELAY")
					[ ] sleep(0.5)	
					[ ] print("sleep")
				[ ] sleep(5)
				[ ] timerstart(hTimer)
				[ ] grpActivatedEconomicAnalysis.btnActivatedEconomicAnalysisOnOff.click()
				[+] while(Cursor.GetType()=="WAIT" || Cursor.GetType()=="DELAY" || !grpActivatedEconomicAnalysis.imgCheckmark.exists())
					[ ] sleep(0.5)	
					[+] if boxEconomicInfo.exists()
						[ ] boxEconomicInfo.btnOK.click()
				[ ] timerstop(hTimer)
				[ ] print("Run time for Activation is {Timerstr(hTimer)}")
				[ ] timerdestroy(hTimer)
			[+] boolean verifyActivatedEconomicAnalysis(float CapitalCost optional, float UtilityCost optional, float Tolerance optional)
				[ ] //By Tarun Aggarwal (10/07/14)
				[ ] //Confirm's values returned by Activated Economic Analysis are correct.
				[ ] //Tolerence should be a decimal value < 1 and not percentage
				[ ] boolean CC, UC
				[ ] float a,b,c,d
				[+] if Tolerance == Null 
					[ ] print("Defult tolerance set to +/- 10%")
					[ ] Tolerance = 0.10
				[+] else
					[ ] print("Tolerance is set too {100.*Tolerance}")
				[+] if CapitalCost == NULL && UtilityCost == NULL
					[ ] Log.fail("You need to enter one parameter.")
					[ ] return False
					[ ] exit(0)
				[+] if CapitalCost != NULL
					[ ] string inputvalCC = grpActivatedEconomicAnalysis.txtActivatedEconomicAnalysisCapitalCost.GetProperty("Text")
					[ ] string tranCC = strtran(inputvalCC,",","")
					[ ] a = val(tranCC)
					[ ] b =abs((CapitalCost-a)/a)
					[+] if b <= Tolerance
						[ ] print("Capital Cost actual is {a}, User value is {CapitalCost} and is within tolerance with {trim(str(100.* b))}% difference.")
						[ ] UC = True
					[+] else
						[ ] print("Capital Cost actual is {a}, User value is {CapitalCost} and is outside of tolerance by {trim(str(100.* b))}%.")
						[ ] UC = False
				[+] if UtilityCost != NULL
					[ ] string input_val = grpActivatedEconomicAnalysis.txtActivatedEconomicAnalysisUtilityCost.getproperty("Text")
					[ ] string trans = strtran(input_val,",","")
					[ ] c = val(trans)
					[ ] d = abs((UtilityCost - c)/c)
					[+] if d <= Tolerance
						[ ] print("Utility Cost actual is {c},user provided value is {UtilityCost} and is within tolerance with {trim(str(100.* d))}% differnce.")
						[ ] CC = True
					[+] else
						[ ] print("Utility Cost actual is {c} and user provided value is {UtilityCost} and  is outside of tolerance by {trim(str(100.*d))}%.")
						[ ] CC = False
				[+] if (CC == TRUE || CC == Null) && (UC == True || UC == Null)
					[ ] print(" Both functions are within tolerance.")
					[ ] return True
				[+] else
					[ ] print("Both or one function are outside of tolerance, please check previous messages to determine which one.")
					[ ] return False
		[ ] 
		[+] //Activated Energy Analysis
			[+] void setMinimumApproachTemp( string temp )
				[ ] APlus.setMode("Energy Analysis")
				[ ] sleep(2)
				[ ] APlus.trvPartTree.expand("Project 1")
				[ ] APlus.trvPartTree.Click("Setup")
				[ ] sleep(2)
				[ ] APlus.setTab("Constraints")
				[ ] APlus.txbExchangerMinApproachTemp.TypeKeys("<ctrl-a><Delete>{temp}", 0.3)
				[ ] APlus.find("//WPFTextBox[@className='MMTextBox'][2]").Click()
				[ ] sleep(0.5)
				[ ] 
			[+] void StartActivatedEnergyAnalysis()
				[ ] //By Tarun Aggarwal (10/07/14)
				[ ] //Starts activated energy analysis
				[ ] HANDLE hTimer
				[ ] hTimer = timercreate()
				[+] if !APlus.grpActivatedEnergyAnalysis.txtActivatedEnergyAnalysisOff.Exists() && APlus.grpActivatedEnergyAnalysis.txtActivatedEnergyAnalysisOn.Exists()
					[ ] //grpActivatedEnergyAnalysis.btnActivatedEnergyAnalysisOnOff.click()
				[+] while(Cursor.GetType()=="WAIT" || Cursor.GetType()=="DELAY")
					[ ] sleep(0.5)	
					[ ] print("sleep")
				[ ] sleep(5)
				[ ] timerstart(hTimer)
				[ ] //grpActivatedEnergyAnalysis.btnActivatedEnergyAnalysisOnOff.click()
				[+] while(Cursor.GetType()=="WAIT" || Cursor.GetType()=="DELAY")
					[ ] sleep(0.5)	
					[ ] print("sleep")
				[ ] timerstop(hTimer)
				[ ] print("Run time for Activation is {Timerstr(hTimer)}")
				[ ] timerdestroy(hTimer)
			[+] boolean verifyActivatedEnergyAnalysis(float MW_used optional, float Percent_Of_Actual optional, float Tolerance optional)
				[ ] //By Tarun Aggarwal (10/07/14)
				[ ] //Confirm's values returned by Activated Energy Analysis are correct.
				[ ] //Tolerence should be a decimal value < 1 and not percentage
				[ ] boolean POA, MWU
				[ ] float a,b,c,d
				[+] if Tolerance == NULL 
					[ ] print("Defult tolerance set to +/- 10%")
					[ ] Tolerance = 0.10
				[+] else
					[ ] print("Tolerance is set too {100.*Tolerance}")
				[+] if MW_used == NULL && Percent_Of_Actual == NULL
					[ ] print("You need to enter one parameter.")
					[ ] return False
					[ ] exit(0)
				[+] if MW_used != NULL
					[ ] a = val(grpActivatedEnergyAnalysis.txtActivatedEnergyAnalysisMWUsed.GetProperty("Text"))
					[ ] b =abs((MW_used-a)/a)
					[+] if b <= Tolerance
						[ ] print("MW actual is {a} MW provided is {MW_used} and is within tolerance with {trim(str(100.* b))}% difference.")
						[ ] MWU = True
					[+] else
						[ ] print("MW actual is {a} MW provided is {MW_used} and is outside of tolerance by {trim(str(100.* b))}%.")
						[ ] MWU = False
				[+] if Percent_Of_Actual != NULL
					[ ] c = val(grpActivatedEnergyAnalysis.txtActivatedEnergyAnalysisPercentChange.GetProperty("Text"))
					[ ] d = abs((Percent_Of_Actual - c)/c)
					[+] if d <= Tolerance
						[ ] print("Percent of Actual actual is {c} and user provided value is {Percent_Of_Actual} and is within tolerance with {trim(str(100.* d))}% differnce.")
						[ ] POA = True
					[+] else
						[ ] print("Percent of Actual actual is {c} and user provided value is {Percent_Of_Actual} and  is outside of tolerance by {trim(str(100.*d))}%.")
						[ ] POA = False
				[+] if (POA == TRUE || POA == Null) && (MWU == True || MWU == Null)
					[ ] print(" Both functions are within tolerance.")
					[ ] return True
				[+] else
					[ ] print("Both or one function are outside of tolerance, please check previous messages to determine which one.")
					[ ] return False
		[ ] //Other
		[+] boolean verifyStringsInOrder(list of STRING lsCheck, string filePath )
			[ ] //Verify multiple strings in a file in order
			[ ] handle hFile
			[ ] hFile = FileOpen (filePath , FM_READ)
			[ ] int itemCount = listcount(lsCheck)
			[ ] 
			[ ] int i = 1
			[ ] string sLine
			[+] while (FileReadLine (hFile, sLine) && i <= itemCount)
				[+] if( matchstr( "*{lsCheck[i]}*", sLine ) )
					[ ] i++
			[ ] 
			[ ] FileClose (hFile)
			[+] if( itemCount  > i - 1 )
				[ ] Log.Warning("List of strings not all found. Found the first {i-1} items in desired order")
				[ ] return false
			[ ] return true
			[ ] 
		[+] boolean verifyChildrenByCaption( window parentWindow, list of string expectedCaptions)
			[ ] //Verify that a parent item contains objects by caption
			[ ] list of WINDOW children = parentWindow.getChildren()
			[ ] window child
			[ ] list of String actualCaptions
			[ ] string caption
			[ ] boolean print
			[+] for each child in  children
				[ ] listAppend(actualCaptions, child.getCaption() )
			[+] if( listcount( actualCaptions) <  listCount( expectedCaptions) )
				[ ] Log.error("Some Children are missing from the parent  item ")
			[+] if( listcount( actualCaptions) >  listCount( expectedCaptions) )
				[ ] Log.error("There are more children than expected ")
				[ ] 
			[ ] int numActualChildren = listCount( actualCaptions )
			[ ] int numExpectedChildren = listCount( expectedCaptions )
			[ ] int notFound = 0
			[ ] int i =1, j = 1
			[+] for( i = 1; i <= numExpectedChildren; i++)
				[ ] 
				[+] for( j = 1; j <= numActualChildren; j++)
					[+] if( matchstr( actualCaptions[j], expectedCaptions[i] ) )
						[ ] Log.Pass(" {chr(34)}{expectedCaptions[i]}{chr(34)}  has been found under Parent Item")
						[ ] break
				[+] if( j > numActualChildren)
					[ ] Log.Warning(" {chr(34)}{expectedCaptions[i]}{chr(34)} could not be found under Parent Item")
					[ ] notFound++
			[ ] 
			[+] if( notFound > (numExpectedChildren - numActualChildren) )//If not found accounts for more than the missing
				[ ] PRINT("*******************************************************")
				[ ] PRINT("*******************************************************")
				[ ] PRINT("*******************************************************")
				[+] for( i = 1; i <= numActualChildren; i++)
					[ ] 
					[+] for( j = 1; j <= numExpectedChildren; j++)
						[+] if( matchstr( actualCaptions[i], expectedCaptions[j] ) )
							[ ] break
					[+] if( j > numExpectedChildren)
						[ ] Log.Warning("Child found by caption          {chr(34)}{actualCaptions[i]}{chr(34)}           that is not in the expected List of Children ")
			[+] if( notFound > (numExpectedChildren - numActualChildren) || notFound > 0 )
				[ ] 
				[ ] PRINT("*******************************************************")
				[ ] PRINT("***************Expected********************************")
				[ ] PRINT("*******************************************************")
				[+] for each caption in expectedCaptions
					[ ] print(caption)
				[ ] PRINT("*******************************************************")
				[ ] PRINT("***************Found********************************")
				[ ] PRINT("*******************************************************")
				[+] for each caption in actualCaptions
					[ ] print(caption)
				[ ] PRINT("*******************************************************")
				[ ] PRINT("*******************************************************")
				[+] PRINT("*******************************************************")
					[ ] 
				[ ] 
			[ ] 
			[+] if( notFound > 0)
				[ ] return False
			[+] else
				[ ] return True
		[+] list of string CopyIntoClipboard(string sTextClick optional,string sWithinGroupBox optional,int iColumn optional,int iRow optional,boolean bCopyWholeTable optional)
			[ ] //ERR:7
			[ ] list of WINDOW lwGrp
			[ ] window wGrp,wTarget,wGroup
			[ ] int iTable=0
			[ ] int i=0
			[ ] int k=1
			[ ] list of string sList,lsRow
			[ ] string sRow
			[ ] string sCopyMethod="Default"
			[+] while true
				[+] do
					[ ] Clipboard.SetText(null)
					[ ] break
					[ ] Print("ERR7:=APMainFrame.inc=CopyIntoClipboard= fail to clean Clipboard")
				[+] except
					[ ] 
			[+] if sWithinGroupBox!=null
				[+] if FindWPFGroupBox("//WPFGroupBox[@caption='*{sWithinGroupBox}*']").Exists()
					[ ] wGroup=FindWPFGroupBox("//WPFGroupBox[@caption='*{sWithinGroupBox}*']")
				[+] else
					[ ] wGroup=this
					[ ] Log.Fail("ERR: Failed to find groupbox:< {sWithinGroupBox}> ERR4:=APMainFrame.inc=other=CopyIntoClipboard=")
			[+] else
				[ ] wGroup=this
			[+] for(i=0;i<=15;i++)
				[ ] //CopyAllTable
				[+] if bCopyWholeTable==true
					[+] if wGroup.FindWPFButton("//WPFButton[@automationId='SelectAll']").Exists()
						[ ] wTarget=wGroup.FindWPFButton("//WPFButton[@automationId='SelectAll']")
					[+] else
						[ ] Log.Fail("Cannot Find <Copy AlL> button within Table ERR5:=APMainFrame.inc=other=CopyIntoClipboard=")
						[ ] break
					[ ] sCopyMethod="Right"
				[ ] //sTextClick Mode?
				[+] else if sTextClick!=null
					[ ] wGroup.TextClick(sTextClick)
					[ ] sCopyMethod="Keyboard"
				[ ] //iColumn choose mode?
				[+] else if iColumn!=null
					[ ] if wGroup.FindWPFContentControl("//WPFContentControl[@className='HeaderLabelArea']").Exists(5)
					[+] else
						[ ] Log.Fail("Unable to find table in current page=APMainFrame.inc=Other=CopyIntoClipboard=ER1")
						[ ] break
					[ ] wGrp=wGroup.FindWPFContentControl("//WPFContentControl[@className='HeaderLabelArea']").GetChildren()[1]
					[ ] lwGrp=wGrp.GetChildren()
					[+] if ListCount(lwGrp)<iColumn
						[ ] Log.Fail("Unable to find table in current page=APMainFrame.inc=Other=CopyIntoClipboard=ER2")
						[ ] break
					[+] else
						[ ] wTarget=lwGrp[iColumn]
						[ ] sCopyMethod="Right"
				[ ] //iRow choose mode?
				[+] else if iRow!=null
					[ ] sRow=this.CopyIntoClipboard(null,sWithinGroupBox,null,null,true)[iRow]
					[+] while GetField(sRow,"{Chr(9)}",k)!=""
						[ ] ListAppend(lsRow,GetField(sRow,"{Chr(9)}",k))
						[ ] k++
					[ ] Clipboard.SetText(lsRow)
				[ ] //Choose CopyMethod start
				[+] if sCopyMethod=="Right"
					[ ] wTarget.Click(MB_RIGHT)
					[ ] sleep(0.3)
					[+] if FindWPFMenuItem("//WPFMenuItem[@caption='_copy']").Exists(5)
						[ ] sleep(0.5)
						[ ] FindWPFMenuItem("//WPFMenuItem[@caption='_copy']").Select()
					[+] else
						[ ] continue
				[+] else if sCopyMethod=="Keyboard"
					[ ] sleep(0.5)
					[ ] wGroup.TypeKeys("<Ctrl-C>")
				[ ] //choose copymethod end
				[ ] 
				[ ] //Error Analyaiss
				[+] if FindDialogBox("//DialogBox[@caption='*error*']").Exists()
					[ ] FindDialogBox("//DialogBox[@caption='*error*']").Close()
					[ ] continue
				[+] if FindDialogBox("//DialogBox[@caption='*Error*']").Exists()
					[ ] FindDialogBox("//DialogBox[@caption='*Error*']").Close()
					[ ] continue
				[+] if FindDialogBox("//DialogBox[@caption='*ERROR*']").Exists()
					[ ] FindDialogBox("//DialogBox[@caption='*ERROR*']").Close()
					[ ] continue
				[+] if Clipboard.GetText()[1]!=null
					[ ] break
				[ ] //Error Analyaiss
			[ ] sList=Clipboard.GetText()
			[+] if i>=15
				[ ] Log.Fail("Unable to copy thingsinto textboard ER3")
			[+] for (i=1;i<=20;i++)
				[ ] ListAppend(sList,"Error nothing in there")
			[ ] return sList
		[+] string GetValueFromWPFObj(string sGroupBox_orNone optional,string sItemName,int iCombinedBox_Adjustment optional,int iTargetCorrection optional,boolean bClickModeOff_true optional)
			[ ] window wWin,wItem
			[ ] int iTarget=1
			[ ] list of WINDOW lwItem
			[ ] boolean bTable=false
			[ ] //ERR5: =APMainFrame.inc=GetValueFromWPFObj=")
			[ ] //If GroupBox=none, then it means it is not under any groupbox
			[ ] 
			[ ] //Where's the start point? Groupbox or not?
			[+] // if sGroupBox_orNone!=null
				[+] // if sGroupBox_orNone=="none"||sGroupBox_orNone=="None"||sGroupBox_orNone=="NONE"
					[+] // if FindWPFContentControl("//WPFContentControl[@automationId='MMTabPage_1']").Exists()
						[ ] // wWin=FindWPFContentControl("//WPFContentControl[@automationId='MMTabPage_1']")
				[+] // else if APlus.FindWPFGroupBox("WPFGroupBox[@caption='*{sGroupBox_orNone}*']").Exists()
					[ ] // wWin=APlus.FindWPFGroupBox("WPFGroupBox[@caption='*{sGroupBox_orNone}*']")
				[+] // else if APlus.FindWPFGroupBox("//WPFGroupBox[@automationId='Template_GroupBox']").Exists()
					[ ] // wWin=APlus.FindWPFGroupBox("//WPFGroupBox[@automationId='Template_GroupBox']")
				[+] // else
					[ ] // Log.Error("Unable to locate Groupbox. Try to go without GroupBox")
					[ ] // sGroupBox_orNone=null
			[+] // if sGroupBox_orNone==null
				[+] // if FindWPFContentControl("//WPFContentControl[@automationId='MMTabPage_1']").Exists()
					[ ] // wWin=FindWPFContentControl("//WPFContentControl[@automationId='MMTabPage_1']")
					[ ] // lwItem=wWin.FindAll("//WPFGroupBox[@caption='*']")
					[ ] // bTable=false
					[+] // for each wItem in lwItem
						[+] // if MatchStr("*{sItemName}*",wItem.TextCapture())
							[ ] // wWin=wItem
							[ ] // bTable=true
							[ ] // break
				[+] // else
					[ ] // Log.Fail("ERR1:Cannot find WPFContentControl.=APMainFrame.inc=GetValueFromWPFObj=")
					[ ] // return "ERR1:Cannot find WPFContentControl.=APMainFrame.inc=GetValueFromWPFObj="
			[+] if APlus.SearchGroupBox(sGroupBox_orNone,wWin,sItemName)==false
				[ ] return "Fail to Find groupbox or there is no such things exist"
			[ ] lwItem=wWin.GetChildren()
			[ ] 
			[ ] //Target Correction?
			[+] if iTargetCorrection==null
				[ ] iTargetCorrection=1
			[ ] 
			[ ] //Find sItem
			[+] for each wItem in lwItem
				[+] if MatchStr("*{sItemName}*",wItem.TextCapture())
					[ ] iTarget=iTarget+iTargetCorrection
					[ ] break
				[ ] iTarget++
			[+] if iTarget>Listcount(lwItem)
				[ ] Log.Fail("ERR2: Fail to find target<{sItemName}>on screen.  REF:=APMainFrame.inc=Other= GetValueFromWPFObj=")
				[ ] return "ERR2: Fail to find target<{sItemName}>on screen.  REF:=APMainFrame.inc=Other= GetValueFromWPFObj="
			[ ] wWin=lwItem[iTarget]
			[ ] 
			[ ] //Combined_box adjustment?
			[+] if iCombinedBox_Adjustment!=null
				[+] if wWin.Find("//WPFContentControl[@caption='*']").Exists()
					[ ] wWin=wWin.Find("//WPFContentControl[@caption='*']")
					[ ] lwItem=wWin.GetChildren()
					[ ] wWin=lwItem[iCombinedBox_Adjustment]
				[+] else
					[ ] Log.Fail("ERR3  Fail to do combined box adjustment REF:=APMainFrame.inc=Other= GetValueFromWPFObj=")
					[ ] return "ERR3  Fail to do combined box adjustment REF:=APMainFrame.inc=Other= GetValueFromWPFObj="
			[ ] 
			[ ] //Object Output/Selection
			[+] if wWin.Exists()
				[+] if bClickModeOff_true!=true
					[ ] wWin.Click()
				[ ] sleep(0.5)
				[ ] return wWin.TextCapture()
			[+] else
				[ ] Log.Fail("ERR4  InputData=Fail to get Target window REF:=APMainFrame.inc=Other=   GetValueFromWPFObj=")
				[ ] return "ERR4  InputData=Fail to get Target window REF:=APMainFrame.inc=Other=   GetValueFromWPFObj="
		[+] private void SearchObj(inout window wTarget,string sTarget,inout boolean bExit optional)
			[ ] string sTable
			[ ] list of WINDOW lw
			[ ] window w,w1
			[ ] boolean b=bExit
			[ ] 
			[+] if bExit==null
				[+] if wTarget.FindWPFTextBlock("//WPFTextBlock[@caption='{sTarget}']").Exists()
					[ ] lw=wTarget.FindAll("//WPFTextBlock[@caption='{sTarget}']")
					[+] for each w in lw
						[+] if w.TextCapture()==sTarget
							[ ] bExit=true
							[ ] wTarget=w
							[ ] return
				[ ] 
				[+] if wTarget.FindWPFContentControl("//WPFContentControl[@caption='{sTarget}' and @className='CellValuePresenter']").Exists()
					[ ] lw=wTarget.FindAll("//WPFContentControl[@caption='{sTarget}' and @className='CellValuePresenter']")
					[+] for each w in lw
						[ ] print(w.TextCapture())
						[+] if w.TextCapture()==sTarget
							[ ] bExit=true
							[ ] wTarget=w
							[ ] return
			[ ] bExit=false
			[ ] lw=wTarget.GetChildren()
			[+] if ListCount(lw)==0
				[ ] return
			[+] for each w in lw
				[ ] w1=w
				[+] if w.TextCapture()==sTarget
					[ ] bExit=true
					[ ] wTarget=w
					[ ] return
				[+] else
					[ ] SearchObj(w1,sTarget,bExit)
				[+] if bExit==true
					[ ] wTarget=w1
					[ ] return
		[+] string GetValueWithinGroupBox(string sGroupBoxName,string sItemName)
			[ ] // window wGB
			[+] // if FindWPFGroupBox("//WPFGroupBox[@caption='*{sGroupBoxName}*']").Exists()
				[ ] // wGB=FindWPFGroupBox("//WPFGroupBox[@caption='*{sGroupBoxName}*']")
			[+] // else if FindWPFGroupBox("//WPFGroupBox[@automationId='*{sGroupBoxName}*']").Exists()
				[ ] // wGB=FindWPFGroupBox("//WPFGroupBox[@automationId='*{sGroupBoxName}*']")
			[+] // else if FindWPFGroupBox("//WPFGroupBox[@automationId='Template_GroupBox']").Exists()
				[ ] // wGB=FindWPFGroupBox("//WPFGroupBox[@automationId='Template_GroupBox']")
			[+] // else
				[ ] // return "ERR Fail to find Groupbox <{sGroupBoxName}>"
			[ ] // 
			[ ] // list of WINDOW lwItem=wGB.GetChildren()
			[ ] // window wItem
			[ ] // int iTarget=1
			[+] // for each wItem in lwItem
				[+] // if MatchStr("*{sItemName}*",wItem.TextCapture())
					[ ] // iTarget++
					[ ] // return lwItem[iTarget].TextCapture()
				[ ] // iTarget++
			[+] // if iTarget>Listcount(lwItem)
				[ ] // return "ERR: Fail to find target<{sItemName}>in GroupBox <{sGroupBoxName}>  REF:=APMainFrame.inc=Other= GetValueWithinGroupBox="
			[ ] return GetValueFromWPFObj(sGroupBoxName,sItemName)
			[ ] 
		[+] private boolean SearchGroupBox(string sGroupBoxWithNumber optional,inout window wWin optional,string sItemName)
			[ ] window wItem
			[ ] int iTarget=1
			[ ] int iTable,iTime
			[ ] string sGroupBox=null
			[ ] list of WINDOW lwItem
			[ ] boolean bFindObj=false
			[ ] boolean bTable=false
			[ ] string sTable
			[ ] iTable=null
			[ ] 
			[ ] //which unit in groupbox are you talking about?
			[+] if sGroupBoxWithNumber!=null
				[+] if MatchStr("*,*",sGroupBoxWithNumber)
					[ ] sGroupBox=GetField(sGroupBoxWithNumber,",",1)
					[+] if sGroupBox==""
						[ ] sGroupBox=null
					[ ] sTable=GetField(sGroupBoxWithNumber,",",2)
					[+] if sTable!=""
						[ ] iTable=val(sTable)
				[+] else
					[ ] sGroupBox=sGroupBoxWithNumber
				[+] if sGroupBox!=null
					[+] if (sGroupBox=="none")||(sGroupBox=="None")||(sGroupBox=="NONE")
						[+] if FindWPFContentControl("//WPFContentControl[@automationId='MMTabPage_1']").Exists()
							[ ] wWin=FindWPFContentControl("//WPFContentControl[@automationId='MMTabPage_1']")
							[+] if iTable!=null
								[+] if wWin.FindWPFButton("//WPFButton[@automationId='SelectAll'][{iTable}]").Exists()
									[ ] wWin=wWin.FindWPFButton("//WPFButton[@automationId='SelectAll'][{iTable}]")
									[ ] iTime=0
									[+] while (iTime<=10)&&(wWin.GetClass()!=WPFItemsControl)
										[ ] wWin=wWin.GetParent()
									[+] if iTime>10
										[ ] Log.Fail("ERR9  REF:=APMainFrame.inc=Other= InputData=: Cannot Locate the table framework, Please make investigation on the table structure")
										[ ] return false
					[+] else if APlus.FindWPFGroupBox("WPFGroupBox[@caption='*{sGroupBox}*']").Exists()
						[ ] wWin=APlus.FindWPFGroupBox("WPFGroupBox[@caption='*{sGroupBox}*']")
						[+] if iTable!=null
							[+] if wWin.FindWPFButton("//WPFButton[@automationId='SelectAll'][{iTable}]").Exists()
								[ ] wWin=wWin.FindWPFButton("//WPFButton[@automationId='SelectAll'][{iTable}]")
								[ ] iTime=0
								[+] while (iTime<=10)&&(wWin.GetClass()!=WPFItemsControl)
									[ ] wWin=wWin.GetParent()
								[+] if iTime>10
									[ ] Log.Fail("ERR9  REF:=APMainFrame.inc=Other= InputData=: Cannot Locate the table framework, Please make investigation on the table structure")
									[ ] return false
					[+] else if APlus.FindWPFGroupBox("//WPFGroupBox[@automationId='Template_GroupBox']").Exists()
						[ ] wWin=APlus.FindWPFGroupBox("//WPFGroupBox[@automationId='Template_GroupBox']")
						[+] if iTable!=null
							[+] if wWin.FindWPFButton("//WPFButton[@automationId='SelectAll'][{iTable}]").Exists()
								[ ] wWin=wWin.FindWPFButton("//WPFButton[@automationId='SelectAll'][{iTable}]")
								[ ] iTime=0
								[+] while (iTime<=10)&&(wWin.GetClass()!=WPFItemsControl)
									[ ] wWin=wWin.GetParent()
								[+] if iTime>10
									[ ] Log.Fail("ERR9  REF:=APMainFrame.inc=Other= InputData=: Cannot Locate the table framework, Please make investigation on the table structure")
									[ ] return false
					[+] else
						[ ] Log.Error("Unable to locate Groupbox. Try to go without GroupBox")
						[ ] sGroupBox=null
			[ ] //Nothing in groupbox?
			[+] if sGroupBox==null
				[+] if FindWPFContentControl("//WPFContentControl[@automationId='MMTabPage_1']").Exists()
					[ ] wWin=FindWPFContentControl("//WPFContentControl[@automationId='MMTabPage_1']")
					[ ] lwItem=wWin.FindAll("//WPFGroupBox[@caption='*']")
					[ ] bTable=false
					[+] for each wItem in lwItem
						[+] if MatchStr("*{sItemName}*",wItem.TextCapture())
							[ ] wWin=wItem
							[ ] bTable=true
							[ ] break
				[+] else
					[ ] Log.Fail("ERR1:Cannot find WPFContentControl.=APMainFrame.inc=InputData=")
					[ ] return false
			[ ] return true
			[ ] 
		[+] boolean CompareTables(ListStringOrString Base,ListStringOrString Compare,real rTolerance optional,boolean bNeglectNegative optional)
			[ ] int iColumn,i,j,k
			[ ] real iBase,iCompare
			[ ] int iRow,iRowt,iColumnt,iBase1,iCompare1,iTemp,iLen
			[ ] list of string lsTable
			[ ] string sTable
			[ ] boolean bTable=true
			[ ] list of STRING lsBaseTable,lsTableToCompare
			[ ] boolean bTemp
			[+] 
				[+] switch (TypeOf (Base))
					[+] case string
						[ ] ListAppend(lsBaseTable,Base)
					[+] case list of STRING
						[ ] lsBaseTable=Base
				[+] switch (TypeOf (Compare))
					[+] case string
						[ ] ListAppend(lsTableToCompare,Compare)
					[+] case list of STRING
						[ ] lsTableToCompare=Compare
				[+] if rTolerance==null
					[ ] rTolerance=0.1
				[ ] //lsBaseTable conversion
				[ ] lsTable=lsBaseTable
				[ ] iColumn=1
				[ ] iRow=ListCount(lsTable)
				[ ] iBase1=iRow
				[+] for each sTable in lsTable
					[ ] i=1
					[+] while GetField(sTable,"{chr(9)}",i)!=""
						[ ] i++
					[ ] i--
					[+] if i>iColumn
						[ ] iColumn=i
				[ ] iRowt=iRow
				[ ] iColumnt=iColumn
				[+] if iRow==0
					[ ] Log.Fail("the size of List_Base is 0")
					[ ] return false
				[ ] array[iRow][iColumn] of string arTableBase
				[+] for (i=1;i<=iRow;i++)
					[+] for (j=1;j<=iColumn;j++)
						[ ] arTableBase[i][j]=GetField(lsTable[i],"{chr(9)}",j)
						[ ] 
				[ ] 
				[ ] //lsTableToCompare conversion
				[ ] lsTable=lsTableToCompare
				[ ] iColumn=1
				[ ] iRow=ListCount(lsTable)
				[+] if iRow==0
					[ ] Log.Fail("the size of List_Base is 0")
					[ ] return false
				[ ] iCompare1=iRow
				[+] if iBase1!=iCompare1
					[ ] return false
				[+] for each sTable in lsTable
					[ ] i=1
					[+] while GetField(sTable,"{chr(9)}",i)!=""
						[ ] i++
					[ ] i--
					[+] if i>iColumn
						[ ] iColumn=i
				[ ] iRowt=iRow
				[ ] iColumnt=iColumn
				[ ] array[iRow][iColumn] of string arTableToCompare
				[+] for (i=1;i<=iRow;i++)
					[+] for (j=1;j<=iColumn;j++)
						[ ] arTableToCompare[i][j]=GetField(lsTable[i],"{chr(9)}",j)
				[ ] 
				[ ] //Compare two table
				[ ] bTable=true
				[+] for (i=1;i<=iRowt;i++)
					[+] for (j=1;j<=iColumnt;j++)
						[ ] //If they are not the same
						[+] if arTableToCompare[i][j]!=arTableBase[i][j]
							[ ] iCompare=0
							[ ] iBase=0
							[ ] arTableToCompare[i][j]=Ltrim(arTableToCompare[i][j])
							[ ] arTableToCompare[i][j]=Rtrim(arTableToCompare[i][j])
							[ ] arTableBase[i][j]=Ltrim(arTableBase[i][j])
							[ ] arTableBase[i][j]=Rtrim(arTableBase[i][j])
							[ ] //Are they Numbers?
							[+] if (wVal(arTableBase[i][j],iBase)==true)&&(wVal(arTableToCompare[i][j],iCompare)==true)
								[+] if bNeglectNegative==true
									[ ] iBase=abs(iBase)
									[ ] iCompare=abs(iCompare)
								[+] if iBase==0
									[+] if iCompare==0
										[ ] break
									[+] else
										[ ] bTable=false
										[ ] print("In Row <{i}>, Column <{j}>, the base value is {arTableBase[i][j]}, the comparing value is {arTableToCompare[i][j]}")
										[ ] continue
								[+] if ((abs(iCompare-iBase))/(iBase))>rTolerance
									[ ] print("In Row <{i}>, Column <{j}>, the base value is {arTableBase[i][j]}, the comparing value is {arTableToCompare[i][j]}, the tolerance is {rTolerance}, the difference is {((abs(iCompare-iBase))/(iBase))}")
									[ ] bTable=false
							[+] else
								[ ] bTable=false
				[+] if bTable==true
					[ ] return true
				[+] else
					[ ] return false
		[+] boolean InputDataToWPFObj(string sComboBox_TextBox_CheckButton,string sItemName,string sInformationInOr_Check_Uncheck,string sGroupBoxWithNumber optional,int iCombinedBox_Adjustment optional,int iTargetCorrection optional,int iSearchMode optional)
			[ ] //Sample
			[ ] //InputDataToWPFObj("ComboBox","Duty","J/s","Utilities,2")
			[ ] //InputDataToWPFObj("CheckButton","Duty","Check")
			[ ] 
			[ ] //Sometimes, R&D use ridiculous way to define objects, which does not make sense for us to define framework. Here is a way to make it more straight forward to do input
			[ ] //ERR13  REF:=APMainFrame.inc=Other= InputData="
			[ ] //Definition
			[ ] string ss
			[ ] 
			[ ] window wWin,wItem
			[ ] int iTarget=1
			[ ] int iTable,iTime
			[ ] string sGroupBox=null
			[ ] list of WINDOW lwItem
			[ ] boolean bFindObj=false
			[ ] boolean bTable=false
			[ ] string sTable
			[+] //Determine SearchMode
				[ ] //1=normal mode 
				[ ] //2=Professional
				[ ] //3=Table Search
				[+] if iSearchMode==null
					[ ] iSearchMode=1
			[ ] 
			[ ] 
			[ ] //Treat Input data 
			[ ] sComboBox_TextBox_CheckButton=Lower(sComboBox_TextBox_CheckButton)
			[+] switch (sComboBox_TextBox_CheckButton)
				[ ] case "combobox"
				[ ] case "textbox"
				[ ] case "checkbutton"
				[+] default
					[ ] Log.Fail("//ERR8 Cannot recognize sComboBox_TextBox_CheckButton you entered. REF:=APMainFrame.inc=Other= InputData=")
					[ ] return false
			[ ] 
			[ ] 
			[ ] 
			[ ] //Where's the start point? Groupbox or not?
			[+] if APlus.SearchGroupBox(sGroupBoxWithNumber,wWin,sItemName)==false
				[ ] return false
			[ ] 
			[ ] 
			[ ] 
			[ ] //Find sItem-RadioButton
			[ ] bTable=false	
			[+] if sComboBox_TextBox_CheckButton=="checkbutton"
				[ ] //Check button
				[ ] lwItem=wWin.FindAll("//WPFRadioButton")
				[ ] bTable=false
				[+] for each wItem in lwItem
					[+] if MatchStr("*{sItemName}*",wItem.TextCapture())
						[ ] wWin=wItem
						[ ] bTable=true
						[ ] break
			[+] if bTable==true
				[+] if (iTargetCorrection==null)&&(sComboBox_TextBox_CheckButton=="checkbutton")
					[ ] iTargetCorrection=0
			[ ] 
			[ ] 
			[ ] //If cannot find RadioButton use Normal WPF Obj finding method
			[+] if bTable==false
				[ ] //Target Correction?
				[+] if iTargetCorrection==null
					[ ] iTargetCorrection=1
				[ ] 
				[+] switch iSearchMode
					[+] case 1
						[+] if iSearchMode==1
							[ ] lwItem=wWin.GetChildren()
							[+] for each wItem in lwItem
								[ ] 
								[ ] ss = wItem.TextCapture()
								[+] if MatchStr("*{sItemName}*",wItem.TextCapture())
									[ ] iTarget=iTarget+iTargetCorrection
									[ ] break
								[ ] iTarget++
							[+] if iTarget>Listcount(lwItem)
								[ ] bFindObj=null
								[ ] APlus.SearchObj(wWin,sItemName,bFindObj)
								[+] if bFindObj==false
									[ ] Log.Fail("ERR2: Fail to find target<{sItemName}>on screen.  REF:=APMainFrame.inc=Other= InputData=")
									[ ] return false
								[+] else
									[ ] wItem=wWin.GetParent()
									[ ] lwItem=wItem.GetChildren()
									[ ] iTarget=ListFind(lwItem,wWin)+iTargetCorrection+1
									[ ] wWin=lwItem[iTarget]
							[+] else
								[ ] wWin=lwItem[iTarget]
					[+] case 2
						[ ] bFindObj=null
						[ ] APlus.SearchObj(wWin,sItemName,bFindObj)
						[+] if bFindObj==false
							[ ] Log.Fail("ERR11: Fail to find target<{sItemName}>on screen.  REF:=APMainFrame.inc=Other= InputData=")
							[ ] return false
						[+] else
							[ ] wItem=wWin.GetParent()
							[ ] lwItem=wItem.GetChildren()
							[ ] iTarget=ListFind(lwItem,wWin)+iTargetCorrection
							[ ] wWin=lwItem[iTarget]
					[+] case 3
						[ ] bFindObj=null
						[ ] APlus.SearchObjWithinTable(wWin,sItemName,bFindObj)
						[+] if bFindObj==false
							[ ] Log.Fail("//ERR12 Fail to find target<{sItemName}>with table-searching mode REF:=APMainFrame.inc=Other= InputData=")
							[ ] return false
						[+] else
							[ ] print(wWin.TextCapture())
							[ ] print(wWin.GetClass())
							[ ] wItem=wWin.GetParent()
							[ ] print(wItem.TextCapture())
							[ ] print(wItem.GetClass())
							[ ] lwItem=wItem.FindAll("//WPFContentControl[@className='CellValuePresenter']")
							[ ] iTarget=ListFind(lwItem,wWin)+iTargetCorrection+1
							[ ] wWin=lwItem[iTarget]
			[ ] 
			[ ] 
			[ ] //Combined_box adjustment?
			[+] if iCombinedBox_Adjustment!=null
				[+] if wWin.Find("//WPFContentControl[@caption='*']").Exists()
					[ ] wWin=wWin.Find("//WPFContentControl[@caption='*']")
					[ ] lwItem=wWin.GetChildren()
					[ ] wWin=lwItem[iCombinedBox_Adjustment]
				[+] else
					[ ] Log.Fail("ERR6  Fail to do combined box adjustment REF:=APMainFrame.inc=Other= InputData=")
					[ ] return false
			[ ] 
			[ ] print(wWin)
			[ ] 
			[ ] 
			[ ] //Object Input/Selection
			[+] if wWin.Exists()
				[ ] wWin.Click()
			[+] else
				[ ] Log.Fail("ERR5  InputData=Fail to get Target window REF:=APMainFrame.inc=Other=   InputData=")
				[ ] return false
			[+] switch (sComboBox_TextBox_CheckButton)
				[+] case "combobox"
					[ ] wWin.DoubleClick()		
					[+] if FindWPFComboBox("//WPFComboBox[@automationId='PART_FocusSite']").Exists(10)
						[ ] sleep(0.5)
						[+] do 
							[ ] FindWPFComboBox("//WPFComboBox[@automationId='PART_FocusSite']").Select("{sInformationInOr_Check_Uncheck}")
						[+] except
							[ ] return false
					[+] else
						[ ] Log.Fail("ERR3:Fail to activate combobox REF:=APMainFrame.inc=Other= InputData=")
						[ ] return false
				[+] case "textbox"
					[+] if FindWPFTextBox("//WPFTextBox[@automationId='PART_TextBox']").Exists(2)
						[ ] wWin=FindWPFTextBox("//WPFTextBox[@automationId='PART_TextBox']")
						[ ] wWin.Click()
						[ ] sleep(0.8)
					[+] else if FindWPFTextBox("//WPFTextBlock[@automationId='TextBlock']").Exists(2)
						[ ] wWin=FindWPFTextBox("//WPFTextBlock[@automationId='TextBlock']")
						[ ] wWin.Click()
						[ ] sleep(0.8)
					[+] else
						[ ] wWin.DoubleClick()
						[ ] wWin=Desktop
					[ ] wWin.TypeKeys("<Ctrl-A><Delete>")
					[ ] wWin.TypeKeys("{sInformationInOr_Check_Uncheck}")
					[ ] wWin.TypeKeys("<Enter>")
				[+] case "checkbutton"
					[ ] sInformationInOr_Check_Uncheck=Lower(sInformationInOr_Check_Uncheck)
					[+] if wWin.FindWPFRadioButton("//WPFRadioButton").Exists()
						[ ] wWin=wWin.FindWPFRadioButton("//WPFRadioButton")
					[+] else if wWin.FindWPFCheckBox("//WPFCheckBox").Exists()
						[ ] wWin=wWin.FindWPFCheckBox("//WPFCheckBox")
					[+] else
						[ ] return false
					[+] switch (sInformationInOr_Check_Uncheck)
						[+] case "check"
							[ ] wWin.Check()
						[+] case "uncheck"
							[ ] wWin.UnCheck()
			[ ] return true
		[+] void SearchObjWithinTable(inout window wTarget,string sTarget,inout boolean bExit optional,int iTable optional)
			[ ] //Log.Fail("ERR1=APMainFrame.inc=SearchObjWithinTable=
			[ ] window wTable
			[ ] list of WINDOW lwTable
			[ ] boolean bTable=false
			[+] if iTable!=null
				[ ] wTable=wTarget.FindWPFItemsControl("//WPFItemsControl[@className='RecordListControl'][{iTable}]")
				[+] if wTable.Exists()
					[ ] wTarget=wTable
				[+] else
					[ ] bTable=false
			[+] else
				[ ] lwTable=wTarget.FindAll("//WPFItemsControl[@className='RecordListControl']")
				[+] for each wTable in lwTable
					[+] if MatchStr("*{sTarget}*",wTable.TextCapture())
						[ ] wTarget=wTarget
						[ ] bTable=true
			[+] if bTable==false
				[ ] Log.Fail("ERR1=APMainFrame.inc=SearchObjWithinTable=Fail to find table")
				[ ] return
			[+] if wTarget.FindWPFContentControl("//WPFContentControl[@className='CellValuePresenter' and @caption='*{sTarget}*']").Exists()
				[ ] wTarget=wTarget.FindWPFContentControl("//WPFContentControl[@className='CellValuePresenter' and @caption='*{sTarget}*']")
				[ ] bExit=true
			[+] else
				[ ] bExit=false
			[ ] 
		[ ] 
		[ ] 
		[ ] //==============Appended By Susan Shi===========
		[ ] //Activated EDR
		[+] void VerifySampleModelsNumber(integer iSimpleModels)
			[ ] //integer inumshown=Val(this.Find("//WPFTextBlock[7]").sCaption)
			[ ] integer inumshown=Val(this.grpModelStatus.Find("//WPFTextBlock[5]").sCaption)
			[ ] print(inumshown)
			[ ] //integer tablerow=ListCount(wExchangerSummaryTable.dgTable.FindAll("/WPFDataGridRow"))
			[ ] //print(tablerow)
			[+] if(inumshown==iSimpleModels)
				[ ] Log.Pass("The number shown for the sample models is same as the Aspen Plus contain.")
			[+] else
				[ ] Log.Fail("The number shown for the sample models is{inumshown} and Aspen Plus contains {iSimpleModels}. They're not the same.")
			[ ] 
		[+] int GetRigorousModelsNumber()
			[ ] integer inumshown=Val(this.grpModelStatus.Find("//WPFTextBlock[3]").sCaption)
			[ ] return inumshown
		[+] list of integer GetOperationRiskStatusNumber(string sStatus)
			[ ] list of integer inum
			[+] switch(sStatus)
				[+] case "OK"
					[ ] ListAppend(inum,Val(this.grpOperationalRisk.Find("//WPFTextBlock[3]").sCaption))
				[+] case "Warning"
					[ ] ListAppend(inum,Val(this.grpOperationalRisk.Find("//WPFTextBlock[5]").sCaption))
				[+] case "Risk"
					[ ] ListAppend(inum,Val(this.grpOperationalRisk.Find("//WPFTextBlock[7]").sCaption))
				[+] case "Simple"
					[ ] ListAppend(inum,Val(this.grpOperationalRisk.Find("//WPFTextBlock[9]").sCaption))
			[ ] return inum
		[-] boolean GetModelType(string sModelName)
			[ ] // Status of 'Shortcut' & 'Detailed', returns true
			[ ] integer i,iCount
			[ ] string stree=""
			[ ] this.SetActive()
			[ ] this.trvPartTree.ScrollToPosition(0,O_HORIZONTAL)
			[ ] sleep(1)
			[ ] this.trvPartTree.ScrollToPosition(0,O_VERTICAL)
			[ ] sleep(1)
			[ ] //this.trvPartTree.CollapseAll()
			[ ] this.Find("//WPFTreeView[@automationId='Part_Tree']/WPFTreeViewItem[@caption='Blocks']").Collapse()
			[ ] sleep(1)
			[-] if(StrPos(".",sModelName)==0)
				[ ] this.trvPartTree.Expand("/Blocks")
				[ ] this.trvPartTree.Click("/Blocks/{sModelName}")
			[-] else
				[ ] list of string lsModel=SplitStringToList(sModelName)
				[ ] iCount=ListCount(lsModel)
				[-] for(i=1;i<iCount;i++)
					[ ] stree=stree+"/Blocks/"+lsModel[i]
				[ ] stree=stree+"/Blocks"
				[ ] 
				[+] // do
					[ ] // this.trvPartTree.Expand("{stree}")
					[ ] // sleep(3)
					[ ] // this.trvPartTree.Expand("{stree}")
				[+] // except
					[ ] // ExceptClear()
				[ ] i=0
				[-] if((!this.Find("//WPFTreeView[@automationId='Part_Tree']/WPFTreeViewItem[@caption='Blocks']").IsExpanded) && i<5)
					[ ] sleep(3)
					[ ] this.SetActive()
					[ ] this.trvPartTree.Expand("{stree}")
					[ ] sleep(3)
					[ ] i++
				[+] if(i==5)
					[ ] Log.Fail("Could not operate the treeview item successfully.")
				[ ] 
				[ ] 
				[ ] stree=stree+"/"+lsModel[iCount]
				[ ] //print("The hierarchy is: "+stree)
				[ ] 
				[+] for(i=1;i<=100;i++)
					[ ] APlus.trvPartTree.ScrollToPosition(10*i,O_VERTICAL)
					[ ] sleep(1)
					[+] do
						[ ] APlus.trvPartTree.Select("{stree}")
						[ ] sleep(3)
						[ ] APlus.trvPartTree.Select("{stree}")
						[ ] break
					[+] except
						[ ] ExceptClear()
				[ ] 
				[ ] 
				[ ] //this.trvPartTree.Click("{stree}")
			[ ] sleep(5)
			[ ] this.SetTab("Specifications")
			[ ] sleep(1)
			[+] if(this.rdbDetailed.IsChecked || this.rdbShortcut.IsChecked)
				[ ] return true
			[+] else
				[ ] return false
			[ ] 
		[+] list of string GetAllModels()
			[ ] integer i
			[ ] window wmodel
			[ ] list of string lsModels
			[ ] APlus.trvPartTree.ExpandAll()
			[+] for(i=1;i<=5;i++)
				[+] do
					[ ] list of window lwChild=(APlus.Find("//WPFTreeViewItem[@caption='Blocks'][{i}]")).Items
					[+] for each wmodel in lwChild
						[+] do
							[ ] APlus.trvPartTree.Expand("/Blocks/*{wmodel.sCaption}*/Blocks")
						[+] except
							[ ] ExceptClear()
							[ ] //print(wmodel.sCaption)
							[ ] ListAppend(lsModels,wmodel.sCaption)
				[+] except
					[ ] ExceptClear()
					[ ] break
			[ ] return lsModels
		[+] list of string GetModelsInABlock(string spath)
			[ ] list of window lwModels
			[ ] list of string lsModels
			[ ] window wModel
			[ ] RECT r
			[ ] integer i,j
			[ ] this.SetActive()
			[ ] // this.trvPartTree.ScrollToPosition(0,O_HORIZONTAL)
			[ ] // sleep(1)
			[ ] this.trvPartTree.ScrollToPosition(0,O_VERTICAL)
			[ ] sleep(1)
			[ ] this.trvPartTree.ScrollToPosition(0,O_HORIZONTAL)
			[ ] sleep(1)
			[ ] this.trvPartTree.Expand("{spath}")
			[ ] sleep(3)
			[+] for(i=1;i<=100;i++)
				[ ] APlus.trvPartTree.ScrollToPosition(10*i,O_VERTICAL)
				[ ] sleep(1)
				[+] do
					[ ] APlus.trvPartTree.Select("{spath}")
					[ ] sleep(3)
					[ ] APlus.trvPartTree.Select("{spath}")
					[ ] break
				[+] except
					[ ] ExceptClear()
			[ ] Print(this.trvPartTree.SelectedItemPath)
			[ ] lwModels=(APlus.trvPartTree.SelectedItem).Items
			[ ] sleep(1)
			[ ] this.trvPartTree.Collapse("/Blocks/")
			[+] for each wModel in lwModels
				[ ] //print(wModel.sCaption)
				[ ] ListAppend(lsModels,wModel.sCaption)
			[ ] return lsModels
		[+] string GetModelStatusInConsole(string sModelName)
			[+] if(GetModelType(sModelName))
				[+] if(this.grpRigrousMode.rdAirCooler.IsChecked)
					[ ] return "AirCooled"
				[+] else if(this.grpRigrousMode.rdShellTube.IsChecked)
					[ ] return "Shell&Tube"
				[+] else
					[ ] return "Plate"
			[+] else
				[ ] return "Convert"
		[+] int GetModelCountByStatus(list of string sStatus)
			[ ] integer i,iConvert=0, iPlate=0,iAir=0, iST=0,iCount=0
			[ ] window wmodel
			[ ] string sState
			[ ] APlus.trvPartTree.ExpandAll()
			[+] for(i=1;i<=5;i++)
				[+] do
					[ ] list of window lwChild=(APlus.Find("//WPFTreeViewItem[@caption='Blocks'][{i}]")).Items
					[+] for each wmodel in lwChild
						[+] do
							[ ] APlus.trvPartTree.Expand("/Blocks/*{wmodel.sCaption}*/Blocks")		
						[+] except		//no sub blocks
							[ ] ExceptClear()
							[ ] //print(wmodel.sCaption)
							[ ] APlus.trvPartTree.Click("/Blocks/*{wmodel.sCaption}")
							[ ] sleep(5)
							[ ] this.SetTab("Specifications")
							[ ] sleep(1)
							[+] if(this.grpCalculation.rdRigorous.IsChecked)
								[+] if(this.grpRigrousMode.rdAirCooled.IsChecked())
									[ ] iAir++
								[+] else if(this.grpRigrousMode.rdShellTube.IsChecked())
									[ ] iST++
								[+] else
									[ ] iPlate++
							[+] else
								[ ] iConvert++
				[+] except
					[ ] ExceptClear()
					[ ] break
			[+] if(ListFind(sStatus,"Plate")>0)
				[ ] iCount+=iPlate
			[+] if(ListFind(sStatus,"Shell&Tube")>0)
				[ ] iCount+=iST
			[+] if(ListFind(sStatus,"AirCooled")>0)
				[ ] iCount+=iST
			[+] if(ListFind(sStatus,"Convert")>0)
				[ ] iCount+=iConvert
			[ ] return iCount
		[+] void CloseDocument(boolean bNeedSave optional)
			[+] if(bNeedSave==null)
				[ ] bNeedSave=false
			[ ] this.btnCloseDocument.Click()
			[ ] sleep(1)
			[+] if(wAspenPlusSaveWarning.Exists(3))
				[ ] wAspenPlusSaveWarning.SetActive()
				[+] if(bNeedSave)
					[ ] //Will do further
				[+] else
					[ ] wAspenPlusSaveWarning.btnNo.Click()
		[-] list of string GetHeatResults(string sModel, boolean bIgnoreFlag optional)
			[ ] integer iCount,i
			[ ] string sPath="",temp
			[ ] list of string lsResults,lsModel
			[ ] boolean bFlag=this.GetModelType(sModel)
			[ ] lsModel=SplitStringToList(sModel)
			[ ] iCount=ListCount(lsModel)
			[+] for(i=1;i<=iCount;i++)
				[ ] sPath=sPath+"/Blocks/"+lsModel[i]
			[ ] this.SetActive()
			[ ] this.trvPartTree.Expand("{sPath}")
			[ ] this.trvPartTree.Click("{sPath}/Thermal Results")
			[ ] sleep(2)
			[ ] this.SetTab("Summary")
			[ ] sleep(1)
			[ ] // get Hot Temp
			[-] if(GetFieldContent(5)==GetFieldContent(7))
				[ ] temp=Str(Abs(val(GetFieldContent(4))-val(GetFieldContent(6))),5,6)
				[ ] ListAppend(lsResults,temp)
				[ ] ListAppend(lsResults,GetFieldContent(7))
			[ ] //get Cold Temp
			[-] if(GetFieldContent(19)==GetFieldContent(21))
				[ ] temp=Str(Abs(val(GetFieldContent(18))-val(GetFieldContent(20))),5,6)
				[ ] ListAppend(lsResults,temp)
				[ ] ListAppend(lsResults,GetFieldContent(21))
			[ ] //get Duty
			[ ] Clipboard.SetText()
			[ ] APlus.SetActive()
			[ ] this.Find("//WPFControl[@automationId='PART_editControl'][30]").Click()
			[ ] //this.TypeKeys("<Ctrl-A><Ctrl-C>")
			[ ] sleep(4)
			[ ] print(this.Find("//WPFControl[@automationId='PART_editControl'][30]/WPFTextBox").Text)
			[ ] print(GetFieldContent(31))
			[ ] ListAppend(lsResults,this.Find("//WPFControl[@automationId='PART_editControl'][30]/WPFTextBox").Text)
			[ ] ListAppend(lsResults,GetFieldContent(31))
			[ ] //get Area
			[ ] this.SetTab("Exchanger Details")
			[ ] sleep(1)
			[-] if (bIgnoreFlag==true)
				[ ] bFlag = false
			[-] if(!bFlag)
				[ ] ListAppend(lsResults,GetFieldContent(5))
				[ ] ListAppend(lsResults,GetFieldContent(6))
			[-] else
				[ ] ListAppend(lsResults,GetFieldContent(3))
				[ ] ListAppend(lsResults,GetFieldContent(4))
			[ ] return lsResults
		[-] list of string GetSTResults(string sModel)
			[ ] integer iCount,i
			[ ] string sPath="",temp
			[ ] list of string lsResults,lsModel
			[ ] lsModel=SplitStringToList(sModel)
			[ ] iCount=ListCount(lsModel)
			[-] for(i=1;i<=iCount;i++)
				[ ] sPath=sPath+"/Blocks/"+lsModel[i]
			[ ] trvPartTree.Expand("{sPath}")
			[ ] this.trvPartTree.Click("{sPath}/Thermal Results")
			[ ] //this.trvPartTree.Select("{sPath}/Thermal Results")
			[ ] //sleep(2)
			[ ] //get Surface Area
			[ ] // // // this.SetTab("Summary")
			[ ] // // // sleep(2)
			[ ] // // // temp=GetFieldContent(1)
			[ ] // // // ListAppend(lsResults,SubStr(temp,StrPos("-",temp)+1))
			[ ] this.SetTab("Exchanger Details")
			[ ] sleep(1)
			[ ] ListAppend(lsResults,GetFieldContent(5))
			[ ] ListAppend(lsResults,GetFieldContent(6))
			[ ] //get Total Heat Load
			[ ] ListAppend(lsResults,GetFieldContent(1))
			[ ] ListAppend(lsResults,GetFieldContent(2))
			[ ] this.trvPartTree.Click("{sPath}/EDR Browser")
			[ ] sleep(5)
			[ ] // this.areaGreyForm.txtSubPages.Click()
			[ ] // this.areaGreyForm.txtSubPages.TypeKeys("<Down 12>",3)
			[ ] //get TEMA Type
			[ ] temp=SubStr(this.Find("//WPFComboBox[@automationId='cbList'][2]").TextCapture(),1,1)
			[ ] temp=temp+SubStr(this.Find("//WPFComboBox[@automationId='cbList'][3]").TextCapture(),1,1)
			[ ] temp=temp+SubStr(this.Find("//WPFComboBox[@automationId='cbList'][4]").TextCapture(),1,1)
			[ ] ListAppend(lsResults, temp)
			[ ] //get Shells in Series
			[ ] ListAppend(lsResults, this.Find("//WPFTextBox[@automationId='tbEdit'][10]").TextCapture())
			[ ] //get Shells in Parallel
			[ ] this.Find("//WPFTextBox[@automationId='tbEdit'][10]").Click()
			[ ] this.TypeKeys("<Tab>",1)
			[ ] ListAppend(lsResults, this.Find("//WPFTextBox[@automationId='tbEdit'][11]").TextCapture())
			[ ] return lsResults
		[+] list of string GetAirCooledResults(string sModel)
			[ ] integer iCount,i
			[ ] string sPath="",temp
			[ ] list of string lsResults,lsModel
			[ ] lsModel=SplitStringToList(sModel)
			[ ] iCount=ListCount(lsModel)
			[+] for(i=1;i<=iCount;i++)
				[ ] sPath=sPath+"/Blocks/"+lsModel[i]
			[ ] this.trvPartTree.Expand("{sPath}")
			[ ] this.trvPartTree.Click("{sPath}/Thermal Results")
			[ ] sleep(2)
			[ ] //get Surface Area
			[ ] this.SetTab("Exchanger Details")
			[ ] sleep(2)
			[ ] ListAppend(lsResults,GetFieldContent(5))
			[ ] ListAppend(lsResults,GetFieldContent(6))
			[ ] sleep(1)
			[ ] //get Total Heat Load
			[ ] ListAppend(lsResults,GetFieldContent(1))
			[ ] ListAppend(lsResults,GetFieldContent(2))
			[ ] //get Fan Configuration
			[ ] this.trvPartTree.Click("{sPath}/EDR Browser")
			[ ] sleep(2)
			[ ] temp=this.Find("//WPFUserControl[@automationId='DraftType']/WPFComboBox[@automationId='cbList']").TextCapture()
			[ ] ListAppend(lsResults,temp)
			[ ] //get Bays per Unit
			[ ] ListAppend(lsResults, this.Find("//WPFUserControl[@automationId='BayPar']/WPFTextBox[@automationId='tbEdit']").TextCapture())
			[ ] //get Bundles per Bay
			[ ] ListAppend(lsResults, this.Find("//WPFUserControl[@automationId='BundPar']/WPFTextBox[@automationId='tbEdit']").TextCapture())
			[ ] //get Fans per Bay
			[ ] ListAppend(lsResults, this.Find("//WPFUserControl[@automationId='FanPerBay']/WPFTextBox[@automationId='tbEdit']").TextCapture())
			[ ] return lsResults
		[+] list of string GetPlateResults(string sModel)
			[ ] integer iCount,i
			[ ] string sPath="",temp
			[ ] list of string lsResults,lsModel
			[ ] lsModel=SplitStringToList(sModel)
			[ ] iCount=ListCount(lsModel)
			[+] for(i=1;i<=iCount;i++)
				[ ] sPath=sPath+"/Blocks/"+lsModel[i]
			[ ] this.trvPartTree.ScrollToPosition(50,O_VERTICAL)
			[ ] sleep(1)
			[ ] this.trvPartTree.Expand("{sPath}")
			[ ] this.trvPartTree.Click("{sPath}/Thermal Results")
			[ ] sleep(2)
			[ ] //get Surface Area
			[ ] this.SetTab("Exchanger Details")
			[ ] sleep(2)
			[ ] ListAppend(lsResults,GetFieldContent(5))
			[ ] ListAppend(lsResults,GetFieldContent(6))
			[ ] sleep(1)
			[ ] //get Total Heat Load
			[ ] ListAppend(lsResults,GetFieldContent(1))
			[ ] ListAppend(lsResults,GetFieldContent(2))
			[ ] this.trvPartTree.Click("{sPath}/EDR Browser")
			[ ] sleep(2)
			[ ] //get Exchanger in Parallel
			[ ] ListAppend(lsResults, this.Find("//WPFUserControl[@automationId='ExchangerNumber']/WPFTextBox[@automationId='tbEdit']").TextCapture())
			[ ] return lsResults
		[+] boolean  addBlock( string section, string blockId, string blockType)
			[ ] integer iTotalRowNum
			[ ] string sActId,sActType
			[+] do
				[ ] this.trvPartTree.expand("Flowsheet/Section/{section}")
				[ ] this.trvPartTree.click("Flowsheet/Section/{section}")
			[+] except
				[ ] Log.Error("Specified Flowsheet section({section}) doesn't exist")
				[ ] return false
			[ ] iTotalRowNum=ListCount(APlus.dgGrid.FindAll("//WPFContentControl[@className='CellValuePresenter']"))
			[ ] APlus.dgGrid.Find("//WPFContentControl[@className='CellValuePresenter'][{iTotalRowNum-1}]").Click()
			[ ] APlus.TypeKeys("{blockId}<Enter>")
			[ ] sleep(1)
			[ ] APlus.dgGrid.Find("//WPFContentControl[@className='CellValuePresenter'][{iTotalRowNum}]").Click()
			[ ] APlus.TypeKeys("{blockType}<Enter>")
			[ ] sleep(1)
			[ ] sActId=APlus.dgGrid.Find("//WPFContentControl[@className='CellValuePresenter'][{iTotalRowNum-1}]").sCaption
			[ ] sActType=APlus.dgGrid.Find("//WPFContentControl[@className='CellValuePresenter'][{iTotalRowNum}]").sCaption
			[+] if(sActId==blockId && sActType==blockType)
				[ ] return true
			[+] else
				[ ] return false
		[+] list of string GetModelsInSummaryTable()
			[ ] list of window lw
			[ ] integer i
			[ ] list of string lsModels
			[ ] string sTemp1,sTemp2
			[ ] APlus.SetActive()
			[ ] lw=APlus.dgGeneralTable.FindAll("/WPFDataGridRow")
			[+] for(i=1;i<=ListCount(lw);i++)
				[+] if(i/15==0)
					[ ] APlus.dgGeneralTable.Find("/WPFDataGridRow[{i}]//WPFDataGridCell[2]").Click()
					[ ] APlus.TypeKeys("<Down 15>,1")
				[ ] sTemp1=APlus.dgGeneralTable.Find("/WPFDataGridRow[{i}]//WPFDataGridCell[1]").TextCapture()
				[ ] sTemp2=APlus.dgGeneralTable.Find("/WPFDataGridRow[{i}]//WPFDataGridCell[2]").TextCapture()
				[ ] 
				[ ] sTemp1 = StrTran(sTemp1,"	","")
				[ ] ListAppend(lsModels,sTemp2+"."+sTemp1)
			[ ] return lsModels
		[+] boolean IsOperationalRiskBlank()
			[ ] list of window lw
			[ ] integer i
			[ ] APlus.SetActive()
			[ ] lw=APlus.dgGeneralTable.FindAll("/WPFDataGridRow")
			[+] for(i=1;i<=ListCount(lw);i++)
				[+] if(i/15==0)
					[ ] APlus.dgGeneralTable.Find("/WPFDataGridRow[{i}]//WPFDataGridCell[2]").Click()
					[ ] APlus.TypeKeys("<Down 15>,1")
				[+] if(APlus.dgGeneralTable.Find("/WPFDataGridRow[{i}]//WPFDataGridCell[4]").TextCapture()!="")
					[ ] break
			[+] if(i>ListCount(lw))
				[ ] return true			//blak
			[+] else
				[ ] return false
		[+] void switchView(string sViewName)
			[ ] this.SetActive()
			[ ] this.tbView.Click()
			[ ] sleep(2)
			[ ] this.grpLayout.miSwitchLayout.Click()
			[ ] sleep(1)
			[ ] APlus.grpLayout.Find("//WPFMenuItem[@caption='{sViewName}']").Click()
			[ ] sleep(20)
		[ ] //==============Appended Done===========
		[ ] 
		[ ] 
		[ ] //Obselete Methods
		[+] void InputTextInTextBox(string sAttribute, string sValue, string sText, int iIndex optional)  				 //Obselete by wcAPWPFTextBox
			[ ] //Description:
			[ ] //APlus.InputTextInTextBox("automationId","PART_editControl","11",3)
			[ ] // use input value to TextBox  in A+ user interface.
			[ ] //sAttribute:  such as caption, automationid , classtype...
			[ ] //sValue : the actual value of caption, automationid , className...
			[ ] //sText: the  value to be input.
			[ ] //index :the index for sValue; e.g.  "2"  in the @className='PART_editControl'][2]"
			[ ] 
			[ ] window TextBox
			[+] if(iIndex == null)
				[ ] TextBox = this.Find("//WPFControl[@{sAttribute}='{sValue}']")
				[ ] TextBox.Click()
				[ ] sleep(0.5)
				[+] do
					[ ] this.Find("//WPFTextBox[@automationId='PART_TextBox']").SetText("{sText}")
				[+] except
					[ ] this.TypeKeys("{sText}<enter>",0.2)
			[+] else
				[ ] TextBox = this.Find("//WPFControl[@{sAttribute}='{sValue}'][{iIndex}]")
				[ ] TextBox.Click()
				[ ] sleep(0.5)
				[+] do
					[ ] this.Find("//WPFTextBox[@automationId='PART_TextBox']").SetText("{sText}")
				[+] except
					[ ] this.TypeKeys("{sText}<enter>",0.2)
					[ ] 
			[ ] 
		[+] void SelectItemInComboBox(string sAttribute, string sValue, string sItemName, int iIndex optional) 	//Obselete by wcAPWPFComboBox
			[ ] //Description:
			[ ] //APlus.SelectItemInComboBox("automationId","PART_editControl","11",3)
			[ ] // use to select combox item in A+ user interface.
			[ ] //sAttribute:  such as caption, automationid , classtype...
			[ ] //sValue : the actual value of caption, automationid , classtype...
			[ ] //sItemName: the  item to be selected.
			[ ] //index :the index for sValue; e.g.  "2"  in the @className='AesXamComboEdit'][2]"
			[ ] 
			[ ] window comboBox
			[+] if(iIndex == null)
				[ ] comboBox = this.Find("//WPFControl[@{sAttribute}='{sValue}']")
				[ ] comboBox.DoubleClick()
				[ ] sleep(0.5)
				[+] do
					[ ] comboBox.SetProperty("MaxDropDownHeight",650)
					[ ] this.Find("//WPFComboBoxItem[@caption='{sItemName}']").Select()
					[ ] this.Find("//WPFComboBoxItem[@caption='{sItemName}']").Click()
					[ ] this.TypeKeys("<Enter>")
				[+] except
					[ ] this.TypeKeys("{sItemName}<enter>",0.2)
			[+] else
				[ ] comboBox = this.Find("//WPFControl[@{sAttribute}='{sValue}'][{iIndex}]")
				[ ] comboBox.DoubleClick()
				[ ] sleep(0.5)
				[+] do
					[ ] comboBox.SetProperty("MaxDropDownHeight",650)
					[ ] this.Find("//WPFComboBoxItem[@caption='{sItemName}']").Select()
					[ ] this.Find("//WPFComboBoxItem[@caption='{sItemName}']").Click()
					[ ] this.TypeKeys("<Enter>")
				[+] except
					[ ] this.TypeKeys("{sItemName}<enter>",0.2)
					[ ] 
			[ ] 
		[+] anytype getcbo( anytype outerBox )																		//Obselete by wcAPWPFComboBox
			[ ] //Why is Combobox not a class when using it as a function return?
			[ ] //suggest use wilclass wcAPWPFComboBox to define cbo
			[ ] outerBox.setFocus()
			[ ] return this.find("//WPFComboBox[@automationId='PART_FocusSite']")
			[ ] 
			[ ] 
			[ ] 
		[+] VerifyControlPanelContainsValues_old(list of string lstExpectResults)  								//Obselete by VerifyControlPanelContainsValues(list of string lstExpectedResults, boolean breakUp optional, boolean printCP optional) ?
			[ ] list of string lstText = this.rtxtMessageView.GetText()
			[ ] integer i=1, j=1,iCount=0
			[ ] handle hFile = FileOpen("C:\temp.txt",FM_WRITE)
			[+] for(i=1;i<=ListCount(lstText);i++)
				[ ] FileWriteLine(hFile,lstText[i])
			[ ] FileClose(hFile)
			[ ] string sLine
			[ ] hFile = FileOpen ("C:\temp.txt", FM_READ)
			[+] while (FileReadLine (hFile, sLine))
				[ ] sLine = trim(sLine)
				[+] if(j<=ListCount(lstExpectResults))
					[+] if(MatchStr("*{lstExpectResults[j]}*",sLine))
						[ ] Log.Message("Find {lstExpectResults[j]}")
						[ ] j++
						[ ] iCount++
			[+] if(iCount>=ListCount(lstExpectResults))
				[ ] Log.Pass("Get all of the results in Control panel successfully.")
			[+] else
				[ ] Log.Error("Didn't get all of the command results in Control panel.")
				[ ] 
			[ ] FileClose(hFile)
		[+] string ListText(int iCell, int iCase)         //  ???		
			[ ] //This function can be used to get the text from multiple sources. Which source is determined by a switch. 
			[ ] // User must create a case and define the source to use the function. When calling the function, specify the case. 
			[ ] string sString
			[+] switch(iCase)
				[+] case 1
					[ ] //Used to get contents of "EO Configuration / EO Variables" sheet
					[ ] APlus.Find("//WPFDataGridCell[@className='GridControlCell'][{iCell}]").SetFocus()
					[ ] Sleep(0.5)
					[ ] sString = APlus.Find("//WPFDataGridCell[@className='GridControlCell'][{iCell}]").TextCapture()
				[+] case 2
					[ ] //Used to get contents of "Flowsheeting Options / Measurement / C2MEAS" results sheet
					[ ] APlus.Find("//WPFControl[@className='AesXamValueEdit'][{iCell}]/WPFTextBlock").SetFocus()
					[ ] Sleep(0.5)
					[ ] sString=APlus.Find("//WPFControl[@className='AesXamValueEdit'][{iCell}]/WPFTextBlock").GetCaption()
			[ ] return sString
		[ ] 
		[ ] 
	[ ] 
	[ ] 
[+] // Other winclass
	[+] winclass wcAPDataGrid  : WPFControl
		[ ] locator "//WPFControl[@automationId='PART_DataGrid']"
		[ ] tag ""
		[+] WPFContentControl Cell1
			[ ] locator "//WPFContentControl[@className='CellValuePresenter'][1]"
			[+] WPFControl EditValue
				[ ] locator "//WPFControl[@className='AesXamValueEdit'][1]"
		[+] WPFContentControl Cell2
			[ ] locator "//WPFContentControl[@className='CellValuePresenter'][2]"
			[+] WPFControl EditValue
				[ ] locator "//WPFControl[@className='AesXamValueEdit'][1]"
		[+] WPFContentControl Cell3
			[ ] locator "//WPFContentControl[@className='CellValuePresenter'][3]"
			[+] WPFControl EditValue
				[ ] locator "//WPFControl[@className='AesXamValueEdit'][1]"
		[+] WPFDataGridCell Cell4
			[ ] locator "//WPFDataGridCell[@className='GridControlCell'][4]"
		[+] WPFDataGridCell Cell5
			[ ] locator "//WPFDataGridCell[@className='GridControlCell'][5]"
		[+] WPFDataGridCell Cell6
			[ ] locator "//WPFDataGridCell[@className='GridControlCell'][6]"
		[+] WPFDataGridCell Cell7
			[ ] locator "//WPFDataGridCell[@className='GridControlCell'][7]"
		[+] WPFDataGridCell Cell17
			[ ] locator "//WPFDataGridCell[@className='GridControlCell'][17]"
		[+] WPFDataGridCell Cell165
			[ ] locator "//WPFDataGridCell[@className='GridControlCell'][165]"
		[+] WPFDataGridCell Cell43
			[ ] locator "//WPFDataGridCell[@className='GridControlCell'][43]"
		[ ] 
		[+] SetCellData(INT Column, INT Row,STRING str, BOOLEAN bVerify optional)
			[+] //Description
				[ ] // SetCellData(0,2,"45"):  set data for position which is  the first column, the third row 
				[ ] // SetCellData(2,0,"45"):  set data for position which is the third column, the first row.
			[ ] 
			[ ] this.TypeKeys("<Ctrl-End>")
			[ ] this.TypeKeys("<Ctrl-Home>")
			[ ] sleep(1)
			[+] if(Column!=0)
				[ ] this.TypeKeys("<Right {Column}>")
			[+] else
				[ ] 
			[+] if(Row!=0)
				[ ] this.TypeKeys("<Down {Row}>")
			[+] else 
				[ ] 
			[+] if(str != null)
				[ ] //this.TypeKeys("{str}<Enter>")
				[+] list of STRING lststr = {...}
					[ ] str
				[ ] Clipboard.SetText(lststr)
				[ ] this.TypeKeys("<Ctrl-V>")
				[ ] this.TypeKeys("<Enter>")
				[ ] sleep(2)
				[ ] this.Setfocus()
				[+] if (bVerify!=null && bVerify==true)
					[ ] string sValue =this.GetCellValue(Column,Row)
					[+] if(Lower(str) == Lower(sValue))
						[ ] Log.Pass("Value modifies to {str} Pass.")
					[+] else
						[ ] Log.Error("Value modifies to {str} Fail, actually to {sValue}.")
			[ ] 
		[+] string GetCellValue(INT Column, INT Row)
			[+] //Description
				[ ] // GetCellValue(0,2,"45"):  get data for position which is  the first column, the third row 
				[ ] // GetCellValue(2,0,"45"):  get data for position which is the third column, the first row.
			[ ] this.TypeKeys("<Ctrl-End>")
			[ ] this.TypeKeys("<Ctrl-Home>")
			[ ] sleep(1)
			[ ] 
			[ ] // int i
			[+] // for i=1 to row-1 step 1
				[ ] // this.TypeKeys("<Down>")
				[ ] // sleep(0.5)
			[+] // for i=1 to coloumn-1 step 1
				[ ] // this.TypeKeys("<Right>")
				[ ] // sleep(0.5)
				[+] if(Column!=0)
					[ ] this.TypeKeys("<Right {Column}>")
				[+] else
					[ ] 
				[+] if(Row!=0)
					[ ] this.TypeKeys("<Down {Row}>")
				[+] else 
					[ ] 
				[ ] 
			[ ] Clipboard.SetText()
			[ ] this.TypeKeys("<Ctrl-C> 5")
			[ ] list lstStr = Clipboard.GetText()
			[ ] return lstStr[1]
		[+] SetCellValue(int Record,int Cell,string sValue)
			[ ] //Created by Weiwei Wu
			[ ] //Created it because setcelldata wont' work with the tables in properties->trvtreeview/Regression/Input
			[ ] list of WINDOW lwTable
			[ ] window wTable
			[ ] wTable=this.FindWPFItemsControl("//WPFItemsControl[@className='RecordListControl']")
			[+] do
				[ ] wTable.FindWPFContentControl("//WPFControl[@className='DataRecordPresenter'][{Record}]//WPFContentControl[@className='CellValuePresenter'][{Cell}]").TypeKeys("{sValue}<Enter>",0.1)
			[+] except
				[ ] Log.Fail("Fail to enter data into datagrid")
		[+] int GetRowCount()
			[ ] Clipboard.SetText()
			[ ] this.TypeKeys("<Ctrl-A 2> 2")
			[ ] this.TypeKeys("<Ctrl-C 2>")
			[ ] list lstStr = Clipboard.GetText()
			[ ] int rowCount = ListCount(lstStr) - 1
			[ ] return rowCount
		[+] string GetEndCellValue()
			[ ] this.TypeKeys("<Ctrl-End 2>")
			[ ] Clipboard.SetText()
			[ ] glWaitForMouseIdle()
			[ ] this.TypeKeys("<Ctrl-C> 2")
			[ ] list lstStr = Clipboard.GetText()
			[ ] return lstStr[1]
		[ ] 
		[ ] 
	[+] winclass wcOpenDialogBox : DialogBox
		[ ] locator "Open"
		[+] StaticText FileName
			[ ] locator "File name:"
		[+] ComboBox FileNameComboBox
			[ ] locator "File name:"
		[+] TextField FileNameTextField
			[ ] locator "File name:"
		[+] StaticText FilesOfType
			[ ] locator "Files of type:"
		[+] ComboBox FilesOfTypeComboBox
			[ ] locator "[@caption='Files of type:' or @caption='File name:'[2]] "
		[+] PushButton Open
			[ ] locator "Open"
		[+] PushButton Cancel
			[ ] locator "Cancel"
		[ ] 
		[+] void OpenFile(STRING sFile)
			[ ] this.SetActive()
			[ ] this.FileNameComboBox.SetText(sFile)
			[ ] this.Open.Click()
		[ ] 
	[+] winclass wcAPCongurationTester			:	MainWin
		[ ] tag "Database Configuration Tester"
		[ ] const sCmdLine =sAPED
		[+] CustomWin  CTW
			[ ] tag "[WindowsForms10.Window.8.app.0.*]"
			[+] CustomWin  btnStart
				[ ] multitag "[WindowsForms10.BUTTON.app.0.*]Start"
			[+] CustomWin  btnOK
				[ ] multitag "[WindowsForms10.BUTTON.app.0.*]OK"
			[ ] 
		[ ] 
		[ ] //method
		[+] VOID Configure()
			[ ] //Configure Aspen Properties Configuration Tester
			[ ] 
			[ ] this.Invoke()
			[ ] glWaitForActive(this,2)
			[ ] this.setActive()
			[ ] this.CTW.btnStart.Click()
			[ ] // glWaitForExists(this.CTW.btnOK,2)
			[+] if(this.CTW.btnOK.Exists(200))
				[ ] this.CTW.btnOK.click()
				[ ] Log.Pass("Successfully configure Aspen Properties Configuration Tester")
			[ ] 
	[+] winclass wcSimualtionEngineWindow	:	MainWin
		[ ] tag "[DialogBox]*Customize Aspen Plus*"
		[ ] const sCmdLine = 'C:\Windows\System32\cmd.exe /k "{sProgramFilePath}\AspenTech\Aspen Plus {sVersion}\Engine\Xeq\aspsetup.bat" '
		[+] //--------------------------------------------------------- GUI - --------------------------------------------------------//
			[+] DialogBox dlgContextMenu
				[ ] tag "#1"
		[+] //------------------------------------------------------- Method -------------------------------------------------------//
			[+] void Invoke()
				[+] if !this.Exists(2)
					[ ] derived::Invoke()
				[ ] this.Exists(360)
				[ ] sleep(5)
				[ ] this.SetActive()
			[+] boolean OpenContextMenu()
				[+] if (this.dlgContextMenu.Exists() == false)
					[ ] this.TypeKeys("<Alt-Space>")
					[+] if (glWaitForExists(this.dlgContextMenu) == false)
						[ ] return false
					[+] else
						[ ] return true
				[+] else
					[ ] return true
			[+] void PickContextMenu(string str)
				[+] if (this.OpenContextMenu() == true)
					[+] switch str
						[+] case "Restore"
							[ ] this.TypeKeys("<Enter>")
						[+] case "Move"
							[ ] this.TypeKeys("<down><Enter>")
						[+] case "Size"
							[ ] this.TypeKeys("<down 2><Enter>")
						[+] case "Minimize"
							[ ] this.TypeKeys("<down 3><Enter>")
						[+] case "Maximize"
							[ ] this.TypeKeys("<down 4><Enter>")
						[+] case "Close"
							[ ] this.TypeKeys("<down 5><Enter>")
						[+] case "Mark"
							[ ] this.TypeKeys("<down 6><right><Enter>")
						[+] case "Copy"
							[ ] this.TypeKeys("<down 6><right><down><Enter>")
						[+] case "Paste"
							[ ] this.TypeKeys("<down 6><right><down 2><Enter>")
						[+] case "Select All"
							[ ] this.TypeKeys("<down 6><right><down 3><Enter>")
						[+] case "Scoll"
							[ ] this.TypeKeys("<down 6><right><down 4><Enter>")
						[+] case "Find"
							[ ] this.TypeKeys("<down 6><right><down 5><Enter>")
						[+] case "Default"
							[ ] this.TypeKeys("<down 7><Enter>")
						[+] case "Properties"
							[ ] this.TypeKeys("<down 8><Enter>")
			[+] list of string GetCMDContents()
				[ ] Clipboard.SetText()
				[ ] this.PickContextMenu("Select All")
				[ ] this.PickContextMenu("Copy")
				[ ] sleep(0.5)
				[ ] return Clipboard.GetText()
			[+] boolean WaitForFinish(int iTimeout optional, int iHop optional)
				[+] if (iTimeout == null)
					[ ] iTimeout = 60
				[+] if (iHop == null)
					[ ] iHop = 10
				[ ] int i = 0
				[ ] int iOldLineNum
				[ ] int iNewLineNum
				[+] while (i < iTimeout)
					[ ] iOldLineNum = ListCount(this.GetCMDContents())
					[ ] sleep(iHop)
					[ ] iNewLineNum = ListCount(this.GetCMDContents())
					[+] if (iOldLineNum == iNewLineNum)
						[ ] return true
					[+] else
						[ ] i += iHop
				[ ] return false
			[+] void ExecuteCommand(string str)
				[ ] this.TypeKeys("{str}<Enter>")
			[+] void TurnToDirectory(string sPath)
				[ ] this.ExecuteCommand('cd /d "{sPath}"')
			[+] void Exit()
				[ ] this.ExecuteCommand("Exit")
			[+] boolean FindStr(string sPattern)   
				[ ] int i
				[ ] boolean bRev = false
				[ ] list of string lsResults = this.GetCMDContents()
				[+] for (i = 1; i <= listcount(lsResults); ++i)
					[ ] //print( sPattern)
					[ ] //print(lsResults[i])
					[+] if MatchStr(sPattern,lsResults[i])
						[ ] bRev = True
						[ ] break
				[ ] 
				[ ] return bRev
			[+] boolean checkForErrors(int passCount)
				[ ] string sPattern1 = "*TERMINAL ERRORS      0        0         0*"
				[ ] string sPattern2 = "*SEVERE ERRORS      0        0         0*"
				[ ] string sPattern3 = "*ERRORS      0        0         0*"
				[ ] string sPattern4 = "*NO ERRORS OR WARNINGS GENERATED*"
				[ ] int i
				[ ] integer countPass1 = 0
				[ ] integer countPass2 = 0
				[ ] integer countPass3 = 0
				[ ] integer countPass4 = 0
				[ ] list of string lsResults = this.GetCMDContents()
				[+] for (i = 1; i <= listcount(lsResults); i++)
					[+] if MatchStr(sPattern1,lsResults[i])
						[ ] countPass1++
					[+] else if(MatchStr(sPattern2,lsResults[i]) )
						[ ] countPass2++
					[+] else if(MatchStr(sPattern3,lsResults[i]) )
						[ ] countPass3++
					[+] else if(MatchStr(sPattern4,lsResults[i]) )
						[ ] countPass4++
					[+] else
						[ ] 
						[ ] 
					[ ] print(lsResults[i])
				[ ] PRINT("sPattern1: {countPass1}     sPattern2: {countPass2}       sPattern3: {countPass3}      sPattern4: {countPass4}  ")
				[ ] integer countPassTotal =   countPass4*3 + countPass1 + countPass2 + countPass3
				[ ] integer countExpected = passCount * 3  // 3 Rows of no errors for each test. "NO ERRORS OR WARNINGS GENERATED" counts as 3 rows of no errors since it will not print error table
				[+] if(  (countPassTotal ) < countExpected)
					[ ] Log.Error("One of the test cases has an error, Check command_output.txt count is {countPassTotal} ")
					[ ] // OUTPUT COMMAND LINE
					[ ] handle hFile = FileOpen("{sDataout}\command_output.txt", FM_WRITE)
					[ ] string sLine
					[+] for each sLine in lsResults
						[ ] FileWriteLine( hFile, sLine)
						[ ] 
					[ ] FileClose(hFile)
				[+] else  if(  (countPassTotal ) ==  countExpected)
					[ ] Log.Pass("*********EXPECTED NUMBER OF PASSED TESTS HAS BEEN FOUND******************")
					[ ] return TRUE
				[+] if(  countPassTotal >= countExpected )
					[ ] Log.ERROR("NOT COUNTING PASSES CORRECTLY, FIX COUNTING METHOD")
				[ ] return FALSE
			[+] boolean waitUntilFinished(string directory)
				[ ] //directory should be in a similar format
				[ ] //                  C:\Temp
				[ ] int timeout = 180
				[ ] int i = 0
				[ ] list of STRING contents = this.GetCMDContents()
				[+] while( contents[listcount(contents)] !=  "{directory}>"  && i < timeout)
					[ ] i+=5
					[ ] sleep(2)
					[ ] contents = this.GetCMDContents()
				[ ] 
				[+] if( i <= timeout)
					[ ] return TRUE
				[+] else
					[ ] return FALSE
				[ ] 
			[+] boolean FileCompareExceptTime(string sFile1,string sFile2, string sFormat optional,integer iLineStart optional, integer iLineEnd optional)
				[ ] boolean bFlag=true
				[ ] string sToday
				[ ] DATETIME dt="2012-04-13"
				[ ] integer i
				[ ] list of string lsFileContent1, lsFileContent2
				[+] if(sFormat==null)
					[ ] sFormat="mmmm d,yyyy"
				[+] if(iLineStart==null)
					[ ] iLineStart=1
				[+] if(iLineEnd==null)
					[ ] iLineEnd=0
				[ ] ParseDateFormat(DateStr(),"mm/dd/yy",dt,99)
				[ ] sToday=FormatDateTime(dt,sFormat)			//Get today's date in the format of sFormat
				[+] if(SYS_FileExists(sFile1))
					[ ] lsFileContent1=SYS_GetFileContents(sFile1)
				[+] else
					[ ] Log.Fail("{sFile1} does not exist.")
					[ ] return false
				[+] if(SYS_FileExists(sFile2))
					[ ] lsFileContent2=SYS_GetFileContents(sFile2)
				[+] else
					[ ] Log.Fail("{sFile2} does not exist.")
					[ ] return false
				[+] if(ListCount(lsFileContent1)!=ListCount(lsFileContent2))
					[ ] Log.Fail("The content length of the 2 files are not the same.")
					[ ] return false
				[+] for(i=iLineStart;i<=ListCount(lsFileContent1)-iLineEnd;i++)
					[+] if(MatchStr("Elapsed time:*",lsFileContent2[i]))
						[ ] continue
					[+] else if(MatchStr("*{sToday}*",lsFileContent2[i]))
						[ ] continue
					[+] else if(MatchStr("*{sVersion}*",lsFileContent2[i]))
						[ ] continue
					[+] else
						[+] if(lsFileContent1[i]!=lsFileContent2[i])
							[ ] Log.Fail("not same in Line {i}:")
							[ ] Log.Fail("Line in the baseline file: {lsFileContent1[i]}")
							[ ] Log.Fail("Line in the actual file: {lsFileContent2[i]}")
							[ ] bFlag=false
				[ ] return bFlag
	[+] winclass wcCalculationEngineWindow	:	MainWin
		[ ] tag "[DialogBox]*Customize Aspen Properties*"
		[ ] const sCmdLine =  'cmd /k "{sProgramFilePath}\AspenTech\Aspen Properties {sVersion}\Engine\Xeq\aprsetup.bat" '
		[+] //--------------------------------------------------------- GUI - --------------------------------------------------------//
			[+] DialogBox dlgContextMenu
				[ ] tag "#1"
		[+] //------------------------------------------------------- Method -------------------------------------------------------//
			[+] void Invoke()
				[+] if !this.Exists(2)
					[ ] derived::Invoke()
				[ ] this.SetActive()
			[+] boolean OpenContextMenu()
				[+] if (this.dlgContextMenu.Exists() == false)
					[ ] this.TypeKeys("<Alt-Space>")
					[+] if (glWaitForExists(this.dlgContextMenu) == false)
						[ ] return false
					[+] else
						[ ] return true
				[+] else
					[ ] return true
			[+] void PickContextMenu(string str)
				[+] if (this.OpenContextMenu() == true)
					[+] switch str
						[+] case "Restore"
							[ ] this.TypeKeys("<Enter>")
						[+] case "Move"
							[ ] this.TypeKeys("<down><Enter>")
						[+] case "Size"
							[ ] this.TypeKeys("<down 2><Enter>")
						[+] case "Minimize"
							[ ] this.TypeKeys("<down 3><Enter>")
						[+] case "Maximize"
							[ ] this.TypeKeys("<down 4><Enter>")
						[+] case "Close"
							[ ] this.TypeKeys("<down 5><Enter>")
						[+] case "Mark"
							[ ] this.TypeKeys("<down 6><right><Enter>")
						[+] case "Copy"
							[ ] this.TypeKeys("<down 6><right><down><Enter>")
						[+] case "Paste"
							[ ] this.TypeKeys("<down 6><right><down 2><Enter>")
						[+] case "Select All"
							[ ] this.TypeKeys("<down 6><right><down 3><Enter>")
						[+] case "Scoll"
							[ ] this.TypeKeys("<down 6><right><down 4><Enter>")
						[+] case "Find"
							[ ] this.TypeKeys("<down 6><right><down 5><Enter>")
						[+] case "Default"
							[ ] this.TypeKeys("<down 7><Enter>")
						[+] case "Properties"
							[ ] this.TypeKeys("<down 8><Enter>")
			[+] list of string GetCMDContents()
				[ ] Clipboard.setText()
				[ ] this.PickContextMenu("Select All")
				[ ] this.PickContextMenu("Copy")
				[ ] sleep(0.5)
				[ ] return Clipboard.GetText()
			[+] boolean WaitForFinish(int iTimeout optional, int iHop optional)
				[+] if (iTimeout == null)
					[ ] iTimeout = 60
				[+] if (iHop == null)
					[ ] iHop = 10
				[ ] int i = 0
				[ ] int iOldLineNum
				[ ] int iNewLineNum
				[+] while (i < iTimeout)
					[ ] iOldLineNum = ListCount(this.GetCMDContents())
					[ ] sleep(iHop)
					[ ] iNewLineNum = ListCount(this.GetCMDContents())
					[+] if (iOldLineNum == iNewLineNum)
						[ ] return true
					[+] else
						[ ] i += iHop
				[ ] return false
			[+] void ExecuteCommand(string str)
				[ ] this.TypeKeys("{str}<Enter>")
			[+] void TurnToDirectory(string sPath)
				[ ] this.ExecuteCommand('cd /d "{sPath}"')
			[+] void Exit()
				[ ] this.ExecuteCommand("Exit")
			[+] boolean FindStr(string sPattern)
				[ ] int i
				[ ] boolean bRev = false
				[ ] list of string lsResults = this.GetCMDContents()
				[+] for (i = 1; i <= listcount(lsResults); ++i)
					[ ] //print( sPattern)
					[ ] //print(lsResults[i])
					[+] if MatchStr(sPattern,lsResults[i])
						[ ] bRev = True
						[ ] break
				[ ] 
				[ ] return bRev
			[+] boolean checkForErrors(int passCount)
				[ ] string sPattern1 = "*TERMINAL ERRORS      0        0         0*"
				[ ] string sPattern2 = "*SEVERE ERRORS      0        0         0*"
				[ ] string sPattern3 = "*ERRORS      0        0         0*"
				[ ] string sPattern4 = "*NO ERRORS OR WARNINGS GENERATED*"
				[ ] int i
				[ ] integer countPass1 = 0
				[ ] integer countPass2 = 0
				[ ] integer countPass3 = 0
				[ ] integer countPass4 = 0
				[ ] list of string lsResults = this.GetCMDContents()
				[+] for (i = 1; i <= listcount(lsResults); i++)
					[+] if MatchStr(sPattern1,lsResults[i])
						[ ] countPass1++
					[+] else if(MatchStr(sPattern2,lsResults[i]) )
						[ ] countPass2++
					[+] else if(MatchStr(sPattern3,lsResults[i]) )
						[ ] countPass3++
					[+] else if(MatchStr(sPattern4,lsResults[i]) )
						[ ] countPass4++
					[+] else
						[ ] 
						[ ] 
					[ ] print(lsResults[i])
				[ ] PRINT("sPattern1: {countPass1}     sPattern2: {countPass2}       sPattern3: {countPass3}      sPattern4: {countPass4}  ")
				[ ] integer countPassTotal =   countPass4*3 + countPass1 + countPass2 + countPass3
				[ ] integer countExpected = passCount * 3  // 3 Rows of no errors for each test. "NO ERRORS OR WARNINGS GENERATED" counts as 3 rows of no errors since it will not print error table
				[+] if(  (countPassTotal ) < countExpected)
					[ ] Log.Error("One of the test cases has an error, Check command_output.txt count is {countPassTotal} ")
					[ ] // OUTPUT COMMAND LINE
					[ ] handle hFile = FileOpen("{sDataout}\command_output.txt", FM_WRITE)
					[ ] string sLine
					[+] for each sLine in lsResults
						[ ] FileWriteLine( hFile, sLine)
						[ ] 
					[ ] FileClose(hFile)
				[+] else  if(  (countPassTotal ) ==  countExpected)
					[ ] Log.Pass("*********EXPECTED NUMBER OF PASSED TESTS HAS BEEN FOUND******************")
					[ ] return TRUE
				[+] if(  countPassTotal >= countExpected )
					[ ] Log.ERROR("NOT COUNTING PASSES CORRECTLY, FIX COUNTING METHOD")
				[ ] return FALSE
			[+] boolean waitUntilFinished(string directory)
				[ ] //directory should be in a similar format
				[ ] //                  C:\Temp
				[ ] int timeout = 180
				[ ] int i = 0
				[ ] list of STRING contents = this.GetCMDContents()
				[+] while( contents[listcount(contents)] !=  "{directory}>"  && i < timeout)
					[ ] i+=5
					[ ] sleep(2)
					[ ] contents = this.GetCMDContents()
				[ ] 
				[+] if( i <= timeout)
					[ ] return TRUE
				[+] else
					[ ] return FALSE
				[ ] 
			[ ] 
		[ ] 
		[ ] 
	[+] winclass wcAPWPFComboBox : WPFControl
		[+] void Select(string sItem)
			[ ] this.SetFocus()
			[ ] this.Click()
			[ ] sleep(0.5)
			[+] do
				[ ] this.Find("//WPFComboBox[@automationId='PART_FocusSite']").Select(sItem)
			[+] except
				[+] do
					[ ] Print("***Looking afor ComboBoxItem***")
					[+] do
						[ ] this.Find("//WPFComboBoxItem[@caption='{sItem}']").click()
					[+] except
						[ ] this.click()  // Set Focus May not work for combobox within control. Try reclicking
						[ ] this.Find("//WPFComboBoxItem[@caption='{sItem}']").click()
				[+] except
					[ ] Print("***Can't Find ComboBoxItem, Typing in {sItem} to select item***")
					[ ] this.Click()
					[ ] this.TypeKeys("{sItem}<enter>",0.2)
		[+] string GetValue()
			[ ] this.SetFocus()
			[ ] this.Click()
			[ ] Clipboard.SetText({})
			[ ] sleep(0.5)
			[+] do
				[ ] this.TypeKeys("<Ctrl-C>",0.2)
				[ ] sleep(0.5)
				[ ] return Clipboard.GetText()[1]
			[+] except
				[ ] Log.Error("Fail to return Text")
				[ ] return "error"
		[+] list of WINDOW GetItems()
			[ ] this.SetFocus()
			[ ] this.Click()
			[ ] sleep(0.5)
			[+] do
				[ ] return this.Find("//WPFComboBox[@automationId='PART_FocusSite']").GetProperty("Items")
			[+] except
					[ ] Log.Error("***Can not find  ComboBoxItem***")
			[ ] 
	[+] winclass wcAPWPFTextBox: WPFControl
		[+] void InputText(string sText)
			[ ] this.SetFocus()
			[ ] this.Click()
			[ ] sleep(0.5)
			[+] do
				[ ] this.Find("//WPFTextBox[@automationId='PART_TextBox' or @automationId='PART_FocusSite']").SetText("{sText}")
				[ ] this.Find("//WPFTextBox[@automationId='PART_TextBox' or @automationId='PART_FocusSite']").typeKeys("<Enter>")
			[+] except
				[ ] this.TypeKeys("{sText}<enter>",0.2)
		[+] string GetText()
			[ ] this.SetFocus()
			[ ] this.Click(1,1,1)
			[ ] sleep(0.5)
			[+] do
				[ ] return this.Find("//WPFTextBox[@automationId='PART_TextBox']").Text
			[+] except
				[ ] Log.Error("Failed To Return Text")
				[ ] return "ERROR!"
	[+] winclass wcSelectCompilerforAspen 	:	MainWin
		[ ] tag "[DialogBox]*ApSetComp.exe*"
		[ ] const sCmdLine =  "{chr(34)}{sProgramFilePath}\AspenTech\AprSystem {sVersion}\Engine\Xeq\ApSetComp.exe{chr(34)} -select"
		[+] //--------------------------------------------------------- GUI - --------------------------------------------------------//
			[+] DialogBox dlgContextMenu
				[ ] tag "#1"
		[+] //------------------------------------------------------- Method -------------------------------------------------------//
			[+] void Invoke()
				[+] if !this.Exists(2)
					[ ] derived::Invoke()
				[ ] this.SetActive()
			[+] boolean OpenContextMenu()
				[+] if (this.dlgContextMenu.Exists() == false)
					[ ] this.TypeKeys("<Alt-Space>")
					[+] if (glWaitForExists(this.dlgContextMenu) == false)
						[ ] return false
					[+] else
						[ ] return true
				[+] else
					[ ] return true
			[+] void PickContextMenu(string str)
				[+] if (this.OpenContextMenu() == true)
					[+] switch str
						[+] case "Restore"
							[ ] this.TypeKeys("<Enter>")
						[+] case "Move"
							[ ] this.TypeKeys("<down><Enter>")
						[+] case "Size"
							[ ] this.TypeKeys("<down 2><Enter>")
						[+] case "Minimize"
							[ ] this.TypeKeys("<down 3><Enter>")
						[+] case "Maximize"
							[ ] this.TypeKeys("<down 4><Enter>")
						[+] case "Close"
							[ ] this.TypeKeys("<down 5><Enter>")
						[+] case "Mark"
							[ ] this.TypeKeys("<down 6><right><Enter>")
						[+] case "Copy"
							[ ] this.TypeKeys("<down 6><right><down><Enter>")
						[+] case "Paste"
							[ ] this.TypeKeys("<down 6><right><down 2><Enter>")
						[+] case "Select All"
							[ ] this.TypeKeys("<down 6><right><down 3><Enter>")
						[+] case "Scoll"
							[ ] this.TypeKeys("<down 6><right><down 4><Enter>")
						[+] case "Find"
							[ ] this.TypeKeys("<down 6><right><down 5><Enter>")
						[+] case "Default"
							[ ] this.TypeKeys("<down 7><Enter>")
						[+] case "Properties"
							[ ] this.TypeKeys("<down 8><Enter>")
			[+] list of string GetCMDContents()
				[ ] this.PickContextMenu("Select All")
				[ ] this.PickContextMenu("Copy")
				[ ] return Clipboard.GetText()
			[+] boolean WaitForFinish(int iTimeout optional, int iHop optional)
				[+] if (iTimeout == null)
					[ ] iTimeout = 60
				[+] if (iHop == null)
					[ ] iHop = 10
				[ ] int i = 0
				[ ] int iOldLineNum
				[ ] int iNewLineNum
				[+] while (i < iTimeout)
					[ ] iOldLineNum = ListCount(this.GetCMDContents())
					[ ] sleep(iHop)
					[ ] iNewLineNum = ListCount(this.GetCMDContents())
					[+] if (iOldLineNum == iNewLineNum)
						[ ] return true
					[+] else
						[ ] i += iHop
				[ ] return false
			[+] void ExecuteCommand(string str)
				[ ] this.TypeKeys("{str}<Enter>")
			[+] void TurnToDirectory(string sPath)
				[ ] this.ExecuteCommand('cd /d "{sPath}"')
			[+] void Exit()
				[ ] this.ExecuteCommand("Exit")
			[+] boolean FindStr(string sPattern)
				[ ] int i
				[ ] boolean bRev = false
				[ ] list of string lsResults = this.GetCMDContents()
				[+] for (i = 1; i <= listcount(lsResults); ++i)
					[+] if MatchStr(sPattern,lsResults[i])
						[ ] bRev = True
						[ ] break
				[ ] 
				[ ] return bRev
	[+] winclass wcPROIIConverter 		: WPFWindow
			[ ] locator "/WPFWindow[@caption='*PRO/II Converter*']"
			[ ] 
			[ ] // The command line used to invoke the application
			[ ] const sCmdLine = "{sProgramFilePath}\AspenTech\Converter {sVersion}\P2Converter.exe /AspenPlus"
		[+] //--------------------------------------------------------- GUI - --------------------------------------------------------//
			[+] WPFToolBarTray ToolBarTray
				[ ] locator "//WPFToolBarTray"
				[+] WPFToolBar ToolBar
					[ ] locator "//WPFToolBar"
					[+] WPFToggleButton btnOverflowButton
						[ ] locator "@automationId='OverflowButton'"
					[+] WPFButton btnOpen
						[ ] locator "Open"
					[+] WPFComboBox cboType
						[ ] locator "@automationId='cmbType'"
						[+] WPFComboBoxItem cbiHYSYS
							[ ] locator "HYSYS"
						[+] WPFComboBoxItem cbiAspenPlus
							[ ] locator "Aspen Plus"
					[+] WPFButton Options
						[ ] locator "@automationId='options'"
					[+] WPFButton BtnRun
						[ ] locator "@automationId='btnRun'"
					[+] WPFButton BtnHelp
						[ ] locator "@automationId='btnHelp'"
			[+] WPFTextBlock txbPROIIInputFileStructure
				[ ] locator "@caption='PRO/II input file structure'"
			[+] WPFTreeView TrvPro2File
				[ ] locator "@automationId='tvwPro2File'"
			[+] WPFTabControl TabOutput
				[ ] locator "@automationId='tabOutput'"
			[+] WPFLabel ShowOutputFrom
				[ ] locator "Show output from:"
			[+] WPFComboBox cboShowOutputFrom
				[ ] locator "@automationId='aspenOutput'"
				[+] WPFComboBoxItem cbiAll
					[ ] locator "All"
				[+] WPFComboBoxItem cbiNotes
					[ ] locator "Notes"
				[+] WPFComboBoxItem cbiWarning
					[ ] locator "Warning"
				[+] WPFComboBoxItem cbiError
					[ ] locator "Error"
			[+] WPFRichTextBox EdtOutputPlus
				[ ] locator "@automationId='edtOutputPlus'"
			[+] WPFTabItem AspenPlusTabItem
				[ ] locator "Aspen Plus"
			[+] WPFStatusBar StatusBar
				[ ] locator "//WPFStatusBar"
			[+] WPFStatusBarItem StatusBarItem
				[ ] locator "//WPFStatusBarItem"
			[ ] wcOpenDialogBox dlgOpenFile
		[+] //------------------------------------------------------- Method -------------------------------------------------------//
			[+] void Open(string sFileName)
				[ ] // Open inp file
				[ ] //   Arguments
				[ ] //   1.  fileName , string, name of case file - full path or relative to current directory
				[ ] this.SetActive()
				[ ] this.ToolBarTray.ToolBar.btnOpen.Click()
				[+] if (this.dlgOpenFile.Exists(20))
					[ ] this.dlgOpenFile.OpenFile(sFileName)
					[+] if(dlgAspenPlusBackup.Exists())
						[ ] dlgAspenPlusBackup.BtnNo.Click()
				[+] else
					[ ] Log.Fail("Can not find open dialog")
	[+] winclass wcWinZip : MainWin
		[ ] const string sCmdLine = "{sProgramFilePath}\WinZip\WINZIP32.exe"
		[ ] 
		[+] //========== GUI ==========//
			[+] DialogBox dlgTipOfTheDay 
				[ ] locator "//DialogBox[@caption='WinZip Tip of the Day']"
				[+] PushButton btnClose
					[ ] locator "//PushButton[@caption='Close']"
				[ ] 
			[+] DialogBox dlgOpenArchive
				[ ] locator "//DialogBox[@caption='Open Archive']"
				[ ] 
				[+] TextField txtFileName
					[ ] locator "//TextField[@caption='File name:']"
					[ ] //locator "//ComboBox[@caption='File name:']"
				[+] PushButton btnOpen
					[ ] locator "//PushButton[@caption='Open']"
				[+] PushButton btnCancel
					[ ] locator "//PushButton[@caption='Cancel']"
				[ ] 
			[+] DialogBox dlgExtract
				[ ] locator "//DialogBox[@caption='Extract*']"
				[ ] 
				[+] TextField txtFilePath
					[ ] locator "//TextField[@caption='Extract to:']"
				[+] PushButton btnExtract
					[ ] locator "//PushButton[@caption='Extract']"
				[+] PushButton btnCancel
					[ ] locator "//PushButton[@caption='Cancel']"
			[+] DialogBox dlgConfirmOverwrite
				[ ] locator "//DialogBox[@caption='Confirm File Overwrite']"
				[ ] 
				[+] PushButton btnYes
					[ ] locator "//PushButton[@caption='Yes']"
				[+] PushButton btnYesToAll
					[ ] locator "//PushButton[@caption='Yes to All']"
				[+] PushButton btnNo
					[ ] locator "//PushButton[@caption='NO']"
				[+] PushButton btnCancel
					[ ] locator "//PushButton[@caption='Cancel']"
			[ ] 
			[ ] 
			[ ] 
			[+] PushButton btnOpen
				[ ] locator "//PushToolItem[@caption='Open']"
			[+] PushButton btnExtract
				[ ] locator "//PushToolItem[@caption='Extract']"
		[ ] 
		[+] //========== Methods ==========//
			[ ] 
		[ ] 
	[+] winclass wcMicrosoftExcel :    MainWin
		[ ] const string sCmdLine = "{sProgramFilePath}\Microsoft Office\OFFICE14\EXCEL.EXE  /e"
		[ ] locator "/MainWin[@caption='Microsoft Excel*']"
		[ ] 
		[+] void closeWithoutSaving()
			[ ] this.TypeKeys("<alt-F4>")
			[+] if( wExcelSaveWarning.Exists())
				[ ] wExcelSaveWarning.TypeKeys("<Right>")
				[ ] wExcelSaveWarning.TypeKeys("<Enter>")
		[ ] 
		[+] void closeWithSaving()
			[ ] this.TypeKeys("<alt-F4>")
			[+] if( wExcelSaveWarning.Exists())
				[ ] wExcelSaveWarning.TypeKeys("<Right>")
				[ ] wExcelSaveWarning.TypeKeys("<Left>")
				[ ] wExcelSaveWarning.TypeKeys("<Enter>")
	[+] winclass wcAspenProperties : WPFWindow  //      :(
		[ ] const string sCmdLine = "{sProgramFilePath}\AspenTech\Aspen Properties {sVersion}\GUI\Xeq\AspenProperties.exe"
		[+] //======================GUI===============================//
			[ ] 
			[+] //File Menu, MenuItems, and Content Menus
				[+] WPFMenuItem	mnuFile
					[ ] locator "//WPFMenuItem[@className='ApplicationMenuPresenter']"
					[ ] 
					[ ] 
				[+] WPFMenuItem       miNew
					[ ] locator "//WPFMenuItem[@caption='New']"
				[+] WPFMenuItem       miOpen
					[ ] locator "//WPFMenuItem[@caption='Open']"
				[+] WPFMenuItem miRename
					[ ] locator "//WPFMenuItem[@caption='Re_name']"
				[+] WPFMenuItem       miExport
					[ ] locator "//WPFMenuItem[@caption='Export'][1]"
				[+] WPFMenuItem       miExportAPR
					[ ] locator "//WPFMenuItem[@caption='Export'][2]"
				[+] WPFMenuItem       miExportEOVariables
					[ ] locator "//WPFMenuItem[@caption='EO Variables{chr(13)}{chr(10)}Export attributes of EO variables to{chr(13)}{chr(10)}x-file or variables file.{chr(13)}{chr(10)}']"
				[+] WPFMenuItem       miImport
					[ ] locator "//WPFMenuItem[@caption='Import']"
				[+] WPFMenuItem       miSaveAs
					[ ] locator "//WPFMenuItem[@caption='Save As']"
				[ ] 
			[ ] 
			[+] //Tab&Ribbon
				[+] WPFTabItem tbHome
					[ ] locator "//WPFTabItem[@automationId='Properties']" 
				[+] WPFItemsControl grpUnits
					[ ] locator "//WPFItemsControl[@automationId='*grpUnitsProp']"
					[+] wcAPWPFComboBox cboUnitSet
						[ ] locator "//WPFControl[@automationId='comboGlobalUnitsProp']"
					[+] WPFButtonBase btnUnitSets
						[ ] locator "//WPFButtonBase[@automationId='igRibbon_ButtonTool_59']"
				[+] WPFContentControl grpAnalysis
					[ ] locator "//WPFContentControl[(@name='PART_RibbonGroupSite' and @caption='Analysis')]"
					[+] WPFTextBlock btnPure
						[ ] locator "//WPFTextBlock[@caption='Pure']"
					[+] WPFTextBlock btnBinary
						[ ] locator "//WPFTextBlock[@caption='Binary']"
					[+] WPFTextBlock btnResidueCurves
						[ ] locator "//WPFTextBlock[@caption='Residue Curves']"
				[+] WPFContentControl grpRunMode
					[ ] locator "//WPFContentControl[@caption='Run Mode']"
					[+] WPFRadioButton rdAnalysis
						[ ] locator "//WPFRadioButton[1]"
					[+] WPFRadioButton rdEstimation
						[ ] locator "//WPFRadioButton[2]"
					[+] WPFRadioButton rdRegression
						[ ] locator "//WPFRadioButton[3]"
					[ ] 
				[+] WPFContentControl grpDataSource
					[ ] locator "//WPFContentControl[@caption='Data Source']"
					[+] WPFButtonBase btnNIST
						[ ] locator "//WPFButtonBase[1]"
					[+] WPFButtonBase btnDECHEMA
						[ ] locator "//WPFButtonBase[2]"
				[+] WPFItemsControl grpPlot
					[ ] locator "//WPFItemsControl[@className='MenuTool'][3]"
					[+] WPFMenuItem miPropT
						[ ] locator "//WPFMenuItem[@caption='Prop. vs T'][1]"
			[ ] 
			[+] //NavTree
				[+] WPFTreeView trvPartTree
					[ ] locator "//WPFTreeView[@automationId='Part_Tree']"
				[+] WPFTreeViewItem trviData
					[ ] locator "//WPFTreeViewItem[@caption='Data']"
			[+] //Pages
				[ ] //Components-->Petro Characterization-->Analysis Options
				[+] WPFGroupBox grpAssayDataAnalysisProcedure
					[ ] locator "//WPFGroupBox[@caption='Assay data analysis procedure']"
					[+] WPFRadioButton rdVersion9OrLater
						[ ] locator "//WPFRadioButton[(@automationId='PART_RadioButton' and @caption='Version 9 or later')]"
					[+] WPFRadioButton rdVersion8OrEarlier
						[ ] locator "//WPFRadioButton[(@automationId='PART_RadioButton' and @caption='Version 8 or earlier')]"
				[ ] 
				[ ] //Setup-->Unit Sets-->METCBAR
				[+] wcAPWPFComboBox cboCopyFrom
					[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
				[+] WPFGroupBox grpDensityRelated
					[ ] locator "//WPFGroupBox[@caption='Density related']"
					[+] wcAPWPFComboBox cboMoleDensity
						[ ] locator "//WPFControl[@automationId='MMComboEdit_4']"
				[ ] 
				[+] WPFGroupBox grpEnthalpyRelated
					[ ] locator "//WPFGroupBox[@caption='Enthalpy related']"
					[+] wcAPWPFComboBox  cboMoleEnthalpy
						[ ] locator "//WPFControl[@automationId='PART_editControl'][3]"
				[ ] 
				[ ] //Component-->Specifications
				[+] WPFTabItem tbComSpecifications
					[ ] locator "//WPFTabItem[@caption='Components - Specifications*']"
				[+] wcAPDataGrid dgComponents
					[ ] locator "//WPFControl[@automationId='PART_DataGrid'] "
				[+] WPFButton btnFind
					[ ] locator "//WPFButton[@caption='Find']"
				[+] WPFButton btnUserDefined
					[ ] locator "//WPFButton[@caption='User Defined']"
				[ ] 
				[ ] //Methods -->Specifications
				[+] wcAPWPFComboBox cboBaseMethod
					[ ] locator "//WPFControl[@automationId='PART_editControl'][2]"
				[ ] 
				[ ] //Analysis-->Pure-->Input
				[+] WPFGroupBox grpProperty
					[ ] locator "//WPFGroupBox[@caption='Property']"
					[+] wcAPWPFComboBox cboPropertyType
						[ ] locator "//WPFControl[@automationId='MMComboEdit_1']"
					[+] wcAPWPFComboBox cboProperty
						[ ] locator "//WPFControl[@automationId='MMComboEdit_2']"
					[+] WPFCheckBox chkVapor
						[ ] locator "//WPFCheckBox[@automationId='PART_CheckBox'][1]"
					[+] WPFCheckBox chkLiquid
						[ ] locator "//WPFCheckBox[@automationId='PART_CheckBox'][2]"
					[+] WPFCheckBox chkSolid
						[ ] locator "//WPFCheckBox[@automationId='PART_CheckBox'][3]"
					[ ] 
					[ ] 
				[+] WPFGroupBox grpTemperature
					[ ] locator "//WPFGroupBox[@caption='Temperature']"
					[+] wcAPWPFComboBox cboTemperatureType
						[ ] locator "//WPFControl[@automationId='MMComboEdit_4']"
					[+] WPFRadioButton rdListofValues
						[ ] locator "//WPFRadioButton[@automationId='MMOptionButton_1']"
					[+] wcAPDataGrid dgTemperatureValuse
						[ ] locator "//WPFControl[@automationId='PART_DataGrid']"
					[+] WPFRadioButton rdOverallRange
						[ ] locator "//WPFRadioButton[(@automationId='PART_RadioButton' and @caption='Overall range')]"
					[+] wcAPWPFTextBox tbLowerLimit
						[ ] locator "//WPFControl[@automationId='MMVariableEdit_1']"
					[+] wcAPWPFTextBox tbUpperLimit
						[ ] locator "//WPFControl[@automationId='MMVariableEdit_2']"
					[+] wcAPWPFTextBox tbPointsNo
						[ ] locator "//WPFControl[@automationId='MMSpinBox_1']"
				[+] WPFGroupBox grpComponents
					[ ] locator "//WPFGroupBox[@caption='Components']"
					[+] WPFListBox lbAvailableComponents
						[ ] locator "//WPFListBox[@automationId='Part_OptionsBox']"
					[+] WPFListBox lbSelectedComponents
						[ ] locator "//WPFListBox[@automationId='Part_SelectionBox']"
					[+] WPFButton btnMoveRight
						[ ] locator "//WPFButton[@automationId='Move Right']"
					[+] WPFButton btnMoveAllRight
						[ ] locator "//WPFButton[@automationId='*AddAll']"
					[+] WPFButton btnMoveLeft
						[ ] locator "//WPFButton[@automationId='Move Left']"
					[+] WPFButton btnMoveAllLeft
						[ ] locator "//WPFButton[@automationId='*RemoveAll']"
				[+] WPFGroupBox grpPressure
					[ ] locator "//WPFGroupBox[@caption='Pressure']"
					[+] wcAPWPFTextBox tbPressureValue
						[ ] locator "//WPFControl[@automationId='MMValueEdit_1']"
					[+] wcAPWPFComboBox cboPressureUnit
						[ ] locator "//WPFControl[@automationId='MMComboEdit_5']"
				[+] WPFGroupBox grpPropertyMethod
					[ ] locator "//WPFGroupBox[@caption='Property method']"
					[+] wcAPWPFComboBox cboPropertyMethod
						[ ] locator "//WPFControl[@automationId='MMComboEdit_6']"
				[+] WPFControl btnRunAnalysis
					[ ] locator "//WPFControl[@automationId='MMCmdButton_1']"
				[ ] 
				[ ] //Analysis-->Binary-->Input
				[+] wcAPWPFComboBox cboAnalysisType
					[ ] locator "//WPFControl[@automationId='PART_editControl'][1]"
				[+] WPFGroupBox grpValidPhases
					[ ] locator "//WPFGroupBox[@caption='Flash options']"
					[+] wcAPWPFComboBox cboPhases
						[ ] locator "//WPFControl[@automationId='MMComboEdit_14']"
				[+] WPFGroupBox grpCompositions
					[ ] locator "//WPFGroupBox[@caption='Compositions']"
					[+] wcAPWPFComboBox cboCompositionBasis
						[ ] locator "//WPFControl[@automationId='MMComboEdit_4']"
					[+] wcAPWPFTextBox tbNoOfPoints
						[ ] locator "//WPFControl[@automationId='MMSpinBox_1']"
				[+] WPFGroupBox grpPressureOrTempList
					[ ] // locator "//WPFGroupBox[@caption='Pressure' ]"
					[+] wcAPDataGrid dgPressureorTempList
						[ ] locator "//WPFControl[@automationId='PART_DataGrid'][2]"
				[ ] 
				[ ] //Analysis-->Residue Curves-->Input
				[+] WPFGroupBox grpValidPhasesRC
					[ ] locator "//WPFGroupBox[@caption='Valid phases']"
					[+] wcAPWPFComboBox cboPhases
						[ ] locator "//WPFControl[@automationId='MMComboEdit_4']"
					[ ] 
				[+] WPFGroupBox grpTernarySystem
					[ ] locator "//WPFGroupBox[@caption='Ternary system']"
					[+] wcAPWPFComboBox cboComponent1
						[ ] locator "//WPFControl[@automationId='MMComboEdit_1']"
					[+] wcAPWPFComboBox cboComponent2
						[ ] locator "//WPFControl[@automationId='MMComboEdit_2']"
					[+] wcAPWPFComboBox cboComponent3
						[ ] locator "//WPFControl[@automationId='MMComboEdit_3']"
				[ ] 
				[ ] //NIST /TDE
				[+] WPFTabItem tbTDEPureResults
					[ ] locator "//WPFTabItem[@caption='TDE*Results*']"
				[+] WPFTabItem tbParameters
					[ ] locator "//WPFTabItem[@automationId='PureTabPara']"
				[+] WPFTabItem tbExperimentalData
					[ ] locator "//WPFTabItem[@automationId='PureTabData']"
				[+] WPFTabItem tbEvaluatedResults
					[ ] locator "//WPFTabItem[@automationId='PureTabResult']"
				[+] WPFGroupBox grpPurePropList
					[ ] locator "//WPFGroupBox[@automationId='GBPurePropList']"
					[+] WPFListBox lbPureProp
						[ ] locator "//WPFListBox[@automationId='PurePropList']"
				[+] WPFButton btnSavePara
					[ ] locator "//WPFButton[@automationId='btnSavePure']"
				[+] WPFButton btnSaveData
					[ ] locator "//WPFButton[@automationId='btnSavePure']"
				[ ] 
				[ ] //Parameters
				[+] WPFTabItem tbPureComponents
					[ ] locator "//WPFTabItem[@caption='Pure Components*']"
				[ ] 
			[+] //DialogBox
				[+] wcOpenDialogBox dlgOpenFile
					[ ] locator "Open"
				[ ] 
			[ ] 
			[+] //Status Bar
				[+] WPFStatusBar stbStatus
					[ ] locator "//WPFStatusBar"
					[+] WPFStatusBarItem stbiResultsAvailable
						[ ] locator "//WPFStatusBarItem[2]"
			[ ] 
			[+] //Common controls
				[+] WPFButton btnNew
					[ ] locator "//WPFButton[@caption='New...']"
				[+] WPFButton btnSelectAll
					[ ] locator "//WPFButton[@automationId='SelectAll']"
				[+] WPFItemsControl grpQuickAccessToolbar
					[ ] locator "//WPFItemsControl[@automationId='igRibbon_QuickAccessToolbar_1']"
					[+] WPFButtonBase btnSave
						[ ] locator "//WPFButtonBase[@automationId='igRibbon_ButtonTool_3']"
					[+] WPFButtonBase btnNext
						[ ] locator "//WPFButtonBase[@automationId='igRibbon_btnNextInput' or @automationId='igRibbon_btnPropertiesNextInput']"
					[+] WPFButtonBase btnControlPanel
						[ ] locator "//WPFButtonBase[@automationId='igRibbon_btnControlPanel']"
					[+] WPFButtonBase btnRun
						[ ] locator "//WPFButtonBase[@automationId='igRibbon_ButtonTool_117']"
					[+] WPFButtonBase btnReinit
						[ ] locator "//WPFButtonBase[@automationId='igRibbon_btnPrpertiesReset']"
			[ ] 
		[ ] 
		[+] //=====================Method============================//
			[ ] 
			[+] void Launch()
				[ ] //Launch the Aspen Plus
				[ ] this.Invoke()
				[ ] glWaitForMouseIdle(30)
				[ ] sleep(10)
				[ ] this.SetActive()
				[ ] this.Maximize()
				[ ] 
			[+] void NewBlankCase()
				[ ] this.SetActive()
				[ ] this.mnuFile.Click()
				[ ] this.miNew.Click()
				[ ] wNewAspenPropertiesCase.SetActive()
				[ ] wNewAspenPropertiesCase.lbCaseType.lbiBlankRecent.Select()
				[ ] wNewAspenPropertiesCase.Find("//WPFListBoxItem[@caption='Blank Case']").Select()
				[ ] wNewAspenPropertiesCase.btnCreate.Click()
				[ ] sleep(8)
				[ ] 
			[+] Import (string sFileName)
				[ ] //	Import ( string )  - Imports a file
				[ ] // 	Arguments
				[ ] //	1.  fileName , string, name of export file - extension determines type of file to export
				[ ] //	Usage:  this.Import('c:\\temp\\pfdtut.inp')
				[ ] //	Please notice that you need to resolve the confilct window in other code.
				[ ] this.SetActive()
				[ ] this.mnuFile.Click()
				[ ] this.miImport.Click()
				[ ] sleep(1)
				[ ] dlgImportWin.SetActive()
				[ ] dlgImportWin.txtFileName.TypeKeys(sFileName)
				[ ] dlgImportWin.btnOpen.Click()
				[ ] glWaitForMouseIdle(60)
				[ ] Log.Pass("Import file {sFileName} successfully!!!")
				[ ] 
			[+] Export(string sFileName)
				[ ] string sExtenison = glGetReverseField(sFileName, ".", 1)
				[ ] string sBaseFileName = SubStr(sFileName,1, len(sFileName) - len(sExtenison)-1)
				[+] if sys_DirExists(sBaseFileName)
					[ ] sys_execute('rd /s /q "sBaseFileName"')
				[ ] this.SetActive()
				[ ] // this.mnuFile.Click()
				[ ] // sleep(1)
				[ ] // this.miExportAPR.Click()
				[ ] this.TypeKeys("<Ctrl-e>")
				[ ] dlgExport.exists(10)
				[ ] sleep(3)
				[ ] dlgExportAPR.SetActive()
				[ ] dlgExportAPR.cboSaveAsFileType.Select("*.{Lower(sExtenison)}*")
				[ ] dlgExportAPR.txtFileName.SetText(sBaseFileName)
				[ ] dlgExportAPR.btnSave.Click()
				[+] if( dlgConfirmSaveAs.Exists(2) )
					[ ] dlgConfirmSaveAs.btnYes.Click()
					[ ] 
				[ ] glWaitForMouseIdle(60)
				[+] while dlgExportAPR.Exists() 
					[ ] sleep(0.5)
				[ ] Log.Pass("Save file {sBaseFileName} as {upper(sExtenison)} successfully!!!")
				[ ] this.SetActive()
				[ ] 
				[ ] 
				[ ] 
			[+] void Open(string sFileName)
				[ ] //Open current version aprbkp
				[ ] this.SetActive()
				[ ] this.TypeKeys("<Ctrl-O>",0.2)
				[+] if (this.dlgOpenFile.Exists(20))
					[ ] this.dlgOpenFile.OpenFile(sFileName)
				[+] else
					[ ] Log.Fail("Can not find open dialog")
				[ ] sleep(3)
				[+] if wErrorsReadingaBackupFile.Exists(3)
					[ ] Log.Error("Errors reading a backup file, please manual check!!!")
					[ ] Log.ManualCheck("Errors begin")
					[ ] Print(wErrorsReadingaBackupFile.TxtFileContent.Text)
					[ ] Log.ManualCheck("Errors end")
					[ ] wErrorsReadingaBackupFile.SetActive()
					[ ] wErrorsReadingaBackupFile.Close()
			[+] void Exit()
				[ ] this.SetActive()
				[ ] this.TypeKeys("<Alt-F4>")
				[ ] sleep(5)
				[+] if(wAspenProperties.Exists())
					[ ] wAspenProperties.SetActive()
					[ ] wAspenProperties.BtnNo.Click()
				[ ] sleep(3)
			[+] SetTab(string sTabName)
				[ ] // SetTab ( string )  - Sets the active tab
				[ ] //  Arguments:
				[ ] //  1.  tabName  - string, name of tab to make active
				[ ] //  Usage: AP.SetTab('Global')
				[ ] //window wTab = this.ctlTabs.Find("//WPFTabItem[@caption='{sTabName}*']")
				[ ] window wTab = this.Find("//WPFTabItem[@caption='{sTabName}*']")
				[ ] wTab.Select()
			[+] void Run()
				[ ] this.SetActive()
				[ ] this.TypeKeys("<F5>",0.2)
				[ ] sleep(10)
			[+] void Verify_Status(string sStatus)
				[ ] //Verify the Status message in A+
				[ ] //Example :Verify_AP_Status("Results Available")
				[ ] this.SetActive()
				[ ] Verify(this.stbStatus.Find("//WPFStatusBarItem[2]").sCaption,sStatus)
			[+] void closeTab(string tab)
				[+] do
					[ ] this.find("//WPFTabItem[@caption='*{tab}*']//WPFButton").Click()
					[ ] sleep(1)
				[+] except
					[ ] Log.Warning("WARNING: Unable To Close Tab Item")
			[+] void SaveAs (string sFileName)
				[ ]  //Saves the case to a file
				[ ] //   Arguments
				[ ] //   1.  fileName , string, name of case file - full path or relative to current directory
				[ ] //   extension determines type of file to save
				[+] if sys_FileExists(sFileName)
					[ ] Sys_Execute('del /f /q "{sFileName}"')
				[ ] string sExtenison = glGetReverseField(sFileName, ".", 1)
				[ ] string sBaseFileName = SubStr(sFileName,1, len(sFileName) - len(sExtenison)-1)
				[ ] this.SetActive()
				[ ] this.mnuFile.Click()
				[ ] sleep(2)
				[ ] this.miSaveAs.Click()
				[ ] AspenPropertisClassicWin.dlgSaveAsFile.Exists(10)
				[ ] AspenPropertisClassicWin.dlgSaveAsFile.SetActive()
				[ ] AspenPropertisClassicWin.dlgSaveAsFile.SaveFile(sBaseFileName,"*.{Lower (sExtenison)})")
				[+] if wAspenProperties.Exists(10)
					[ ] wAspenProperties.SetActive()
					[ ] wAspenProperties.BtnNo.Click()
				[ ] Log.Pass("Save file {sBaseFileName} as {Upper(sExtenison)} successfully!!!")
				[ ] this.SetActive()
			[ ] 
			[ ] 
	[+] winclass WPFPopup: WPFWindow
		[+] WPFButton btnYes
			[ ] locator "//WPFButton[@caption='*Yes*']"
		[+] WPFButton btnNo
			[ ] locator "//WPFButton[@caption='*No*']"
		[+] WPFButton btnOK
			[ ] locator "//WPFButton[@caption='*OK*']"
		[+] WPFButton btnCancel
			[ ] locator "//WPFButton[@caption='*Cancel*']"
		[+] WPFButton btnFinish
			[ ] locator "//WPFButton[@caption='*Finish*']"
		[+] WPFButton btnNext
			[ ] locator "//WPFButton[@caption='*Next*']"
		[+] WPFButton btnBack
			[ ] locator "//WPFButton[@caption='*Back*']"
			[ ] 
	[+] window WPFWindow dlgWarnning
		[ ] locator "/WPFWindow[@caption='Aspen Plus']"
		[+] WPFCheckBox ckbDontAsk
			[ ] locator "//WPFCheckBox[@automationId='CheckBox_1']"
		[+] WPFButton btnOK
			[ ] locator "//WPFButton[@automationId='Button1']"
		[+] WPFButton btnYes
			[ ] locator "//WPFButton[@automationId='btn0']"
		[+] WPFButton btnNo
			[ ] locator "//WPFButton[@automationId='btn1']"
		[+] WPFButton btnOKbutton
			[ ] locator "//WPFButton[@caption='_OK']"
			[ ] 
	[+] winclass wcAPDM: MainWin
		[ ] const string sCmdLine = "C:\ProgramData\AspenTech\APED {sVersion}\APDBMGRV{sV}.msc"
		[ ] int nInvokeTimeout = 500
		[ ] 
		[+] TreeView trvConsoleRoot
			[ ] locator "//TreeView"
		[ ] 
		[+] PushButton btnFindCompounds
			[ ] locator "//PushButton[@automationId='buttonFindCompounds']"
		[ ] 
		[ ] 
		[ ] 
		[ ] 
		[+] Launch()
			[ ] SYS_EXECUTE("{chr(34)}{sCmdLine}{chr(34)}", NULL, EM_CONTINUE_RUNNING)
			[+] wAspenPropertiesDatabaseManager.Exists(60)
				[ ] wAspenPropertiesDatabaseManager.btnOK.Click()
				[ ] Log.Pass("License Checkout Dialog Appeared. OK was Pressed")
			[ ] this.Exists(nInvokeTimeout)
			[ ] glWaitForMouseIdle()
			[ ] 
			[ ] 
			[ ] 
		[ ] 
		[ ] 
		[ ] 
		[ ] 
	[+] winclass wcAPDCT:FormsWindow
		[ ] const string sCmdLine = "C:\Program Files (x86)\AspenTech\AprSystem {sVersion}\PropertiesDatabase\Bin\dbTesterAdv.exe"
		[ ] int nInvokeTimeout = 500
		[ ] 
		[+] PushButton btnStart
			[ ] locator "//PushButton[@automationId='okButton']"
		[ ] 
		[+] TextField txtCurrentlyTesting
			[ ] locator "//TextField[@automationId='currentlyTestingTextBox']"
		[ ] 
		[+] WinFormsDataGrid dgSQLSettings
			[ ] locator "//WinFormsDataGrid[@automationId='dataGridView1']"
			[ ] 
		[+] WinFormsDataGrid dgDatabaseAccessSettings
			[ ] locator "//WinFormsDataGrid[@automationId='dataGridView2']"
		[+] PushButton btnRestore
			[ ] locator "//PushButton[@automationId='buttonRestore']"
		[+] Launch()
			[ ] SYS_EXECUTE("{chr(34)}{sCmdLine}{chr(34)}", NULL, EM_CONTINUE_RUNNING)
			[ ] this.Exists(60)
			[ ] 
		[ ] 
		[ ] 
		[ ] 
		[ ] 
	[ ] 
	[ ] //==============Appended By Susan Shi===========
	[ ] //Exchanger Analysis
	[+] winclass wcSize:WPFWindow
		[+] FormsHost	areaFormHost
			[ ] locator "//FormsHost[@automationId='theFormHost']"
			[+] WPFControl	btnSizeExchanger
				[ ] locator "//Control[@caption='Size Exchanger']"
			[+] WPFControl	btnCancel
				[ ] locator "//Control[@caption='Cancel']"
			[+] WPFControl	btnAcceptDesign
				[ ] locator "//Control[@caption='Accept Design']"
	[ ] //==============Appended Done===========
	[ ] 
	[ ] 
[ ] 
[+] //==================Added by Zhangya================
	[ ] //Basic Library 
	[+] winclass wcContextMenuManager : AnyWin
		[+] INT SelectItem(String name)
			[ ] window cxtMenu = MyFind(ContextMenuLocator)
			[+] if(cxtMenu != null && cxtMenu.Exists(1) && cxtMenu.IsOpen == true)
				[ ] cxtMenu.Select("*{name}")
				[ ] sleep(0.2)
				[+] do
					[ ] cxtMenu.Close()
				[+] except
					[ ] 
			[+] else
				[ ] Print("Launch ContextMenu failed")
				[ ] return -1
			[ ] return 0
		[+] INT IsMenuItemActived(String name)
			[ ] window cxtMenu = MyFind(ContextMenuLocator)
			[+] if(cxtMenu != null && cxtMenu.Exists(1) && cxtMenu.IsOpen == true)
				[ ] INT ierr = 0
				[+] if(null == cxtMenu.Items || ListCount(cxtMenu.Items) <= 0)
					[ ] ierr = 3
				[+] else
					[ ] int i=0
					[+] for(i=1;i<=ListCount(cxtMenu.Items);i++)
						[+] if(MatchStr("*{name}*", cxtMenu.Items[i].GetProperty("caption")))
							[ ] break
					[+] if(i <= ListCount(cxtMenu.Items))
						[+] if(true == cxtMenu.Items[i].GetProperty("IsEnabled"))
							[ ] ierr = 0
						[+] else
							[ ] ierr = 1 
						[ ] 
					[+] else
						[ ] ierr = 2
				[ ] sleep(0.2)
				[+] do
					[+] if(cxtMenu != null && cxtMenu.Exists(1) && cxtMenu.IsOpen == true)
						[ ] cxtMenu.Close()
				[+] except
					[ ] 
				[ ] return ierr
			[+] else
				[ ] Print("Launch ContextMenu failed")
				[ ] return -1
			[ ] return 0
			[ ] 
			[ ] 
	[+] type AT_GridCellState is enum
		[ ] GridCellState_Blank = 1
		[ ] GridCellState_Disalbe = 2
		[ ] GridCellState_Readonly = 4
		[ ] GridCellState_Mask = 7
	[+] winclass wcDefineSubStreamDataGrid : wcAPDataGrid
		[+] //Private Variables
			[ ] String ClmHeaderRetrievedKey="caption"
			[ ] wcContextMenuManager CtxMenuMan
			[ ] 
		[+] WPFComboBox cbLastComboBoxCell
			[ ] locator WPFComboBox_cbLastComboBoxCell_Locator
		[+] SetComboBoxCellData(INT Record, INT Cell,STRING str, BOOLEAN bVerify optional)
			[+] //Description
				[ ] 
			[+] if(str != null)
				[+] do
					[ ] list of WINDOW lwTable
					[ ] window wTable
					[ ] wTable=this.FindWPFItemsControl("//WPFItemsControl[@className='RecordListControl']")
					[ ] wTable.FindWPFContentControl("//WPFControl[@className='DataRecordPresenter'][{Record}]//WPFContentControl[@className='CellValuePresenter'][{Cell}]").DoubleClick()
					[ ] sleep(1)
					[ ] string sRet = cbLastComboBoxCell.SelectedItemText
					[ ] cbLastComboBoxCell.Select("{str}")
				[+] except
					[ ] Log.Fail("Fail to enter data into comboBox cell in datagrid")
					[ ] Desktop.CaptureBitmap("{sDataout}\SetComboBoxCellData.bmp")
				[+] if (bVerify!=null && bVerify==true)
					[ ] string sValue =this.GetCellValue(Cell-1,Record-1)
					[+] if(Lower(str) == Lower(sValue))
						[ ] Log.Pass("Value modifies to {str} Pass.")
					[+] else
						[ ] Log.Error("Value modifies to {str} Fail, actually to {sValue}.")
			[ ] 
		[+] BOOLEAN IsEnabled(window cell)
			[ ] return true
		[+] BOOLEAN IsReadOnly(window cell)
			[ ] return true
		[+] BOOLEAN IsBlank(window cell, BOOLEAN bDisplayExist optional)
			[ ] return true
		[+] BOOLEAN CheckCellState(INT Column, INT Row, INT ClmCount, INT RowCount, AT_GridCellState expectStatus,BOOLEAN bDisplayExist optional)
			[+] //Description
				[ ] 
			[ ] // this.TypeKeys("<Home 2>")
			[+] // if(Column!=0)
				[ ] // this.TypeKeys("<Right {Column}>")
			[+] // else
				[ ] // 
			[+] // if(Row!=0)
				[ ] // this.TypeKeys("<Down {Row}>")
			[+] // else 
				[ ] // 
				[ ] // 
			[ ] // 
			[ ] // MyFind("//WPFTextBlock[@automationId='TextBlock'][{}]")
			[+] // if (bVerify!=null && bVerify==true)
				[ ] // string sValue =this.GetCellValue(Cell-1,Record-1)
				[+] // if(Lower(str) == Lower(sValue))
					[ ] // Log.Pass("Value modifies to {str} Pass.")
				[+] // else
					[ ] // Log.Error("Value modifies to {str} Fail, actually to {sValue}.")
			[ ] return true
			[ ] 
		[+] window GetClmHeaderControl(String strClmHeader)
			[ ] list of window finds = MyFindByWndRectRelationship(this,WPFContentControl_ClmHeaderArea_Locator)
			[+] if(finds == null || ListCount(finds) <= 0)
				[ ] return null
			[ ] 
			[ ] window gdHeader = finds[1]
			[+] if(gdHeader == null)
				[ ] return null
			[ ] 
			[ ] finds = MyFindByWndRectRelationship(gdHeader,WPFContentControl_AllOfClmHeader_Locator)
			[+] if(finds == null || ListCount(finds) <= 0)
				[ ] return null
			[ ] 
			[ ] 
			[ ] int i=0
			[+] for(i=1;i<=ListCount(finds);i++)
				[+] if(strClmHeader == finds[i].GetProperty(ClmHeaderRetrievedKey))
					[ ] return finds[i] //return the first matched
			[ ] return null
			[ ] 
		[+] window GetClmHeaderControlByIndex(INT iClmHeadIndex)
			[ ] list of window finds = MyFindByWndRectRelationship(this,WPFContentControl_ClmHeaderArea_Locator)
			[+] if(finds == null || ListCount(finds) <= 0)
				[ ] return null
			[ ] 
			[ ] window gdHeader = finds[1]
			[+] if(gdHeader == null)
				[ ] return null
			[ ] 
			[ ] finds = MyFindByWndRectRelationship(gdHeader,WPFContentControl_AllOfClmHeader_Locator)
			[+] if(finds == null || ListCount(finds) <= 0)
				[ ] return null
			[ ] 
			[+] if(ListCount(finds) >= iClmHeadIndex)
				[ ] return finds[iClmHeadIndex]
			[+] else
				[ ] return null
			[ ] 
		[+] window GetGridCell(INT Record, INT Cell)
			[+] do
				[ ] list of WINDOW lwTable
				[ ] window wTable
				[ ] wTable=this.FindWPFItemsControl("//WPFItemsControl[@className='RecordListControl']")
				[ ] window find = wTable.FindWPFContentControl("//WPFControl[@className='DataRecordPresenter'][{Record}]//WPFContentControl[@className='CellValuePresenter'][{Cell}]")
				[ ] return find
			[+] except
				[ ] return null
		[+] List of STRING GetEntireClmData(String strClmHeader)
			[ ] window ClmHeader = GetClmHeaderControl(strClmHeader)
			[+] if(ClmHeader == null)
				[ ] return null
			[ ] 
			[ ] ClmHeader.Click(MB_RIGHT)
			[ ] sleep(0.1)
			[ ] 
			[ ] Clipboard.SetText()
			[ ] 
			[+] if(0 != CtxMenuMan.SelectItem("Copy"))
				[ ] return null
			[ ] 
			[ ] list lstStr = Clipboard.GetText()
			[+] if(lstStr == null || ListCount(lstStr) <= 0)
				[ ] return null
			[+] else
				[ ] return lstStr
			[ ] 
		[+] List of STRING GetEntireClmDataByIndex(INT iClmHeadIndex)
			[ ] window ClmHeader = GetClmHeaderControlByIndex(iClmHeadIndex)
			[+] if(ClmHeader == null)
				[ ] return null
			[ ] 
			[ ] ClmHeader.Click(MB_RIGHT)
			[ ] sleep(0.1)
			[ ] 
			[ ] Clipboard.SetText()
			[ ] 
			[+] if(0 != CtxMenuMan.SelectItem("Copy"))
				[ ] return null
			[ ] 
			[ ] list lstStr = Clipboard.GetText()
			[+] if(lstStr == null || ListCount(lstStr) <= 0)
				[ ] return null
			[+] else
				[ ] return lstStr
			[ ] 
		[ ] 
		[+] INT IsEntireClmReadonly(String strClmHeader)
			[ ] window ClmHeader = GetClmHeaderControl(strClmHeader)
			[+] if(ClmHeader == null)
				[ ] return -1
			[ ] 
			[ ] ClmHeader.Click(MB_RIGHT)
			[ ] sleep(0.1)
			[ ] 
			[ ] INT errno = CtxMenuMan.IsMenuItemActived("Paste")
			[+] if(0 > errno)
				[ ] return -1
			[+] else if(0 == errno)
				[ ] return 1
			[+] else
				[ ] return 0
			[ ] 
		[+] INT IsEntireClmReadonlyByIndex(INT iClmHeadIndex)
			[ ] window ClmHeader = GetClmHeaderControlByIndex(iClmHeadIndex)
			[+] if(ClmHeader == null)
				[ ] return -1
			[ ] 
			[ ] ClmHeader.Click(MB_RIGHT)
			[ ] sleep(0.1)
			[ ] 
			[ ] INT errno = CtxMenuMan.IsMenuItemActived("Paste")
			[+] if(0 > errno)
				[ ] return -1
			[+] else if(0 == errno)
				[ ] return 1
			[+] else
				[ ] return 0
			[ ] 
		[ ] 
		[+] INT IsGridCellReadonly(INT Record, INT Cell)
			[ ] window gridcell = GetGridCell(Record,Cell)
			[+] if(gridcell == null)
				[ ] return -1
			[ ] 
			[ ] gridcell.Click(MB_RIGHT)
			[ ] sleep(0.1)
			[ ] 
			[ ] INT errno = CtxMenuMan.IsMenuItemActived("Clea")
			[+] if(0 > errno)
				[ ] return -1
			[+] else if(0 == errno)
				[ ] return 1
			[+] else if(1 == errno)
				[ ] return 0
			[+] else
				[ ] return errno
			[ ] 
	[+] winclass wcListBoxItemsExchange : AnyWin
		[+] WPFListBox lbxSrc
			[ ] locator WPFListBox_lbxSrc_Locator
		[+] WPFListBox lbxDest
			[ ] locator WPFListBox_lbxDest_Locator
		[+] WPFButton AddtoDest
			[ ] locator WPFButton_AddtoDest_Locator
		[+] WPFButton AddAlltoDest
			[ ] locator WPFButton_AddAlltoDest_Locator
		[+] WPFButton RmFromDest
			[ ] locator WPFButton_RmFromDest_Locator
		[+] WPFButton RmAllFromDest
			[ ] locator WPFButton_RmAllFromDest_Locator
		[ ] 
		[ ] 
		[+] // ResetLocaotrs(String src,String dst)
			[ ] // srclocator = src
			[ ] // dstlocator = dst
		[+] ClickButton(window button,BOOLEAN bActivedVerify optional,STRING strButtonDes optional)
			[+] if (bActivedVerify!=null && bActivedVerify==true)
				[+] if(strButtonDes == null)
					[ ] strButtonDes = ""
				[+] if(button.IsEnabled)
					[ ] Log.Pass("Button {strButtonDes} is active Pass.")
				[+] else
					[ ] Log.Error("Button {strButtonDes} is inactive Fail.")
			[ ] button.Click()
			[ ] sleep(1)
		[+] ListBoxMultiSelect(window listbox, List of String itemtextlist)
			[+] if(itemtextlist == null || ListCount(itemtextlist) == 0)
				[ ] return
			[ ] INT i = 0
			[+] for(i = 1; i <= ListCount(itemtextlist); i++)
				[ ] listbox.Select(itemtextlist[i],MOD_CTRL)
				[ ] sleep(0.2)
			[ ] 
		[+] BOOLEAN CanFindAnyItemInListBox(window src,List of String itemtextlist)
			[+] if(itemtextlist == null || ListCount(itemtextlist) == 0)
				[ ] return false
			[ ] 
			[ ] BOOLEAN bCanFindInSrc = false
			[+] if(src.SelectedItemTexts != null && ListCount(src.SelectedItemTexts) > 0)
				[ ] src.SelectAll()
				[ ] INT i = 0 
				[ ] INT j = 0
				[+] for(i = 1; i <= ListCount(itemtextlist); i++)
					[+] for(j = 1; j <= ListCount(src.SelectedItemTexts); j++)
						[+] if(itemtextlist[i] == src.SelectedItemTexts[j])
							[ ] bCanFindInSrc = true
							[ ] break
					[+] if(bCanFindInSrc == true)
						[ ] break
				[ ] src.DeselectAll()
			[ ] return bCanFindInSrc
			[ ] 
		[+] BOOLEAN CanFindAllItemsInListBox(window dst,List of String itemtextlist)
			[+] if(itemtextlist == null || ListCount(itemtextlist) == 0)
				[ ] return true
			[ ] 
			[ ] BOOLEAN bCanFindAllInDest = true
			[+] if(dst.SelectedItemTexts != null && ListCount(dst.SelectedItemTexts) > 0)
				[ ] dst.SelectAll()
				[ ] INT i = 0 
				[ ] INT j = 0
				[+] for(i = 1; i <= ListCount(itemtextlist); i++)
					[+] for(j = 1; j <= ListCount(dst.SelectedItemTexts); j++)
						[+] if(itemtextlist[i] == dst.SelectedItemTexts[j])
							[ ] break
					[+] if(j == ListCount(dst.SelectedItemTexts))
						[ ] bCanFindAllInDest = false
						[ ] break
				[ ] dst.DeselectAll()
			[+] else
				[ ] bCanFindAllInDest = false
			[ ] return bCanFindAllInDest
			[ ] 
		[+] BOOLEAN IsItemsTransferred(window src, window dst, List of String itemtextlist)
			[ ] BOOLEAN result = false
			[+] if(src == null || dst == null)
				[ ] result = false
			[+] else if(itemtextlist == null || ListCount(itemtextlist) == 0)
				[ ] result = true
			[+] else if(CanFindAnyItemInListBox(src,itemtextlist) == false && CanFindAllItemsInListBox(dst,itemtextlist) == true)
				[ ] result = true
			[+] else
				[ ] result = false
			[ ] 
			[ ] String itemtexts = ""
			[ ] int k = 0
			[+] for(k = 1; k<= ListCount(itemtextlist); k++)
				[ ] itemtexts += "{itemtextlist[k]}, "
			[ ] 
			[+] if (result == true)
				[ ] Log.Pass("Items {itemtexts} have been moved to Selected column Pass.")
			[+] else
				[ ] Log.Error("All of items {itemtexts} have not been moved to Selected column Fail.")
			[ ] 
			[ ] return result
	[+] winclass wcPSDMeshSetting : AnyWin
		[+] //Private Variables
			[+] WPFComboBox cbCombobox
				[ ] locator WPFComboBox_cbCombobox_Locator
			[+] WPFTextBox tbTextBox
				[ ] locator WPFTextBox_tbTextBox_Locator
			[ ] window _dlgWnd = null
		[+] property dlgWnd //For mode of this window Hosted in Dialog 
			[+] Set(window wnd)
				[ ] _dlgWnd = wnd
			[+] window Get()
				[ ] return _dlgWnd
		[ ] 
		[+] WPFButton btnCreatePSDMesh
			[ ] locator WPFButton_btnCreatePSDMesh_Locator
		[+] wcDefineSubStreamDataGrid dgParticleSizeDistributionMesh
			[ ] locator wcDefineSubStreamDataGrid_dgParticleSizeDistributionMesh_Locator
		[+] property MeshType
			[+] window Get()
				[ ] window dropdownbtn = MyFind(WPFToggleButton_MeshType_Locator,dlgWnd)
				[+] if(dropdownbtn != null)
					[ ] dropdownbtn.Click()
				[ ] sleep(0.2)
				[ ] this.cbCombobox.Close()
				[ ] return this.cbCombobox
		[+] property SizeUnits
			[+] window Get()
				[ ] window dropdownbtn = MyFind(WPFToggleButton_SizeUnits_Locator,dlgWnd)
				[+] if(dropdownbtn != null)
					[ ] dropdownbtn.Click()
				[ ] sleep(0.2)
				[ ] this.cbCombobox.Close()
				[ ] return this.cbCombobox
		[+] property IntervalNo
			[+] STRING Get()
				[ ] window wnd = MyFind(WPFControl_IntervalNo_Locator,dlgWnd)
				[+] if(wnd != null)
					[ ] wnd.Click()
				[ ] 
				[ ] Clipboard.SetText()
				[ ] this.tbTextBox.TypeKeys("<Ctrl-C> 5")
				[ ] list lstStr = Clipboard.GetText()
				[ ] return lstStr[1]
				[ ] 
			[+] Set(STRING value)
				[ ] window wnd = MyFind(WPFControl_IntervalNo_Locator,dlgWnd)
				[+] if(wnd != null)
					[ ] wnd.Click()
				[ ] 
				[+] list of STRING interval = {...}
					[ ] value
				[ ] Clipboard.SetText(interval)
				[ ] this.tbTextBox.TypeKeys("<Ctrl-V>")
				[ ] this.tbTextBox.TypeKeys("<Enter>")
				[ ] 
		[+] property LowerLimit
			[+] STRING Get()
				[ ] window wnd = MyFind(WPFControl_LowerLimit_Locator,dlgWnd)
				[+] if(wnd != null)
					[ ] wnd.Click()
				[ ] 
				[ ] Clipboard.SetText()
				[ ] this.tbTextBox.TypeKeys("<Ctrl-C> 5")
				[ ] list lstStr = Clipboard.GetText()
				[ ] return lstStr[1]
				[ ] 
			[+] Set(STRING value)
				[ ] window wnd = MyFind(WPFControl_LowerLimit_Locator,dlgWnd)
				[+] if(wnd != null)
					[ ] wnd.Click()
				[ ] 
				[+] list of STRING interval = {...}
					[ ] value
				[ ] Clipboard.SetText(interval)
				[ ] this.tbTextBox.TypeKeys("<Ctrl-V>")
				[ ] this.tbTextBox.TypeKeys("<Enter>")
				[ ] 
		[+] property UpperLimit
			[+] STRING Get()
				[ ] window wnd = MyFind(WPFControl_UpperLimit_Locator,dlgWnd)
				[+] if(wnd != null)
					[ ] wnd.Click()
				[ ] 
				[ ] Clipboard.SetText()
				[ ] this.tbTextBox.TypeKeys("<Ctrl-C> 5")
				[ ] list lstStr = Clipboard.GetText()
				[ ] return lstStr[1]
				[ ] 
			[+] Set(STRING value)
				[ ] window wnd = MyFind(WPFControl_UpperLimit_Locator,dlgWnd)
				[+] if(wnd != null)
					[ ] wnd.Click()
				[ ] 
				[+] list of STRING interval = {...}
					[ ] value
				[ ] Clipboard.SetText(interval)
				[ ] this.tbTextBox.TypeKeys("<Ctrl-V>")
				[ ] this.tbTextBox.TypeKeys("<Enter>")
				[ ] 
		[ ] 
	[+] // AdjustTabItemScrollView()
		[ ] // window tabitm = MyFind(WPFContentControl_ScrollViewCtl_Locator)
		[ ] // window btnZoomOut = MyFind(WPFRepeatButton_ZoomOut_Locator)
		[ ] // window btnZoomIn = MyFind(WPFRepeatButton_ZoomIn_Locator)
		[+] // if(tabitm == null || btnZoomOut == null || btnZoomIn == null)
			[ ] // return
		[ ] // 
		[ ] // REAL V_Max = tabitm.GetMaximumScrollPosition(O_VERTICAL)
		[ ] // REAL H_Max = tabitm.GetMaximumScrollPosition(O_HORIZONTAL)
		[ ] // 
		[+] // if(Min(V_Max, H_Max) > 8.0)
			[+] // while(Min(V_Max, H_Max) > 8.0)
				[ ] // btnZoomOut.Click()
				[ ] // tabitm = MyFind(WPFContentControl_ScrollViewCtl_Locator)
				[ ] // V_Max = tabitm.GetMaximumScrollPosition(O_VERTICAL)
				[ ] // H_Max = tabitm.GetMaximumScrollPosition(O_HORIZONTAL)
				[ ] // 
		[+] // else
			[+] // while(Max(V_Max,H_Max) <= 8.0)
				[ ] // btnZoomIn.Click()
				[ ] // tabitm = MyFind(WPFContentControl_ScrollViewCtl_Locator)
				[ ] // V_Max = tabitm.GetMaximumScrollPosition(O_VERTICAL)
				[ ] // H_Max = tabitm.GetMaximumScrollPosition(O_HORIZONTAL)
				[ ] // Print(">>>>>V_Max>>>>>>>>>{V_Max}")
				[ ] // Print(">>>>H_Max>>>>>>>>>>{H_Max}")
				[ ] // 
			[ ] // 
	[+] winclass myWPFTreeView : WPFTreeView
		[+] void Select(LISTITEM item)
			[ ] derived::Select(item)
			[ ] this.SelectedItem.Click()
			[ ] 
	[ ] //Simulation Solid Screens
	[+] winclass wcSimulationSetupSolids : AnyWin
		[+] AnyWin SolidCharacterization
			[+] //Private
				[+] WPFContentControl Header
					[ ]  locator WPFContentControl_SolidCharacterization_Header_Locator
			[ ] wcListBoxItemsExchange ListBoxItemsExchage
		[+] AnyWin PSDMesh
			[+] //Private
				[+] WPFContentControl Header
					[ ]  locator WPFContentControl_PSDMesh_Header_Locator
			[+] wcAPDataGrid dgPsdMesh
				[ ] locator wcAPDataGrid_PSDMesh_dgPsdMesh_Locator
			[+] WPFButton btnNew
				[ ] locator WPFButton_PSDMesh_btnNew_Locator
			[+] WPFButton btnEdit
				[ ] locator WPFButton_PSDMesh_btnEdit_Locator
			[+] WPFButton btnDelete
				[ ] locator WPFButton_PSDMesh_btnDelete_Locator
			[+] WPFButton btnCopy
				[ ] locator WPFButton_PSDMesh_btnCopy_Locator
			[+] WPFButton btnRename
				[ ] locator WPFButton_PSDMesh_btnRename_Locator
			[+] WPFButton btnPaste
				[ ] locator WPFButton_PSDMesh_btnPaste_Locator
			[ ] 
			[ ] 
		[+] AnyWin Substreams
			[+] //Private
				[+] WPFContentControl Header
					[ ]  locator WPFContentControl_Substreams_Locator
			[+] wcDefineSubStreamDataGrid dgDefineSubStream
				[ ] locator wcDefineSubStreamDataGrid_dgDefineSubStream_Locator
		[+] GotoTabItem(STRING name)
			[+] switch(name)
				[+] case "SolidCharacterization"
					[ ] this.SolidCharacterization.Header.Click()
					[ ] sleep(0.2)
					[ ] break
				[+] case "PSDMesh"
					[ ] this.PSDMesh.Header.Click()
					[ ] sleep(0.2)
					[ ] break
				[+] case "Substreams"
					[ ] this.Substreams.Header.Click()
					[ ] sleep(0.2)
					[ ] break
				[+] default
					[ ] break
	[+] winclass wcSimulationSetupSolids_SA : AnyWin
		[+] wcPSDMeshSetting Mesh
			[+] //Private Variables
				[+] WPFContentControl Header
					[ ]  locator WPFContentControl_Mesh_Header_Locator
		[+] AnyWin Information
			[+] WPFContentControl Header
				[ ]  locator WPFContentControl_Information_Header_Locator
			[ ] 
		[+] GotoTabItem(STRING name)
			[+] switch(name)
				[+] case "Mesh"
					[ ] this.Mesh.Header.Click()
					[ ] sleep(0.2)
					[ ] break
				[+] case "Information"
					[ ] this.Information.Header.Click()
					[ ] sleep(0.2)
					[ ] break
				[+] default
					[ ] break
		[ ] 
	[+] winclass wcSimulationStreamsWETCOAL_Input : AnyWin
		[+] AnyWin Mixed
			[+] WPFContentControl Header
				[ ]  locator WPFContentControl_Mixed_Header_Locator
		[+] AnyWin CISolid
			[+] WPFContentControl Header
				[ ] locator WPFContentControl_CISolid_Header_Locator
		[+] AnyWin NCSolid
			[+] //Private Variables
				[+] WPFContentControl Header
					[ ] locator WPFContentControl_NCSolid_Header_Locator
				[+] WPFComboBox cbCombobox
					[ ] locator WPFComboBox_NCSolid_cbCombobox_Locator
				[+] WPFTextBox tbTextBox
					[ ] locator WPFTextBox_NCSolid_tbTextBox_Locator
			[+] WPFToggleButton btnParticleSizeDistribution
				[ ] locator WPFToggleButton_NCSolid_btnParticleSizeDistribution_Locator
			[+] WPFButton btnEditPSDMesh
				[ ] locator WPFButton_NCSolid_EditPSDMesh_Locator
			[+] WPFButton btnCalculate
				[ ] locator WPFButton_NCSolid_btnCalculate_Locator
			[ ] 
			[+] property PSDMeshID
				[+] window Get()
					[ ] window dropdownbtn = MyFind(WPFToggleButton_NCSolid_PSDMeshID_Locator)
					[+] if(dropdownbtn != null)
						[ ] dropdownbtn.Click()
					[ ] sleep(0.2)
					[ ] this.cbCombobox.Close()
					[ ] return this.cbCombobox
			[+] property DistFunctionTypeLabel
				[+] window Get()
					[ ] return MyFind(WPFToggleButton_NCSolid_DistFunctionTypeLabel_Locator)
			[+] property DistFunctionType
				[+] window Get()
					[ ] window dropdownbtn = MyFind(WPFToggleButton_NCSolid_DistFunctionType_Locator)
					[+] if(dropdownbtn != null)
						[ ] dropdownbtn.Click()
					[ ] sleep(0.2)
					[ ] this.cbCombobox.Close()
					[ ] return this.cbCombobox
			[+] property IsDistFunctionTypeEnabled
				[+] BOOLEAN Get()
					[ ] window dropdownbtn = MyFind(WPFToggleButton_NCSolid_DistFunctionType_Locator)
					[+] if(dropdownbtn != null)
						[ ] return dropdownbtn.IsEnabled
					[+] else
						[ ] return false
				[ ] 
			[+] property DispersionParam
				[+] STRING Get()
					[ ] window wnd = MyFind(WPFControl_NCSolid_DispersionParam_Locator,null)
					[+] if(wnd != null)
						[ ] wnd.Click()
					[ ] 
					[ ] Clipboard.SetText()
					[ ] this.tbTextBox.TypeKeys("<Ctrl-C> 5")
					[ ] list lstStr = Clipboard.GetText()
					[ ] return lstStr[1]
					[ ] 
				[+] Set(STRING value)
					[ ] window wnd = MyFind(WPFControl_NCSolid_DispersionParam_Locator,null)
					[+] if(wnd != null)
						[ ] wnd.Click()
					[ ] 
					[+] list of STRING interval = {...}
						[ ] value
					[ ] Clipboard.SetText(interval)
					[ ] this.tbTextBox.TypeKeys("<Ctrl-V>")
					[ ] this.tbTextBox.TypeKeys("<Enter>")
					[ ] 
			[+] property MaximumDiameter
				[+] STRING Get()
					[ ] window wnd = MyFind(WPFControl_NCSolid_MaximumDiameter_Locator,null)
					[+] if(wnd != null)
						[ ] wnd.Click()
					[ ] 
					[ ] Clipboard.SetText()
					[ ] this.tbTextBox.TypeKeys("<Ctrl-C> 5")
					[ ] list lstStr = Clipboard.GetText()
					[ ] return lstStr[1]
					[ ] 
				[+] Set(STRING value)
					[ ] window wnd = MyFind(WPFControl_NCSolid_MaximumDiameter_Locator,null)
					[+] if(wnd != null)
						[ ] wnd.Click()
					[ ] 
					[+] list of STRING interval = {...}
						[ ] value
					[ ] Clipboard.SetText(interval)
					[ ] this.tbTextBox.TypeKeys("<Ctrl-V>")
					[ ] this.tbTextBox.TypeKeys("<Enter>")
					[ ] 
			[+] property DiameterUnits
				[+] window Get()
					[ ] window dropdownbtn = MyFind(WPFToggleButton_NCSolid_DiameterUnits_Locator)
					[+] if(dropdownbtn != null)
						[ ] dropdownbtn.Click()
					[ ] sleep(0.2)
					[ ] this.cbCombobox.Close()
					[ ] return this.cbCombobox
			[+] property D63Label
				[+] window Get()
					[ ] return MyFind(WPFToggleButton_NCSolid_D63Label_Locator)
			[+] property D63
				[+] STRING Get()
					[ ] return this.MaximumDiameter
				[+] Set(STRING value)
					[ ] this.MaximumDiameter = value
			[+] property D63Units
				[+] window Get()
					[ ] return DiameterUnits
					[ ] 
			[+] wcDefineSubStreamDataGrid dgDataGrid
				[ ] locator wcAPDataGrid_NCSolid_dgDataGrid_Locator
			[+] WPFRadioButton rbtnADistFunction
				[ ] locator WPFRadioButton_NCSolid_rbtnADistFunction_Locator
			[+] WPFRadioButton rbtnUserspecifiedValues
				[ ] locator WPFRadioButton_NCSolid_rbtnUserspecifiedValues_Locator
			[ ] 
		[+] AnyWin FlashOptions
			[+] WPFContentControl Header
				[ ]  locator WPFContentControl_FlashOptions_Header_Locator
			[ ] 
		[+] AnyWin EOOptions
			[+] WPFContentControl Header
				[ ]  locator WPFContentControl_EOOptions_Header_Locator
			[ ] 
		[+] AnyWin Costing
			[+] WPFContentControl Header
				[ ]  locator WPFContentControl_Costing_Header_Locator
			[ ] 
		[+] AnyWin Information
			[+] WPFContentControl Header
				[ ]  locator WPFContentControl_Information_Header_Locator
			[ ] 
		[ ] 
		[+] GotoTabItem(STRING name)
			[+] switch(name)
				[+] case "Mixed"
					[ ] this.Mixed.Header.Click()
					[ ] sleep(0.2)
					[ ] break
				[+] case "CISolid"
					[ ] this.CISolid.Header.Click()
					[ ] sleep(0.2)
					[ ] break
				[+] case "NCSolid"
					[ ] this.NCSolid.Header.Click()
					[ ] sleep(0.2)
					[ ] break
				[+] case "FlashOptions"
					[ ] this.FlashOptions.Header.Click()
					[ ] sleep(0.2)
					[ ] break
				[+] case "EOOptions"
					[ ] this.EOOptions.Header.Click()
					[ ] sleep(0.2)
					[ ] break
				[+] case "Costing"
					[ ] this.Costing.Header.Click()
					[ ] sleep(0.2)
					[ ] break
				[+] case "Information"
					[ ] this.Information.Header.Click()
					[ ] sleep(0.2)
					[ ] break
				[+] default
					[ ] break
	[+] winclass wcPSVEditBox : WPFUserControl
		[+] WPFControl txtVal
			[ ] locator "/WPFControl[@automationId='displayBox']"
		[+] WPFControl grpValBox
			[ ] locator "@automationId='valBox'"
			[+] WPFTextBox txtInput
				[ ] locator "@automationId='PART_FocusSite'"
		[+] wcAPWPFComboBox cboUnit
			[ ] locator "@automationId='unitCmb'"
			[+] void Select(string sItem)
				[ ] this.SetFocus()
				[ ] // this.Click()
				[ ] this.Find("//WPFToggleButton[@automationId='PART_DropDownButton']").Click()
				[ ] sleep(0.5)
				[+] do
					[ ] this.Find("//WPFComboBox[@automationId='PART_FocusSite']").Select(sItem)
				[+] except
					[+] do
						[ ] Print("***Looking afor ComboBoxItem***")
						[+] do
							[ ] this.Find("//WPFComboBoxItem[@caption='{sItem}']").click()
						[+] except
							[ ] this.click()  // Set Focus May not work for combobox within control. Try reclicking
							[ ] this.Find("//WPFComboBoxItem[@caption='{sItem}']").click()
					[+] except
						[ ] Print("***Can't Find ComboBoxItem, Typing in {sItem} to select item***")
						[ ] this.Click()
						[ ] this.TypeKeys("{sItem}<enter>",0.2)
			[ ] 
		[+] void input(string sValue, string sUnit optional)
			[+] if this.txtVal.Exists()
				[ ] this.txtVal.Click()
			[ ] this.grpValBox.txtInput.SetText(sValue)
			[+] if sUnit != null
				[ ] this.cboUnit.Select(sUnit)
			[+] else
				[ ] this.grpValBox.txtInput.TypeKeys("<Enter>")
	[+] winclass wcMMVariableEdit : WPFControl
		[+] wcAPWPFTextBox txtValue
			[ ] locator "//WPFControl[@automationId='textBox']"
		[+] wcAPWPFComboBox cboUnit
			[ ] locator "//WPFControl[@automationId='PART_UnitEdit']"
		[+] void input(string sValue, string sUnit optional)
			[ ] this.txtValue.InputText(sValue)
			[+] if sUnit != null
				[ ] this.cboUnit.Select(sUnit)
		[+] list of string GetVariable()
			[ ] list of string lsRet = {}
			[ ] listAppend(lsRet, this.txtValue.TextCapture())
			[+] if this.cboUnit.Exists()
				[ ] listAppend(lsRet, this.cboUnit.TextCapture())
			[ ] return lsRet
	[ ] 
[ ] 
